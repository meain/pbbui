/* eslint-disable */
const data = [{"name": "Pure Bash Bible", "content": {"STRINGS": {"Trim leading and trailing white-space from string": ["", "This is an alternative to `sed`, `awk`, `perl` and other tools. The", "function below works by finding all leading and trailing white-space and", "removing it from the start and end of the string. The `:` built-in is used in place of a temporary variable.", "", "**Example Function:**", "", "```sh", "trim_string() {", "    # Usage: trim_string \"   example   string    \"", "    : \"${1#\"${1%%[![:space:]]*}\"}\"", "    : \"${_%\"${_##*[![:space:]]}\"}\"", "    printf '%s\\n' \"$_\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ trim_string \"    Hello,  World    \"", "Hello,  World", "", "$ name=\"   John Black  \"", "$ trim_string \"$name\"", "John Black", "```", "", ""], "Trim all white-space from string and truncate spaces": ["", "This is an alternative to `sed`, `awk`, `perl` and other tools. The", "function below works by abusing word splitting to create a new string", "without leading/trailing white-space and with truncated spaces.", "", "**Example Function:**", "", "```sh", "trim_all() {", "    # Usage: trim_all \"   example   string    \"", "    set -f", "    set -- $*", "    printf '%s\\n' \"$*\"", "    set +f", "}", "```", "", "**Example Usage:**", "", "```shell", "$ trim_all \"    Hello,    World    \"", "Hello, World", "", "$ name=\"   John   Black  is     my    name.    \"", "$ trim_all \"$name\"", "John Black is my name.", "```", ""], "Use regex on a string": ["", "The result of `bash`'s regex matching can be used to replace `sed` for a", "large number of use-cases.", "", "**CAVEAT**: This is one of the few platform dependent `bash` features.", "`bash` will use whatever regex engine is installed on the user's system.", "Stick to POSIX regex features if aiming for compatibility.", "", "**CAVEAT**: This example only prints the first matching group. When using", "multiple capture groups some modification is needed.", "", "**Example Function:**", "", "```sh", "regex() {", "    # Usage: regex \"string\" \"regex\"", "    [[ $1 =~ $2 ]] && printf '%s\\n' \"${BASH_REMATCH[1]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ # Trim leading white-space.", "$ regex '    hello' '^\\s*(.*)'", "hello", "", "$ # Validate a hex color.", "$ regex \"#FFFFFF\" '^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$'", "#FFFFFF", "", "$ # Validate a hex color (invalid).", "$ regex \"red\" '^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$'", "```", "", "**Example Usage in script:**", "", "```shell", "is_hex_color() {", "    if [[ $1 =~ ^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then", "        printf '%s\\n' \"${BASH_REMATCH[1]}\"", "    else", "        printf '%s\\n' \"error: $1 is an invalid color.\"", "        return 1", "    fi", "}", "", "read -r color", "is_hex_color \"$color\" || color=\"#FFFFFF\"", "", "```", "", ""], "Split a string on a delimiter": ["", "**CAVEAT:** Requires `bash` 4+", "", "This is an alternative to `cut`, `awk` and other tools.", "", "**Example Function:**", "", "```sh", "split() {", "   # Usage: split \"string\" \"delimiter\"", "   IFS=$'\\n' read -d \"\" -ra arr <<< \"${1//$2/$'\\n'}\"", "   printf '%s\\n' \"${arr[@]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ split \"apples,oranges,pears,grapes\" \",\"", "apples", "oranges", "pears", "grapes", "", "$ split \"1, 2, 3, 4, 5\" \", \"", "1", "2", "3", "4", "5", "", "$ split \"hello---world---my---name---is---john\" \"---\"", "hello", "world", "my", "name", "is", "john", "```", ""], "Change a string to lowercase": ["", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "lower() {", "    # Usage: lower \"string\"", "    printf '%s\\n' \"${1,,}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lower \"HELLO\"", "hello", "", "$ lower \"HeLlO\"", "hello", "", "$ lower \"hello\"", "hello", "```", ""], "Change a string to uppercase": ["", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "upper() {", "    # Usage: upper \"string\"", "    printf '%s\\n' \"${1^^}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ upper \"hello\"", "HELLO", "", "$ upper \"HeLlO\"", "HELLO", "", "$ upper \"HELLO\"", "HELLO", "```", ""], "Reverse a string case": ["", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "reverse_case() {", "    # Usage: reverse_case \"string\"", "    printf '%s\\n' \"${1~~}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ reverse_case \"hello\"", "HELLO", "", "$ reverse_case \"HeLlO\"", "hElLo", "", "$ reverse_case \"HELLO\"", "hello", "```", ""], "Trim quotes from a string": ["", "**Example Function:**", "", "```sh", "trim_quotes() {", "    # Usage: trim_quotes \"string\"", "    : \"${1//\\'}\"", "    printf '%s\\n' \"${_//\\\"}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ var=\"'Hello', \\\"World\\\"\"", "$ trim_quotes \"$var\"", "Hello, World", "```", ""], "Strip all instances of pattern from string": ["", "**Example Function:**", "", "```sh", "strip_all() {", "    # Usage: strip_all \"string\" \"pattern\"", "    printf '%s\\n' \"${1//$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ strip_all \"The Quick Brown Fox\" \"[aeiou]\"", "Th Qck Brwn Fx", "", "$ strip_all \"The Quick Brown Fox\" \"[[:space:]]\"", "TheQuickBrownFox", "", "$ strip_all \"The Quick Brown Fox\" \"Quick \"", "The Brown Fox", "```", ""], "Strip first occurrence of pattern from string": ["", "**Example Function:**", "", "```sh", "strip() {", "    # Usage: strip \"string\" \"pattern\"", "    printf '%s\\n' \"${1/$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ strip \"The Quick Brown Fox\" \"[aeiou]\"", "Th Quick Brown Fox", "", "$ strip \"The Quick Brown Fox\" \"[[:space:]]\"", "TheQuick Brown Fox", "```", ""], "Strip pattern from start of string": ["", "**Example Function:**", "", "```sh", "lstrip() {", "    # Usage: lstrip \"string\" \"pattern\"", "    printf '%s\\n' \"${1##$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lstrip \"The Quick Brown Fox\" \"The \"", "Quick Brown Fox", "```", ""], "Strip pattern from end of string": ["", "**Example Function:**", "", "```sh", "rstrip() {", "    # Usage: rstrip \"string\" \"pattern\"", "    printf '%s\\n' \"${1%%$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ rstrip \"The Quick Brown Fox\" \" Fox\"", "The Quick Brown", "```", ""], "Percent-encode a string": ["", "**Example Function:**", "", "```sh", "urlencode() {", "    # Usage: urlencode \"string\"", "    local LC_ALL=C", "    for (( i = 0; i < ${#1}; i++ )); do", "        : \"${1:i:1}\"", "        case \"$_\" in", "            [a-zA-Z0-9.~_-])", "                printf '%s' \"$_\"", "            ;;", "", "            *)", "                printf '%%%02X' \"'$_\"", "            ;;", "        esac", "    done", "    printf '\\n'", "}", "```", "", "**Example Usage:**", "", "```shell", "$ urlencode \"https://github.com/dylanaraps/pure-bash-bible\"", "https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible", "```", ""], "Decode a percent-encoded string": ["", "**Example Function:**", "", "```sh", "urldecode() {", "    # Usage: urldecode \"string\"", "    : \"${1//+/ }\"", "    printf '%b\\n' \"${_//%/\\\\x}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ urldecode \"https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible\"", "https://github.com/dylanaraps/pure-bash-bible", "```", ""], "Check if string contains a sub-string": ["", "**Using a test:**", "", "```shell", "if [[ $var == *sub_string* ]]; then", "    printf '%s\\n' \"sub_string is in var.\"", "fi", "", "if [[ $var != *sub_string* ]]; then", "    printf '%s\\n' \"sub_string is not in var.\"", "fi", "", "if [[ ${arr[*]} == *sub_string* ]]; then", "    printf '%s\\n' \"sub_string is in array.\"", "fi", "```", "", "**Using a case statement:**", "", "```shell", "case \"$var\" in", "    *sub_string*)", "        # Do stuff", "    ;;", "", "    *sub_string2*)", "        # Do more stuff", "    ;;", "", "    *)", "        # Else", "    ;;", "esac", "```", ""], "Check if string starts with sub-string": ["", "```shell", "if [[ $var == sub_string* ]]; then", "    printf '%s\\n' \"var starts with sub_string.\"", "fi", "", "if [[ $var != sub_string* ]]; then", "    printf '%s\\n' \"var does not start with sub_string.\"", "fi", "```", ""], "Check if string ends with sub-string": ["", "```shell", "if [[ $var == *sub_string ]]; then", "    printf '%s\\n' \"var ends with sub_string.\"", "fi", "", "if [[ $var != *sub_string ]]; then", "    printf '%s\\n' \"var does not end with sub_string.\"", "fi", "```", "", "", ""]}, "ARRAYS": {"Reverse an array": ["", "Enabling `extdebug` allows access to the `BASH_ARGV` array which stores", "the current function\u2019s arguments in reverse.", "", "**CAVEAT**: Requires `shopt -s compat44` in `bash` 5.0+.", "", "**Example Function:**", "", "```sh", "reverse_array() {", "    # Usage: reverse_array \"array\"", "    shopt -s extdebug", "    f()(printf '%s\\n' \"${BASH_ARGV[@]}\"); f \"$@\"", "    shopt -u extdebug", "}", "```", "", "**Example Usage:**", "", "```shell", "$ reverse_array 1 2 3 4 5", "5", "4", "3", "2", "1", "", "$ arr=(red blue green)", "$ reverse_array \"${arr[@]}\"", "green", "blue", "red", "```", ""], "Remove duplicate array elements": ["", "Create a temporary associative array. When setting associative array", "values and a duplicate assignment occurs, bash overwrites the key. This", "allows us to effectively remove array duplicates.", "", "**CAVEAT:** Requires `bash` 4+", "", "**CAVEAT:** List order may not stay the same.", "", "**Example Function:**", "", "```sh", "remove_array_dups() {", "    # Usage: remove_array_dups \"array\"", "    declare -A tmp_array", "", "    for i in \"$@\"; do", "        [[ $i ]] && IFS=\" \" tmp_array[\"${i:- }\"]=1", "    done", "", "    printf '%s\\n' \"${!tmp_array[@]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5", "1", "2", "3", "4", "5", "", "$ arr=(red red green blue blue)", "$ remove_array_dups \"${arr[@]}\"", "red", "green", "blue", "```", ""], "Random array element": ["", "**Example Function:**", "", "```sh", "random_array_element() {", "    # Usage: random_array_element \"array\"", "    local arr=(\"$@\")", "    printf '%s\\n' \"${arr[RANDOM % $#]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ array=(red green blue yellow brown)", "$ random_array_element \"${array[@]}\"", "yellow", "", "$ random_array_element 1 2 3 4 5 6 7", "3", "```", ""], "Cycle through an array": ["", "Each time the `printf` is called, the next array element is printed. When", "the print hits the last array element it starts from the first element", "again.", "", "```sh", "arr=(a b c d)", "", "cycle() {", "    printf '%s ' \"${arr[${i:=0}]}\"", "    ((i=i>=${#arr[@]}-1?0:++i))", "}", "```", "", ""], "Toggle between two values": ["", "This works the same as above, this is just a different use case.", "", "```sh", "arr=(true false)", "", "cycle() {", "    printf '%s ' \"${arr[${i:=0}]}\"", "    ((i=i>=${#arr[@]}-1?0:++i))", "}", "```", "", "", ""]}, "LOOPS": {"Loop over a range of numbers": ["", "Alternative to `seq`.", "", "```shell", "for i in {0..100}; do", "    printf '%s\\n' \"$i\"", "done", "```", ""], "Loop over a variable range of numbers": ["", "Alternative to `seq`.", "", "```shell", "VAR=50", "for ((i=0;i<=VAR;i++)); do", "    printf '%s\\n' \"$i\"", "done", "```", ""], "Loop over an array": ["", "```shell", "arr=(apples oranges tomatoes)", "", "for element in \"${arr[@]}\"; do", "    printf '%s\\n' \"$element\"", "done", "```", ""], "Loop over an array with an index": ["", "```shell", "arr=(apples oranges tomatoes)", "", "for i in \"${!arr[@]}\"; do", "    printf '%s\\n' \"${arr[i]}\"", "done", "", "for ((i=0;i<${#arr[@]};i++)); do", "    printf '%s\\n' \"${arr[i]}\"", "done", "```", ""], "Loop over the contents of a file": ["", "```shell", "while read -r line; do", "    printf '%s\\n' \"$line\"", "done < \"file\"", "```", ""], "Loop over files and directories": ["", "Don\u2019t use `ls`.", "", "```shell", "for file in *; do", "    printf '%s\\n' \"$file\"", "done", "", "for file in ~/Pictures/*.png; do", "    printf '%s\\n' \"$file\"", "done", "", "for dir in ~/Downloads/*/; do", "    printf '%s\\n' \"$dir\"", "done", "", "for file in /path/to/parentdir/{file1,file2,subdir/file3}; do", "    printf '%s\\n' \"$file\"", "done", "", "shopt -s globstar", "for file in ~/Pictures/**/*; do", "    printf '%s\\n' \"$file\"", "done", "shopt -u globstar", "```", "", "", "", "**CAVEAT:** `bash` does not handle binary data properly in versions `< 4.4`.", ""]}, "FILE HANDLING": {"Read a file to a string": ["", "Alternative to the `cat` command.", "", "```shell", "file_data=\"$(<\"file\")\"", "```", ""], "Read a file to an array (*by line*)": ["", "Alternative to the `cat` command.", "", "```shell", "IFS=$'\\n' read -d \"\" -ra file_data < \"file\"", "", "while read -r line; do", "    file_data+=(\"$line\")", "done < \"file\"", "", "mapfile -t file_data < \"file\"", "```", ""], "Get the first N lines of a file": ["", "Alternative to the `head` command.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "head() {", "    # Usage: head \"n\" \"file\"", "    mapfile -tn \"$1\" line < \"$2\"", "    printf '%s\\n' \"${line[@]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ head 2 ~/.bashrc", "PS1='\u279c '", "", "$ head 1 ~/.bashrc", "```", ""], "Get the last N lines of a file": ["", "Alternative to the `tail` command.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "tail() {", "    # Usage: tail \"n\" \"file\"", "    mapfile -tn 0 line < \"$2\"", "    printf '%s\\n' \"${line[@]: -$1}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ tail 2 ~/.bashrc", "", "$ tail 1 ~/.bashrc", "```", ""], "Get the number of lines in a file": ["", "Alternative to `wc -l`.", "", "**Example Function (bash 4):**", "", "```sh", "lines() {", "    # Usage: lines \"file\"", "    mapfile -tn 0 lines < \"$1\"", "    printf '%s\\n' \"${#lines[@]}\"", "}", "```", "", "**Example Function (bash 3):**", "", "This method uses less memory than the `mapfile` method and works in `bash` 3 but it is slower for bigger files.", "", "```sh", "lines_loop() {", "    # Usage: lines_loop \"file\"", "    count=0", "    while IFS= read -r _; do", "        ((count++))", "    done < \"$1\"", "    printf '%s\\n' \"$count\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lines ~/.bashrc", "48", "", "$ lines_loop ~/.bashrc", "48", "```", ""], "Count files or directories in directory": ["", "This works by passing the output of the glob to the function and then counting the number of arguments.", "", "**Example Function:**", "", "```sh", "count() {", "    # Usage: count /path/to/dir/*", "    #        count /path/to/dir/*/", "    printf '%s\\n' \"$#\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ count ~/Downloads/*", "232", "", "$ count ~/Downloads/*/", "45", "", "$ count ~/Pictures/*.jpg", "64", "```", ""], "Create an empty file": ["", "Alternative to `touch`.", "", "```shell", ">file", "", ":>file", "echo -n >file", "printf '' >file", "```", ""], "Extract lines between two markers": ["", "**Example Function:**", "", "```sh", "extract() {", "    # Usage: extract file \"opening marker\" \"closing marker\"", "    while IFS=$'\\n' read -r line; do", "        [[ $extract && $line != \"$3\" ]] &&", "            printf '%s\\n' \"$line\"", "", "        [[ $line == \"$2\" ]] && extract=1", "        [[ $line == \"$3\" ]] && extract=", "    done < \"$1\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ extract ~/projects/pure-bash/README.md '```sh' '```'", "```", "", "", ""]}, "FILE PATHS": {"Get the directory name of a file path": ["", "Alternative to the `dirname` command.", "", "**Example Function:**", "", "```sh", "dirname() {", "    # Usage: dirname \"path\"", "    local tmp=${1:-.}", "", "    [[ $tmp != *[!/]* ]] && {", "        printf '/\\n'", "        return", "    }", "", "    tmp=${tmp%%\"${tmp##*[!/]}\"}", "", "    [[ $tmp != */* ]] && {", "        printf '.\\n'", "        return", "    }", "", "    tmp=${tmp%/*}", "    tmp=${tmp%%\"${tmp##*[!/]}\"}", "", "    printf '%s\\n' \"${tmp:-/}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ dirname ~/Pictures/Wallpapers/1.jpg", "/home/black/Pictures/Wallpapers", "", "$ dirname ~/Pictures/Downloads/", "/home/black/Pictures", "```", ""], "Get the base-name of a file path": ["", "Alternative to the `basename` command.", "", "**Example Function:**", "", "```sh", "basename() {", "    # Usage: basename \"path\" [\"suffix\"]", "    local tmp", "", "    tmp=${1%\"${1##*[!/]}\"}", "    tmp=${tmp##*/}", "    tmp=${tmp%\"${2/\"$tmp\"}\"}", "", "    printf '%s\\n' \"${tmp:-/}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ basename ~/Pictures/Wallpapers/1.jpg", "1.jpg", "", "$ basename ~/Pictures/Wallpapers/1.jpg .jpg", "1", "", "$ basename ~/Pictures/Downloads/", "Downloads", "```", "", "", ""]}, "VARIABLES": {"Assign and access a variable using a variable": ["", "```shell", "$ hello_world=\"value\"", "", "$ var=\"world\"", "$ ref=\"hello_$var\"", "", "$ printf '%s\\n' \"${!ref}\"", "value", "```", "", "Alternatively, on `bash` 4.3+:", "", "```shell", "$ hello_world=\"value\"", "$ var=\"world\"", "", "$ declare -n ref=hello_$var", "", "$ printf '%s\\n' \"$ref\"", "value", "```", ""], "Name a variable based on another variable": ["", "```shell", "$ var=\"world\"", "$ declare \"hello_$var=value\"", "$ printf '%s\\n' \"$hello_world\"", "value", "```", "", "", "", "Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using `tput` abstracts the same ANSI sequences as if printed manually. Worse still, `tput` is not actually portable. There are a number of `tput` variants each with different commands and syntaxes (*try `tput setaf 3` on a FreeBSD system*). Raw sequences are fine.", ""]}, "ESCAPE SEQUENCES": {"Text Colors": ["", "**NOTE:** Sequences requiring RGB values only work in True-Color Terminal Emulators.", "", "| Sequence | What does it do? | Value |", "| -------- | ---------------- | ----- |", "| `\\e[38;5;<NUM>m` | Set text foreground color. | `0-255`", "| `\\e[48;5;<NUM>m` | Set text background color. | `0-255`", "| `\\e[38;2;<R>;<G>;<B>m` | Set text foreground color to RGB color. | `R`, `G`, `B`", "| `\\e[48;2;<R>;<G>;<B>m` | Set text background color to RGB color. | `R`, `G`, `B`", ""], "Text Attributes": ["", "**NOTE:** Prepend 2 to any code below to turn it's effect off", "(examples: 21=bold text off, 22=faint text off, 23=italic text off).", "", "| Sequence | What does it do? |", "| -------- | ---------------- |", "| `\\e[m` | Reset text formatting and colors. |", "| `\\e[1m` | Bold text. |", "| `\\e[2m` | Faint text. |", "| `\\e[3m` | Italic text. |", "| `\\e[4m` | Underline text. |", "| `\\e[5m` | Blinking text. |", "| `\\e[7m` | Highlighted text. |", "| `\\e[8m` | Hidden text. |", "| `\\e[9m` | Strike-through text. |", "", ""], "Cursor Movement": ["", "| Sequence | What does it do? | Value |", "| -------- | ---------------- | ----- |", "| `\\e[<LINE>;<COLUMN>H` | Move cursor to absolute position. | `line`, `column`", "| `\\e[H` | Move cursor to home position (`0,0`). |", "| `\\e[<NUM>A` | Move cursor up N lines. | `num`", "| `\\e[<NUM>B` | Move cursor down N lines. | `num`", "| `\\e[<NUM>C` | Move cursor right N columns. | `num`", "| `\\e[<NUM>D` | Move cursor left N columns. | `num`", "| `\\e[s` | Save cursor position. |", "| `\\e[u` | Restore cursor position. |", "", ""], "Erasing Text": ["", "| Sequence | What does it do? |", "| -------- | ---------------- |", "| `\\e[K` | Erase from cursor position to end of line.", "| `\\e[1K` | Erase from cursor position to start of line.", "| `\\e[2K` | Erase the entire current line.", "| `\\e[J` | Erase from the current line to the bottom of the screen.", "| `\\e[1J` | Erase from the current line to the top of the screen.", "| `\\e[2J` | Clear the screen.", "| `\\e[2J\\e[H` | Clear the screen and move cursor to `0,0`.", "", "", "", ""]}, "PARAMETER EXPANSION": {"Indirection": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${!VAR}` | Access a variable based on the value of `VAR`.", "| `${!VAR*}` | Expand to `IFS` separated list of variable names starting with `VAR`. |", "| `${!VAR@}` | Expand to `IFS` separated list of variable names starting with `VAR`. If double-quoted, each variable name expands to a separate word. |", "", ""], "Replacement": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR#PATTERN}` | Remove shortest match of pattern from start of string. |", "| `${VAR##PATTERN}` | Remove longest match of pattern from start of string. |", "| `${VAR%PATTERN}` | Remove shortest match of pattern from end of string. |", "| `${VAR%%PATTERN}` | Remove longest match of pattern from end of string. |", "| `${VAR/PATTERN/REPLACE}` | Replace first match with string.", "| `${VAR//PATTERN/REPLACE}` | Replace all matches with string.", "| `${VAR/PATTERN}` | Remove first match.", "| `${VAR//PATTERN}` | Remove all matches.", ""], "Length": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${#VAR}` | Length of var in characters.", "| `${#ARR[@]}` | Length of array in elements.", ""], "Expansion": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR:OFFSET}` | Remove first `N` chars from variable.", "| `${VAR:OFFSET:LENGTH}` | Get substring from `N` character to `N` character. <br> (`${VAR:10:10}`: Get sub-string from char `10` to char `20`)", "| `${VAR:: OFFSET}` | Get first `N` chars from variable.", "| `${VAR:: -OFFSET}` | Remove last `N` chars from variable.", "| `${VAR: -OFFSET}` | Get last `N` chars from variable.", "| `${VAR:OFFSET:-OFFSET}` | Cut first `N` chars and last `N` chars. | `bash 4.2+` |", ""], "Case Modification": ["", "| Parameter | What does it do? | CAVEAT |", "| --------- | ---------------- | ------ |", "| `${VAR^}` | Uppercase first character. | `bash 4+` |", "| `${VAR^^}` | Uppercase all characters. | `bash 4+` |", "| `${VAR,}` | Lowercase first character. | `bash 4+` |", "| `${VAR,,}` | Lowercase all characters. | `bash 4+` |", "| `${VAR~}` | Reverse case of first character. | `bash 4+` |", "| `${VAR~~}` | Reverse case of all characters. | `bash 4+` |", "", ""], "Default Value": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR:-STRING}` | If `VAR` is empty or unset, use `STRING` as its value.", "| `${VAR-STRING}` | If `VAR` is unset, use `STRING` as its value.", "| `${VAR:=STRING}` | If `VAR` is empty or unset, set the value of `VAR` to `STRING`.", "| `${VAR=STRING}` | If `VAR` is unset, set the value of `VAR` to `STRING`.", "| `${VAR:+STRING}` | If `VAR` is not empty, use `STRING` as its value.", "| `${VAR+STRING}` | If `VAR` is set, use `STRING` as its value.", "| `${VAR:?STRING}` | Display an error if empty or unset.", "| `${VAR?STRING}` | Display an error if unset.", "", "", "", ""]}, "BRACE EXPANSION": {"Ranges": ["", "```shell", "", "echo {1..100}", "", "echo 1.{1..9}", "", "echo {a..z}", "echo {A..Z}", "", "echo {A..Z}{0..9}", "", "echo {01..100}", "", "echo {1..10..2} # Increment by 2.", "```", ""], "String Lists": ["", "```shell", "echo {apples,oranges,pears,grapes}", "", "rm -rf ~/Downloads/{Movies,Music,ISOS}", "```", "", "", "", "", ""]}, "CONDITIONAL EXPRESSIONS": {"File Conditionals": ["", "| Expression | Value  | What does it do? |", "| ---------- | ------ | ---------------- |", "| `-a`       | `file` | If file exists.", "| `-b`       | `file` | If file exists and is a block special file.", "| `-c`       | `file` | If file exists and is a character special file.", "| `-d`       | `file` | If file exists and is a directory.", "| `-e`       | `file` | If file exists.", "| `-f`       | `file` | If file exists and is a regular file.", "| `-g`       | `file` | If file exists and its set-group-id bit is set.", "| `-h`       | `file` | If file exists and is a symbolic link.", "| `-k`       | `file` | If file exists and its sticky-bit is set", "| `-p`       | `file` | If file exists and is a named pipe (*FIFO*).", "| `-r`       | `file` | If file exists and is readable.", "| `-s`       | `file` | If file exists and its size is greater than zero.", "| `-t`       | `fd`   | If file descriptor is open and refers to a terminal.", "| `-u`       | `file` | If file exists and its set-user-id bit is set.", "| `-w`       | `file` | If file exists and is writable.", "| `-x`       | `file` | If file exists and is executable.", "| `-G`       | `file` | If file exists and is owned by the effective group ID.", "| `-L`       | `file` | If file exists and is a symbolic link.", "| `-N`       | `file` | If file exists and has been modified since last read.", "| `-O`       | `file` | If file exists and is owned by the effective user ID.", "| `-S`       | `file` | If file exists and is a socket.", ""], "File Comparisons": ["", "| Expression | What does it do? |", "| ---------- | ---------------- |", "| `file -ef file2` | If both files refer to the same inode and device numbers.", "| `file -nt file2` | If `file` is newer than `file2` (*uses modification time*) or `file` exists and `file2` does not.", "| `file -ot file2` | If `file` is older than `file2` (*uses modification time*) or `file2` exists and `file` does not.", ""], "Variable Conditionals": ["", "| Expression | Value | What does it do? |", "| ---------- | ----- | ---------------- |", "| `-o`       | `opt` | If shell option is enabled.", "| `-v`       | `var` | If variable has a value assigned.", "| `-R`       | `var` | If variable is a name reference.", "| `-z`       | `var` | If the length of string is zero.", "| `-n`       | `var` | If the length of string is non-zero.", ""], "Variable Comparisons": ["", "| Expression | What does it do? |", "| ---------- | ---------------- |", "| `var = var2` | Equal to.", "| `var == var2` | Equal to (*synonym for `=`*).", "| `var != var2` | Not equal to.", "| `var < var2` | Less than (*in ASCII alphabetical order.*)", "| `var > var2` | Greater than (*in ASCII alphabetical order.*)", "", "", "", ""]}, "ARITHMETIC OPERATORS": {"Assignment": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `=`       | Initialize or change the value of a variable.", ""], "Arithmetic": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `+` | Addition", "| `-` | Subtraction", "| `*` | Multiplication", "| `/` | Division", "| `**` | Exponentiation", "| `%` | Modulo", "| `+=` | Plus-Equal (*Increment a variable.*)", "| `-=` | Minus-Equal (*Decrement a variable.*)", "| `*=` | Times-Equal (*Multiply a variable.*)", "| `/=` | Slash-Equal (*Divide a variable.*)", "| `%=` | Mod-Equal (*Remainder of dividing a variable.*)", ""], "Bitwise": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `<<` | Bitwise Left Shift", "| `<<=` | Left-Shift-Equal", "| `>>` | Bitwise Right Shift", "| `>>=` | Right-Shift-Equal", "| `&` | Bitwise AND", "| `&=` | Bitwise AND-Equal", "| `\\|` | Bitwise OR", "| `\\|=` | Bitwise OR-Equal", "| `~` | Bitwise NOT", "| `^` | Bitwise XOR", "| `^=` | Bitwise XOR-Equal", ""], "Logical": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `!` | NOT", "| `&&` | AND", "| `\\|\\|` | OR", ""], "Miscellaneous": ["", "| Operators | What does it do? | Example |", "| --------- | ---------------- | ------- |", "| `,` | Comma Separator | `((a=1,b=2,c=3))`", "", "", "", ""]}, "ARITHMETIC": {"Simpler syntax to set variables": ["", "```shell", "((var=1+2))", "", "((var++))", "((var--))", "((var+=1))", "((var-=1))", "", "((var=var2*arr[2]))", "```", ""], "Ternary Tests": ["", "```shell", "((var=var2>var?var2:var))", "```", "", "", "", "Traps allow a script to execute code on various signals. In [pxltrm](https://github.com/dylanaraps/pxltrm) (*a pixel art editor written in bash*)  traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.", "", "Traps should be added near the start of scripts so any early errors are also caught.", "", "**NOTE:** For a full list of signals, see `trap -l`.", "", ""]}, "TRAPS": {"Do something on script exit": ["", "```shell", "trap 'printf \\\\e[2J\\\\e[H\\\\e[m' EXIT", "```", ""], "Ignore terminal interrupt (CTRL+C, SIGINT)": ["", "```shell", "trap '' INT", "```", ""], "React to window resize": ["", "```shell", "trap 'code_here' SIGWINCH", "```", ""], "Do something before every command": ["", "```shell", "trap 'code_here' DEBUG", "```", ""], "Do something when a shell function or a sourced file finishes executing": ["", "```shell", "trap 'code_here' RETURN", "```", "", "", ""]}, "PERFORMANCE": {"Disable Unicode": ["", "If unicode is not required, it can be disabled for a performance increase. Results may vary however there have been noticeable improvements in [neofetch](https://github.com/dylanaraps/neofetch) and other programs.", "", "```shell", "LC_ALL=C", "LANG=C", "```", "", "", ""]}, "OBSOLETE SYNTAX": {"Shebang": ["", "Use `#!/usr/bin/env bash` instead of `#!/bin/bash`.", "", "- The former searches the user's `PATH` to find the `bash` binary.", "- The latter assumes it is always installed to `/bin/` which can cause issues.", "", "**NOTE**: There are times when one may have a good reason for using `#!/bin/bash` or another direct path to the binary.", "", "", "```shell", "", "    #!/usr/bin/env bash", "", "", "    #!/bin/bash", "```", ""], "Command Substitution": ["", "Use `$()` instead of `` ` ` ``.", "", "```shell", "var=\"$(command)\"", "", "var=`command`", "", "var=\"$(command \"$(command)\")\"", "```", ""], "Function Declaration": ["", "Do not use the `function` keyword, it reduces compatibility with older versions of `bash`.", "", "```shell", "do_something() {", "    # ...", "}", "", "function do_something() {", "    # ...", "}", "```", "", "", ""]}, "INTERNAL VARIABLES": {"Get the location to the `bash` binary": ["", "```shell", "\"$BASH\"", "```", ""], "Get the version of the current running `bash` process": ["", "```shell", "\"$BASH_VERSION\"", "", "\"${BASH_VERSINFO[@]}\"", "```", ""], "Open the user's preferred text editor": ["", "```shell", "\"$EDITOR\" \"$file\"", "", "\"${EDITOR:-vi}\" \"$file\"", "```", ""], "Get the name of the current function": ["", "```shell", "\"${FUNCNAME[0]}\"", "", "\"${FUNCNAME[1]}\"", "", "\"${FUNCNAME[2]}\"", "\"${FUNCNAME[3]}\"", "", "\"${FUNCNAME[@]}\"", "```", ""], "Get the host-name of the system": ["", "```shell", "\"$HOSTNAME\"", "", "\"${HOSTNAME:-$(hostname)}\"", "```", ""], "Get the architecture of the Operating System": ["", "```shell", "\"$HOSTTYPE\"", "```", ""], "Get the name of the Operating System / Kernel": ["", "This can be used to add conditional support for different Operating", "Systems without needing to call `uname`.", "", "```shell", "\"$OSTYPE\"", "```", ""], "Get the current working directory": ["", "This is an alternative to the `pwd` built-in.", "", "```shell", "\"$PWD\"", "```", ""], "Get the number of seconds the script has been running": ["", "```shell", "\"$SECONDS\"", "```", ""], "Get a pseudorandom integer": ["", "Each time `$RANDOM` is used, a different integer between `0` and `32767` is returned. This variable should not be used for anything related to security (*this includes encryption keys etc*).", "", "", "```shell", "\"$RANDOM\"", "```", "", "", ""]}, "INFORMATION ABOUT THE TERMINAL": {"Get the terminal size in lines and columns (*from a script*)": ["", "This is handy when writing scripts in pure bash and `stty`/`tput` can\u2019t be", "called.", "", "**Example Function:**", "", "```sh", "get_term_size() {", "    # Usage: get_term_size", "", "    # (:;:) is a micro sleep to ensure the variables are", "    # exported immediately.", "    shopt -s checkwinsize; (:;:)", "    printf '%s\\n' \"$LINES $COLUMNS\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ get_term_size", "15 55", "```", ""], "Get the terminal size in pixels": ["", "**CAVEAT**: This does not work in some terminal emulators.", "", "**Example Function:**", "", "```sh", "get_window_size() {", "    # Usage: get_window_size", "    printf '%b' \"${TMUX:+\\\\ePtmux;\\\\e}\\\\e[14t${TMUX:+\\\\e\\\\\\\\}\"", "    IFS=';t' read -d t -t 0.05 -sra term_size", "    printf '%s\\n' \"${term_size[1]}x${term_size[2]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ get_window_size", "1200x800", "", "$ get_window_size", "x", "```", ""], "Get the current cursor position": ["", "This is useful when creating a TUI in pure bash.", "", "**Example Function:**", "", "```sh", "get_cursor_pos() {", "    # Usage: get_cursor_pos", "    IFS='[;' read -p $'\\e[6n' -d R -rs _ y x _", "    printf '%s\\n' \"$x $y\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ get_cursor_pos", "1 8", "```", "", "", ""]}, "CONVERSION": {"Convert a hex color to RGB": ["", "**Example Function:**", "", "```sh", "hex_to_rgb() {", "    # Usage: hex_to_rgb \"#FFFFFF\"", "    #        hex_to_rgb \"000000\"", "    : \"${1/\\#}\"", "    ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))", "    printf '%s\\n' \"$r $g $b\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ hex_to_rgb \"#FFFFFF\"", "255 255 255", "```", "", ""], "Convert an RGB color to hex": ["", "**Example Function:**", "", "```sh", "rgb_to_hex() {", "    # Usage: rgb_to_hex \"r\" \"g\" \"b\"", "    printf '#%02x%02x%02x\\n' \"$1\" \"$2\" \"$3\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ rgb_to_hex \"255\" \"255\" \"255\"", "#FFFFFF", "```", "", "", ""]}, "CODE GOLF": {"Shorter `for` loop syntax": ["", "```shell", "for((;i++<10;)){ echo \"$i\";}", "", "for i in {1..10};{ echo \"$i\";}", "", "for i in {1..10}; do echo \"$i\"; done", "", "for((i=0;i<=10;i++)); do echo \"$i\"; done", "```", ""], "Shorter infinite loops": ["", "```shell", "while :; do echo hi; done", "", "for((;;)){ echo hi;}", "```", ""], "Shorter function declaration": ["", "```shell", "f(){ echo hi;}", "", "f()(echo hi)", "", "f()(($1))", "", "f()if true; then echo \"$1\"; fi", "f()for i in \"$@\"; do echo \"$i\"; done", "```", ""], "Shorter `if` syntax": ["", "```shell", "[[ $var == hello ]] && echo hi || echo bye", "[[ $var == hello ]] && { echo hi; echo there; } || echo bye", "", "[[ $var == hello ]] &&", "    echo hi", "", "[[ $var == hello ]] && {", "    echo hi", "    # ...", "}", "```", ""], "Simpler `case` statement to set variable": ["", "The `:` built-in can be used to avoid repeating `variable=` in a case statement. The `$_` variable stores the last argument of the last command. `:` always succeeds so it can be used to store the variable value.", "", "```shell", "case \"$OSTYPE\" in", "    \"darwin\"*)", "        : \"MacOS\"", "    ;;", "", "    \"linux\"*)", "        : \"Linux\"", "    ;;", "", "    *\"bsd\"* | \"dragonfly\" | \"bitrig\")", "        : \"BSD\"", "    ;;", "", "    \"cygwin\" | \"msys\" | \"win32\")", "        : \"Windows\"", "    ;;", "", "    *)", "        printf '%s\\n' \"Unknown OS detected, aborting...\" >&2", "        exit 1", "    ;;", "esac", "", "os=\"$_\"", "```", "", "", ""]}, "OTHER": {"Use `read` as an alternative to the `sleep` command": ["", "Surprisingly, `sleep` is an external command and not a `bash` built-in.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "read_sleep() {", "    # Usage: read_sleep 1", "    #        read_sleep 0.2", "    read -rt \"$1\" <> <(:) || :", "}", "```", "", "**Example Usage:**", "", "```shell", "read_sleep 1", "read_sleep 0.1", "read_sleep 30", "```", "", "For performance-critical situations, where it is not economic to open and close an excessive number of file descriptors, the allocation of a file descriptor may be done only once for all invocations of `read`:", "", "(See the generic original implementation at https://blog.dhampir.no/content/sleeping-without-a-subprocess-in-bash-and-how-to-sleep-forever)", "", "```shell", "exec {sleep_fd}<> <(:)", "while some_quick_test; do", "    # equivalent of sleep 0.001", "    read -t 0.001 -u $sleep_fd", "done", "```", ""], "Check if a program is in the user's PATH": ["", "```shell", "type -p executable_name &>/dev/null", "hash executable_name &>/dev/null", "command -v executable_name &>/dev/null", "", "if type -p executable_name &>/dev/null; then", "    # Program is in PATH.", "fi", "", "if ! type -p executable_name &>/dev/null; then", "    # Program is not in PATH.", "fi", "", "if ! type -p convert &>/dev/null; then", "    printf '%s\\n' \"error: convert is not installed, exiting...\"", "    exit 1", "fi", "```", ""], "Get the current date using `strftime`": ["", "Bash\u2019s `printf` has a built-in method of getting the date which can be used in place of the `date` command.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "date() {", "    # Usage: date \"format\"", "    # See: 'man strftime' for format.", "    printf \"%($1)T\\\\n\" \"-1\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ date \"%a %d %b  - %l:%M %p\"", "Fri 15 Jun  - 10:00 AM", "", "$ printf '%(%a %d %b  - %l:%M %p)T\\n' \"-1\"", "Fri 15 Jun  - 10:00 AM", "", "$ printf -v date '%(%a %d %b  - %l:%M %p)T\\n' '-1'", "$ printf '%s\\n' \"$date\"", "Fri 15 Jun  - 10:00 AM", "```", ""], "Get the username of the current user": ["", "**CAVEAT:** Requires `bash` 4.4+", "", "```shell", "$ : \\\\u", "$ printf '%s\\n' \"${_@P}\"", "black", "```", ""], "Generate a UUID V4": ["", "**CAVEAT**: The generated value is not cryptographically secure.", "", "**Example Function:**", "", "```sh", "uuid() {", "    # Usage: uuid", "    C=\"89ab\"", "", "    for ((N=0;N<16;++N)); do", "        B=\"$((RANDOM%256))\"", "", "        case \"$N\" in", "            6)  printf '4%x' \"$((B%16))\" ;;", "            8)  printf '%c%x' \"${C:$RANDOM%${#C}:1}\" \"$((B%16))\" ;;", "", "            3|5|7|9)", "                printf '%02x-' \"$B\"", "            ;;", "", "            *)", "                printf '%02x' \"$B\"", "            ;;", "        esac", "    done", "", "    printf '\\n'", "}", "```", "", "**Example Usage:**", "", "```shell", "$ uuid", "d5b6c731-1310-4c24-9fe3-55d556d44374", "```", ""], "Progress bars": ["", "This is a simple way of drawing progress bars without needing a for loop", "in the function itself.", "", "**Example Function:**", "", "```sh", "bar() {", "    # Usage: bar 1 10", "    #            ^----- Elapsed Percentage (0-100).", "    #               ^-- Total length in chars.", "    ((elapsed=$1*$2/100))", "", "    # Create the bar with spaces.", "    printf -v prog  \"%${elapsed}s\"", "    printf -v total \"%$(($2-elapsed))s\"", "", "    printf '%s\\r' \"[${prog// /-}${total}]\"", "}", "```", "", "**Example Usage:**", "", "```shell", "for ((i=0;i<=100;i++)); do", "    # Pure bash micro sleeps (for the example).", "    (:;:) && (:;:) && (:;:) && (:;:) && (:;:)", "", "    # Print the bar.", "    bar \"$i\" \"10\"", "done", "", "printf '\\n'", "```", ""], "Get the list of functions in a script": ["", "```sh", "get_functions() {", "    # Usage: get_functions", "    IFS=$'\\n' read -d \"\" -ra functions < <(declare -F)", "    printf '%s\\n' \"${functions[@]//declare -f }\"", "}", "```", ""], "Bypass shell aliases": ["", "```shell", "ls", "", "\\ls", "```", ""], "Bypass shell functions": ["", "```shell", "ls", "", "command ls", "```", ""], "Run a command in the background": ["", "This will run the given command and keep it running, even after the terminal or SSH connection is terminated. All output is ignored.", "", "```sh", "bkr() {", "    (nohup \"$@\" &>/dev/null &)", "}", "", "bkr ./some_script.sh # some_script.sh is now running in the background", "```", "", ""]}}}, {"name": "Pure sh Bible", "content": {"STRINGS": {"Strip pattern from start of string": ["", "**Example Function:**", "", "```sh", "lstrip() {", "    # Usage: lstrip \"string\" \"pattern\"", "    printf '%s\\n' \"${1##$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lstrip \"The Quick Brown Fox\" \"The \"", "Quick Brown Fox", "```", ""], "Strip pattern from end of string": ["", "**Example Function:**", "", "```sh", "rstrip() {", "    # Usage: rstrip \"string\" \"pattern\"", "    printf '%s\\n' \"${1%%$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ rstrip \"The Quick Brown Fox\" \" Fox\"", "The Quick Brown", "```", ""], "Trim leading and trailing white-space from string": ["", "This is an alternative to `sed`, `awk`, `perl` and other tools. The", "function below works by finding all leading and trailing white-space and", "removing it from the start and end of the string.", "", "**Example Function:**", "", "```sh", "trim_string() {", "    # Usage: trim_string \"   example   string    \"", "", "    # Remove all leading white-space.", "    # '${1%%[![:space:]]*}': Strip everything but leading white-space.", "    # '${1#${XXX}}': Remove the white-space from the start of the string.", "    trim=${1#${1%%[![:space:]]*}}", "", "    # Remove all trailing white-space.", "    # '${trim##*[![:space:]]}': Strip everything but trailing white-space.", "    # '${trim#${XXX}}': Remove the white-space from the end of the string.", "    trim=${trim%${trim##*[![:space:]]}}", "", "    printf '%s\\n' \"$trim\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ trim_string \"    Hello,  World    \"", "Hello,  World", "", "$ name=\"   John Black  \"", "$ trim_string \"$name\"", "John Black", "```", ""], "Trim all white-space from string and truncate spaces": ["", "This is an alternative to `sed`, `awk`, `perl` and other tools. The", "function below works by abusing word splitting to create a new string", "without leading/trailing white-space and with truncated spaces.", "", "**Example Function:**", "", "```sh", "trim_all() {", "    # Usage: trim_all \"   example   string    \"", "", "    # Disable globbing to make the word-splitting below safe.", "    set -f", "", "    # Set the argument list to the word-splitted string.", "    # This removes all leading/trailing white-space and reduces", "    # all instances of multiple spaces to a single (\"  \" -> \" \").", "    set -- $*", "", "    # Print the argument list as a string.", "    printf '%s\\n' \"$*\"", "", "    # Re-enable globbing.", "    set +f", "}", "```", "", "**Example Usage:**", "", "```shell", "$ trim_all \"    Hello,    World    \"", "Hello, World", "", "$ name=\"   John   Black  is     my    name.    \"", "$ trim_all \"$name\"", "John Black is my name.", "```", ""], "Check if string contains a sub-string": ["", "**Using a case statement:**", "", "```shell", "case $var in", "    *sub_string1*)", "        # Do stuff", "    ;;", "", "    *sub_string2*)", "        # Do other stuff", "    ;;", "", "    *)", "        # Else", "    ;;", "esac", "```", ""], "Check if string starts with sub-string": ["", "**Using a case statement:**", "", "```shell", "case $var in", "    sub_string1*)", "        # Do stuff", "    ;;", "", "    sub_string2*)", "        # Do other stuff", "    ;;", "", "    *)", "        # Else", "    ;;", "esac", "```", ""], "Check if string ends with sub-string": ["", "**Using a case statement:**", "", "```shell", "case $var in", "    *sub_string1)", "        # Do stuff", "    ;;", "", "    *sub_string2)", "        # Do other stuff", "    ;;", "", "    *)", "        # Else", "    ;;", "esac", "```", ""], "Split a string on a delimiter": ["", "This is an alternative to `cut`, `awk` and other tools.", "", "**Example Function:**", "", "```sh", "split() {", "    # Disable globbing.", "    # This ensures that the word-splitting is safe.", "    set -f", "", "    # Store the current value of 'IFS' so we", "    # can restore it later.", "    old_ifs=$IFS", "", "    # Change the field separator to what we're", "    # splitting on.", "    IFS=$2", "", "    # Create an argument list splitting at each", "    # occurance of '$2'.", "    #", "    # This is safe to disable as it just warns against", "    # word-splitting which is the behavior we expect.", "    # shellcheck disable=2086", "    set -- $1", "", "    # Print each list value on its own line.", "    printf '%s\\n' \"$@\"", "", "    # Restore the value of 'IFS'.", "    IFS=$old_ifs", "", "    # Re-enable globbing.", "    set +f", "}", "```", "", "**Example Usage:**", "", "```shell", "$ split \"apples,oranges,pears,grapes\" \",\"", "apples", "oranges", "pears", "grapes", "", "$ split \"1, 2, 3, 4, 5\" \", \"", "1", "2", "3", "4", "5", "```", ""], "Trim quotes from a string": ["", "**Example Function:**", "", "```sh", "trim_quotes() {", "    # Usage: trim_quotes \"string\"", "", "    # Disable globbing.", "    # This makes the word-splitting below safe.", "    set -f", "", "    # Store the current value of 'IFS' so we", "    # can restore it later.", "    old_ifs=$IFS", "", "    # Set 'IFS' to [\"'].", "    IFS=\\\"\\'", "", "    # Create an argument list, splitting the", "    # string at [\"'].", "    #", "    # Disable this shellcheck error as it only", "    # warns about word-splitting which we expect.", "    # shellcheck disable=2086", "    set -- $1", "", "    # Set 'IFS' to blank to remove spaces left", "    # by the removal of [\"'].", "    IFS=", "", "    # Print the quote-less string.", "    printf '%s\\n' \"$*\"", "", "    # Restore the value of 'IFS'.", "    IFS=$old_ifs", "", "    # Re-enable globbing.", "    set +f", "}", "```", "", "**Example Usage:**", "", "```shell", "$ var=\"'Hello', \\\"World\\\"\"", "$ trim_quotes \"$var\"", "Hello, World", "```", "", ""]}, "FILES": {"Parsing a `key=val` file.": ["", "This could be used to parse a simple `key=value` configuration file.", "", "```shell", "while IFS='=' read -r key val; do", "    # Skip over lines containing comments.", "    # (Lines starting with '#').", "    [ \"${key##\\#*}\" ] || continue", "", "    # '$key' stores the key.", "    # '$val' stores the value.", "    printf '%s: %s\\n' \"$key\" \"$val\"", "", "    # Alternatively replacing 'printf' with the following", "    # populates variables called '$key' with the value of '$val'.", "    #", "    # NOTE: I would extend this with a check to ensure 'key' is", "    #       a valid variable name.", "    # export \"$key=$val\"", "    #", "    # Example with error handling:", "    # export \"$key=$val\" 2>/dev/null ||", "    #     printf 'warning %s is not a valid variable name\\n' \"$key\"", "done < \"file\"", "```", ""], "Get the first N lines of a file": ["", "Alternative to the `head` command.", "", "**Example Function:**", "", "```sh", "head() {", "    # Usage: head \"n\" \"file\"", "    while IFS= read -r line; do", "        printf '%s\\n' \"$line\"", "        i=$((i+1))", "        [ \"$i\" = \"$1\" ] && return", "    done < \"$2\"", "", "    # 'read' used in a loop will skip over", "    # the last line of a file if it does not contain", "    # a newline and instead contains EOF.", "    #", "    # The final line iteration is skipped as 'read'", "    # exits with '1' when it hits EOF. 'read' however,", "    # still populates the variable.", "    #", "    # This ensures that the final line is always printed", "    # if applicable.", "    [ -n \"$line\" ] && printf %s \"$line\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ head 2 ~/.bashrc", "PS1='\u279c '", "", "$ head 1 ~/.bashrc", "```", ""], "Get the number of lines in a file": ["", "Alternative to `wc -l`.", "", "**Example Function:**", "", "```sh", "lines() {", "    # Usage: lines \"file\"", "", "    # '|| [ -n \"$line\" ]': This ensures that lines", "    # ending with EOL instead of a newline are still", "    # operated on in the loop.", "    #", "    # 'read' exits with '1' when it sees EOL and", "    # without the added test, the line isn't sent", "    # to the loop.", "    while IFS= read -r line || [ -n \"$line\" ]; do", "        lines=$((lines+1))", "    done < \"$1\"", "", "    printf '%s\\n' \"$lines\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lines ~/.bashrc", "48", "```", ""], "Count files or directories in directory": ["", "This works by passing the output of the glob to the function and then counting the number of arguments.", "", "**Example Function:**", "", "```sh", "count() {", "    # Usage: count /path/to/dir/*", "    #        count /path/to/dir/*/", "    [ -e \"$1\" ] \\", "        && printf '%s\\n' \"$#\" \\", "        || printf '%s\\n' 0", "}", "```", "", "**Example Usage:**", "", "```shell", "$ count ~/Downloads/*", "232", "", "$ count ~/Downloads/*/", "45", "", "$ count ~/Pictures/*.jpg", "64", "```", ""], "Create an empty file": ["", "Alternative to `touch`.", "", "```shell", ":>file", "", ">file", "```", "", ""]}, "FILE PATHS": {"Get the directory name of a file path": ["", "Alternative to the `dirname` command.", "", "**Example Function:**", "", "```sh", "dirname() {", "    # Usage: dirname \"path\"", "", "    # If '$1' is empty set 'dir' to '.', else '$1'.", "    dir=${1:-.}", "", "    # Strip all trailing forward-slashes '/' from", "    # the end of the string.", "    #", "    # \"${dir##*[!/]}\": Remove all non-forward-slashes", "    # from the start of the string, leaving us with only", "    # the trailing slashes.", "    # \"${dir%%\"${}\"}:  Remove the result of the above", "    # substitution (a string of forward slashes) from the", "    # end of the original string.", "    dir=${dir%%\"${dir##*[!/]}\"}", "", "    # If the variable *does not* contain any forward slashes", "    # set its value to '.'.", "    [ \"${dir##*/*}\" ] && dir=.", "", "    # Remove everything *after* the last forward-slash '/'.", "    dir=${dir%/*}", "", "    # Again, strip all trailing forward-slashes '/' from", "    # the end of the string (see above).", "    dir=${dir%%\"${dir##*[!/]}\"}", "", "    # Print the resulting string and if it is empty,", "    # print '/'.", "    printf '%s\\n' \"${dir:-/}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ dirname ~/Pictures/Wallpapers/1.jpg", "/home/black/Pictures/Wallpapers/", "", "$ dirname ~/Pictures/Downloads/", "/home/black/Pictures/", "```", ""], "Get the base-name of a file path": ["", "Alternative to the `basename` command.", "", "**Example Function:**", "", "```sh", "basename() {", "    # Usage: basename \"path\" [\"suffix\"]", "", "    # Strip all trailing forward-slashes '/' from", "    # the end of the string.", "    #", "    # \"${1##*[!/]}\": Remove all non-forward-slashes", "    # from the start of the string, leaving us with only", "    # the trailing slashes.", "    # \"${1%%\"${}\"}:  Remove the result of the above", "    # substitution (a string of forward slashes) from the", "    # end of the original string.", "    dir=${1%${1##*[!/]}}", "", "    # Remove everything before the final forward-slash '/'.", "    dir=${dir##*/}", "", "    # If a suffix was passed to the function, remove it from", "    # the end of the resulting string.", "    dir=${dir%\"$2\"}", "", "    # Print the resulting string and if it is empty,", "    # print '/'.", "    printf '%s\\n' \"${dir:-/}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ basename ~/Pictures/Wallpapers/1.jpg", "1.jpg", "", "$ basename ~/Pictures/Wallpapers/1.jpg .jpg", "1", "", "$ basename ~/Pictures/Downloads/", "Downloads", "```", "", ""]}, "LOOPS": {"Loop over a (*small*) range of numbers": ["", "Alternative to `seq` and only suitable for small and static number ranges. The number list can also be replaced with a list of words, variables etc.", "", "```shell", "for i in 0 1 2 3 4 5 6 7 8 9 10; do", "    printf '%s\\n' \"$i\"", "done", "```", ""], "Loop over a variable range of numbers": ["", "Alternative to `seq`.", "", "```shell", "start=0", "end=50", "", "while [ \"$start\" -le \"$end\" ]; do", "    printf '%s\\n' \"$start\"", "    start=$((start+1))", "done", "```", ""], "Loop over the contents of a file": ["", "```shell", "while IFS= read -r line || [ -n \"$line\" ]; do", "    printf '%s\\n' \"$line\"", "done < \"file\"", "```", ""], "Loop over files and directories": ["", "Don\u2019t use `ls`.", "", "**CAVEAT:** When the glob does not match anything (empty directory or no matching files) the variable will contain the unexpanded glob. To avoid working on unexpanded globs check the existence of the file contained in the variable using the appropriate [file conditional](#file-conditionals). Be aware that symbolic links are resolved.", "", "```shell", "for file in *; do", "    [ -e \"$file\" ] || [ -L \"$file\" ] || continue", "    printf '%s\\n' \"$file\"", "done", "", "for file in ~/Pictures/*.png; do", "    [ -f \"$file\" ] || continue", "    printf '%s\\n' \"$file\"", "done", "", "for dir in ~/Downloads/*/; do", "    [ -d \"$dir\" ] || continue", "    printf '%s\\n' \"$dir\"", "done", "```", "", ""]}, "VARIABLES": {"Name a variable based on another variable": ["", "```shell", "$ var=\"world\"", "$ export \"hello_$var=value\"", "$ printf '%s\\n' \"$hello_world\"", "value", "```", "", "", "Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using `tput` abstracts the same ANSI sequences as if printed manually. Worse still, `tput` is not actually portable. There are a number of `tput` variants each with different commands and syntaxes (*try `tput setaf 3` on a FreeBSD system*). Raw sequences are fine.", ""]}, "ESCAPE SEQUENCES": {"Text Colors": ["", "**NOTE:** Sequences requiring RGB values only work in True-Color Terminal Emulators.", "", "| Sequence | What does it do? | Value |", "| -------- | ---------------- | ----- |", "| `\\033[38;5;<NUM>m` | Set text foreground color. | `0-255`", "| `\\033[48;5;<NUM>m` | Set text background color. | `0-255`", "| `\\033[38;2;<R>;<G>;<B>m` | Set text foreground color to RGB color. | `R`, `G`, `B`", "| `\\033[48;2;<R>;<G>;<B>m` | Set text background color to RGB color. | `R`, `G`, `B`", ""], "Text Attributes": ["", "| Sequence | What does it do? |", "| -------- | ---------------- |", "| `\\033[m`  | Reset text formatting and colors.", "| `\\033[1m` | Bold text. |", "| `\\033[2m` | Faint text. |", "| `\\033[3m` | Italic text. |", "| `\\033[4m` | Underline text. |", "| `\\033[5m` | Slow blink. |", "| `\\033[7m` | Swap foreground and background colors. |", "| `\\033[8m` | Hidden text. |", "| `\\033[9m` | Strike-through text. |", "", ""], "Cursor Movement": ["", "| Sequence | What does it do? | Value |", "| -------- | ---------------- | ----- |", "| `\\033[<LINE>;<COLUMN>H` | Move cursor to absolute position. | `line`, `column`", "| `\\033[H` | Move cursor to home position (`0,0`). |", "| `\\033[<NUM>A` | Move cursor up N lines. | `num`", "| `\\033[<NUM>B` | Move cursor down N lines. | `num`", "| `\\033[<NUM>C` | Move cursor right N columns. | `num`", "| `\\033[<NUM>D` | Move cursor left N columns. | `num`", "| `\\033[s` | Save cursor position. |", "| `\\033[u` | Restore cursor position. |", "", ""], "Erasing Text": ["", "| Sequence | What does it do? |", "| -------- | ---------------- |", "| `\\033[K` | Erase from cursor position to end of line.", "| `\\033[1K` | Erase from cursor position to start of line.", "| `\\033[2K` | Erase the entire current line.", "| `\\033[J` | Erase from the current line to the bottom of the screen.", "| `\\033[1J` | Erase from the current line to the top of the screen.", "| `\\033[2J` | Clear the screen.", "| `\\033[2J\\033[H` | Clear the screen and move cursor to `0,0`.", "", "", ""]}, "PARAMETER EXPANSION": {"Replacement": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR#PATTERN}` | Remove shortest match of pattern from start of string. |", "| `${VAR##PATTERN}` | Remove longest match of pattern from start of string. |", "| `${VAR%PATTERN}` | Remove shortest match of pattern from end of string. |", "| `${VAR%%PATTERN}` | Remove longest match of pattern from end of string. |", ""], "Length": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${#VAR}` | Length of var in characters.", ""], "Default Value": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR:-STRING}` | If `VAR` is empty or unset, use `STRING` as its value.", "| `${VAR-STRING}` | If `VAR` is unset, use `STRING` as its value.", "| `${VAR:=STRING}` | If `VAR` is empty or unset, set the value of `VAR` to `STRING`.", "| `${VAR=STRING}` | If `VAR` is unset, set the value of `VAR` to `STRING`.", "| `${VAR:+STRING}` | If `VAR` is not empty, use `STRING` as its value.", "| `${VAR+STRING}` | If `VAR` is set, use `STRING` as its value.", "| `${VAR:?STRING}` | Display an error if empty or unset.", "| `${VAR?STRING}` | Display an error if unset.", "", "", "", "For use in `[ ]` `if [ ]; then` and `test`.", ""]}, "CONDITIONAL EXPRESSIONS": {"File Conditionals": ["", "| Expression | Value  | What does it do? |", "| ---------- | ------ | ---------------- |", "| `-b`       | `file` | If file exists and is a block special file.", "| `-c`       | `file` | If file exists and is a character special file.", "| `-d`       | `file` | If file exists and is a directory.", "| `-e`       | `file` | If file exists.", "| `-f`       | `file` | If file exists and is a regular file.", "| `-g`       | `file` | If file exists and its set-group-id bit is set.", "| `-h`       | `file` | If file exists and is a symbolic link.", "| `-p`       | `file` | If file exists and is a named pipe (*FIFO*).", "| `-r`       | `file` | If file exists and is readable.", "| `-s`       | `file` | If file exists and its size is greater than zero.", "| `-t`       | `fd`   | If file descriptor is open and refers to a terminal.", "| `-u`       | `file` | If file exists and its set-user-id bit is set.", "| `-w`       | `file` | If file exists and is writable.", "| `-x`       | `file` | If file exists and is executable.", "| `-L`       | `file` | If file exists and is a symbolic link.", "| `-S`       | `file` | If file exists and is a socket.", ""], "Variable Conditionals": ["", "| Expression | Value | What does it do? |", "| ---------- | ----- | ---------------- |", "| `-z`       | `var` | If the length of string is zero.", "| `-n`       | `var` | If the length of string is non-zero.", ""], "Variable Comparisons": ["", "| Expression | What does it do? |", "| ---------- | ---------------- |", "| `var = var2` | Equal to.", "| `var != var2` | Not equal to.", "| `var -eq var2` | Equal to (*algebraically*).", "| `var -ne var2` | Not equal to (*algebraically*).", "| `var -gt var2` | Greater than (*algebraically*).", "| `var -ge var2` | Greater than or equal to (*algebraically*).", "| `var -lt var2` | Less than (*algebraically*).", "| `var -le var2` | Less than or equal to (*algebraically*).", "", "", ""]}, "ARITHMETIC OPERATORS": {"Assignment": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `=`       | Initialize or change the value of a variable.", ""], "Arithmetic": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `+` | Addition", "| `-` | Subtraction", "| `*` | Multiplication", "| `/` | Division", "| `%` | Modulo", "| `+=` | Plus-Equal (*Increment a variable.*)", "| `-=` | Minus-Equal (*Decrement a variable.*)", "| `*=` | Times-Equal (*Multiply a variable.*)", "| `/=` | Slash-Equal (*Divide a variable.*)", "| `%=` | Mod-Equal (*Remainder of dividing a variable.*)", ""], "Bitwise": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `<<` | Bitwise Left Shift", "| `<<=` | Left-Shift-Equal", "| `>>` | Bitwise Right Shift", "| `>>=` | Right-Shift-Equal", "| `&` | Bitwise AND", "| `&=` | Bitwise AND-Equal", "| `\\|` | Bitwise OR", "| `\\|=` | Bitwise OR-Equal", "| `~` | Bitwise NOT", "| `^` | Bitwise XOR", "| `^=` | Bitwise XOR-Equal", ""], "Logical": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `!` | NOT", "| `&&` | AND", "| `\\|\\|` | OR", ""], "Miscellaneous": ["", "| Operators | What does it do? | Example |", "| --------- | ---------------- | ------- |", "| `,` | Comma Separator | `((a=1,b=2,c=3))`", "", "", ""]}, "ARITHMETIC": {"Ternary Tests": ["", "```shell", "var=$((var2 > var ? var2 : var))", "```", ""], "Check if a number is a float": ["", "**Example Function:**", "", "```sh", "is_float() {", "    # Usage: is_float \"number\"", "", "    # The test checks to see that the input contains", "    # a '.'. This filters out whole numbers.", "    [ -z \"${1##*.*}\" ] &&", "        printf %f \"$1\" >/dev/null 2>&1", "}", "```", "", "**Example Usage:**", "", "```shell", "$ is_float 1 && echo true", "$", "", "$ is_float 1.1 && echo true", "$ true", "```", ""], "Check if a number is an integer": ["", "**Example Function:**", "", "```sh", "is_int() {", "    # usage: is_int \"number\"", "    printf %d \"$1\" >/dev/null 2>&1", "}", "```", "", "**Example Usage:**", "", "```shell", "$ is_int 1 && echo true", "$ true", "", "$ is_int 1.1 && echo true", "$", "```", "", "", "Traps allow a script to execute code on various signals. In [pxltrm](https://github.com/dylanaraps/pxltrm) (*a pixel art editor written in bash*)  traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.", "", "Traps should be added near the start of scripts so any early errors are also caught.", ""]}, "TRAPS": {"Do something on script exit": ["", "```shell", "trap 'printf \\\\033[2J\\\\033[H\\\\033[m' EXIT", "", "trap clean_up EXIT", "```", ""], "Ignore terminal interrupt (CTRL+C, SIGINT)": ["", "```shell", "trap '' INT", "```", "", ""]}, "OBSOLETE SYNTAX": {"Command Substitution": ["", "Use `$()` instead of `` ` ` ``.", "", "```shell", "var=\"$(command)\"", "", "var=`command`", "", "var=\"$(command \"$(command)\")\"", "```", "", ""]}, "INTERNAL AND ENVIRONMENT VARIABLES": {"Open the user's preferred text editor": ["", "```shell", "\"$EDITOR\" \"$file\"", "", "\"${EDITOR:-vi}\" \"$file\"", "```", ""], "Get the current working directory": ["", "This is an alternative to the `pwd` built-in.", "", "```shell", "\"$PWD\"", "```", ""], "Get the PID of the current shell": ["", "```", "\"$$\"", "```", ""], "Get the current shell options": ["", "```", "\"$-\"", "```", ""]}}}, {"name": "Writing a TUI in Bash", "content": {"Operating Systems": {"Identify the Operating System.": ["", "The quickest way to determine the current Operating System is the `$OSTYPE` variable. This variable is set at compile time in `bash` and typically stores the name of the running kernel or the name of the OS itself.", "", "You can also use the command `uname` to identify which OS is running. The `uname` command is POSIX and should be available everywhere. The output from `uname` does differ from `$OSTYPE` but there's a vast amount of documented information about it. [\\[1\\]](https://github.com/dylanaraps/neofetch/blob/415ef5d4aeb1cced7afcf9fd1223dd09c3306b9c/neofetch#L814-L845) [\\[2\\]](https://en.wikipedia.org/wiki/Uname)", "", "```sh", "get_os() {", "    # Figure out the current operating system to handle some", "    # OS specific behavior.", "    # '$OSTYPE' typically stores the name of the OS kernel.", "    case \"$OSTYPE\" in", "        linux*)", "            # ...", "        ;;", "", "        # Mac OS X / macOS.", "        darwin*)", "            # ...", "        ;;", "", "        openbsd*)", "            # ...", "        ;;", "", "        # Everything else.", "        *)", "            #...", "        ;;", "    esac", "}", "```", ""], "Documented `$OSTYPE` values.": ["", "The table below was populated by users submitting the value of the `$OSTYPE` variable using the following command. If you're running an OS not mentioned below or the output differs, please open an issue with the correct value.", "", "```sh", "bash -c \"echo $OSTYPE\"", "```", "", "| OS     | `$OSTYPE` |", "| ----- | ---------- |", "| Linux with glibc | `linux-gnu` |", "| Linux with musl | `linux-musl` |", "| Cygwin | `cygwin` |", "| Bash on Windows 10 | `linux-gnu` |", "| Msys | `msys` |", "| Mingw64 | `msys` |", "| Mingw32 | `msys` |", "| OpenBSD | `openbsd*` |", "| FreeBSD | `freebsd*` |", "| NetBSD | `netbsd` |", "| macOS | `darwin*` |", "| iOS | `darwin9` |", "| Solaris | `solaris*` |", "| Android (Termux) | `linux-android` |", "| Android | `linux-gnu` |", "| Haiku | `haiku` |", "", "", ""]}, "Getting the window size.": {"Using cursor position": ["", "This function figures out the terminal window size by moving the cursor to the bottom right corner and then querying the terminal for the cursor's position. As the terminal is made up of cells the bottom right corner is equal to the terminal's size.", "", "```sh", "get_term_size() {", "    # '\\e7':           Save the current cursor position.", "    # '\\e[9999;9999H': Move the cursor to the bottom right corner.", "    # '\\e[6n':         Get the cursor position (window size).", "    # '\\e8':           Restore the cursor to its previous position.", "    IFS='[;' read -sp $'\\e7\\e[9999;9999H\\e[6n\\e8' -d R -rs _ LINES COLUMNS", "}", "```", ""], "Using `checkwinsize`": ["", "**Note**: This only works in `bash 4+`.", "", "When `checkwinsize` is enabled and `bash` receives a command, the `LINES` and `COLUMNS` variables are populated with the terminal window size. The `(:;:)` snippet works as a pseudo command, populating the variables without running anything external.", "", "```sh", "get_term_size() {", "    shopt -s checkwinsize; (:;:)", "}", "```", ""], "Using `stty`": ["", "This function calls `stty size` to query the terminal for its size. The `stty` command is POSIX and should be available everywhere which makes it a viable alternative to the pure `bash` solutions.", "", "```sh", "get_term_size() {", "    # Get terminal size ('stty' is POSIX and always available).", "    # This can't be done reliably across all bash versions in pure bash.", "    read -r LINES COLUMNS < <(stty size)", "}", "```", "", "", "Using `trap` allows us to capture and react to specific signals sent to the running program. In this case we're trapping the `SIGWINCH` signal which is sent to the terminal and the running shell on window resize.", "", "We're reacting to the signal by running the above `get_term_size()` function. The variables `$LINES` and `$COLUMNS` will be updated with the new terminal size ready to use elsewhere in the program.", "", "```sh", "# Trap the window resize signal (handle window resize events).", "# See: 'man trap' and 'trap -l'", "trap 'get_term_size' WINCH", "```", "", "", "For the purposes of this resource we won't be using `tput`. The `tput` command has a lot of overhead (`10-15 ms` per invocation) and won't make the program any more portable than sticking to standard **VT100** escape sequences. Using `tput` also adds a dependency on `ncurses` which defeats the whole purpose of doing this in `bash`.", ""]}, "Reacting to window size changes.": {}, "Escape Sequences": {"Hiding and Showing the cursor": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/DECTCEM.html", "", "```sh", "# Hiding the cursor.", "printf '\\e[?25l'", "", "# Showing the cursor.", "printf '\\e[?25h'", "```", ""], "Line wrapping": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/DECAWM.html", "", "```sh", "# Disabling line wrapping.", "printf '\\e[?7l'", "", "# Enabling line wrapping.", "printf '\\e[?7h'", "```", ""], "Moving the cursor to specific coordinates": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/CUP.html", "", "```sh", "# Move the cursor to 0,0.", "printf '\\e[H'", "", "# Move the cursor to line 3, column 10.", "printf '\\e[3;10H'", "", "# Move the cursor to line 5.", "printf '\\e[5H'", "```", ""], "Moving the cursor to the bottom of the terminal.": ["", "See:", "", "- [getting-the-window-size](#getting-the-window-size)", "- https://vt100.net/docs/vt510-rm/CUP.html", "", "```sh", "# Using terminal size, move cursor to bottom.", "printf '\\e[%sH' \"$LINES\"", "```", ""], "Moving the cursor relatively": ["", "When using these escape sequences and the cursor hits the edge of the window it stops.", "", "", "#### Cursor Up", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUU.html", "", "```sh", "# Move the cursor up a line.", "printf '\\e[A'", "", "# Move the cursor up 10 lines.", "printf '\\e[10A'", "```", "", "#### Cursor Down", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUD.html", "", "```sh", "# Move the cursor down a line.", "printf '\\e[B'", "", "# Move the cursor down 10 lines.", "printf '\\e[10B'", "```", "", "#### Cursor Left", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUB.html", "", "```sh", "# Move the cursor back a column.", "printf '\\e[D'", "", "# Move the cursor back 10 columns.", "printf '\\e[10D'", "```", "", "#### Cursor Right", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUF.html", "", "```sh", "# Move the cursor forward a column.", "printf '\\e[C'", "", "# Move the cursor forward 10 columns.", "printf '\\e[10C'", "```", ""], "Clearing the screen": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/ED.html", "- https://vt100.net/docs/vt510-rm/CUP.html", "", "```sh", "# Clear the screen.", "printf '\\e[2J'", "", "# Clear the screen and move cursor to (0,0).", "# This mimics the 'clear' command.", "printf '\\e[2J\\e[H'", "```", ""], "Setting the scroll area.": ["", "This sequence allow you to limit the terminal's vertical scrolling area between two points. This comes in handy when you need to reserve portions of the screen for a top or bottom status-line (*you don't want them to scroll*).", "", "This sequence also has the side-effect of moving the cursor to the top-left of the boundaries. This means you can use it directly after a screen clear instead of `\\e[H` (`\\e[2J\\e[0;10r`).", "", "See:", "", "- https://vt100.net/docs/vt510-rm/DECSTBM.html", "", "```sh", "# Limit scrolling from line 0 to line 10.", "printf '\\e[0;10r'", "", "# Set scrolling margins back to default.", "printf '\\e[;r'", "```", ""], "Saving and Restoring the user's terminal screen.": ["", "This is the only non **VT100** sequences I'll be covering. This sequence allows you to save and restore the user's terminal screen when running your program. When the user exits the program, their command-line will be restored as it was before running the program.", "", "While this sequence is XTerm specific, it is covered by almost all modern terminal emulators and simply ignored in older ones. There is also [DECCRA](https://vt100.net/docs/vt510-rm/DECCRA.html) which may or may not be more widely supported than the XTerm sequence but I haven't done much testing.", "", "```sh", "# Save the user's terminal screen.", "printf '\\e[?1049h'", "", "# Restore the user's terminal screen.", "printf '\\e[?1049l'", "```", ""]}}}, {"name": "Frontend Checklist", "content": {"How to use?": {}, "Head": {"Meta tag": ["", "* [ ] **Doctype:** ![High][high_img] The Doctype is HTML5 and is at the top of all your HTML pages.", "", "```html", "<!doctype html> <!-- HTML5 -->", "```", "", "> * \ud83d\udcd6 [Determining the character encoding - HTML5 W3C](https://www.w3.org/TR/html5/syntax.html#determining-the-character-encoding)", "", "*The next 2 meta tags (Charset and Viewport) need to come first in the head.*", "", "* [ ] **Charset:** ![High][high_img] The charset (UTF-8) is declared correctly.", "", "```html", "<meta charset=\"utf-8\">", "```", "", "* [ ] **Viewport:** ![High][high_img] The viewport is declared correctly.", "", "```html", "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\">", "```", "", "* [ ] **Title:** ![High][high_img] A title is used on all pages (SEO: Google calculates the pixel width of the characters used in the title, and it cuts off between 472 and 482 pixels. The average character limit would be around 55-characters).", "", "```html", "<title>Page Title less than 55 characters</title>", "```", "", "> * \ud83d\udcd6 [Title - HTML - MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title)", "> * \ud83d\udee0 [SERP Snippet Generator](https://www.sistrix.com/serp-snippet-generator/)", "", "* [ ] **Description:** ![High][high_img] A meta description is provided, it is unique and doesn't possess more than 150 characters.", "", "```html", "<meta name=\"description\" content=\"Description of the page less than 150 characters\">", "```", "", "> * \ud83d\udcd6 [Meta Description - HTML - MDN](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#Adding_an_author_and_description)", "", "* [ ] **Favicons:** ![Medium][medium_img] Each favicon has been created and displays correctly. If you have only a `favicon.ico`, put it at the root of your site. Normally you won't need to use any markup. However, it's still good practice to link to it using the example below. Today, **PNG format is recommended** over `.ico` format (dimensions: 32x32px).", "", "```html", "<link rel=\"icon\" type=\"image/x-icon\" href=\"https://example.com/favicon.ico\">", "<link rel=\"icon\" type=\"image/png\" href=\"https://example.com/favicon.png\">", "```", "", "> * \ud83d\udee0 [Favicon Generator](https://www.favicon-generator.org/)", "> * \ud83d\udee0 [RealFaviconGenerator](https://realfavicongenerator.net/)", "> * \ud83d\udcd6 [Favicon Cheat Sheet](https://github.com/audreyr/favicon-cheat-sheet)", "> * \ud83d\udcd6 [Favicons, Touch Icons, Tile Icons, etc. Which Do You Need? - CSS Tricks](https://css-tricks.com/favicon-quiz/)", "> * \ud83d\udcd6 [PNG favicons - caniuse](https://caniuse.com/#feat=link-icon-png)", "", "* [ ] **Apple Web App Meta:** ![Low][low_img] Apple meta-tags are present.", "", "```html", "<link rel=\"apple-touch-icon\" href=\"/custom-icon.png\">", "", "<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">", "", "<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">", "```", "", "> * \ud83d\udcd6 [Configuring Web Applications](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html)", "> * \ud83d\udcd6 [Supported Meta Tags](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html)", "", "- [ ] **Windows Tiles:** ![Low][low_img] Windows tiles are present and linked.", "", "```html", "<meta name=\"msapplication-config\" content=\"browserconfig.xml\" />", "```", "", "Minimum required xml markup for the `browserconfig.xml` file is as follows:", "", "```xml", "<?xml version=\"1.0\" encoding=\"utf-8\"?>", "<browserconfig>", "   <msapplication>", "     <tile>", "        <square70x70logo src=\"small.png\"/>", "        <square150x150logo src=\"medium.png\"/>", "        <wide310x150logo src=\"wide.png\"/>", "        <square310x310logo src=\"large.png\"/>", "     </tile>", "   </msapplication>", "</browserconfig>", "```", "", "> * \ud83d\udcd6 [Browser configuration schema reference](https://msdn.microsoft.com/en-us/library/dn320426(v=vs.85).aspx)", "", "* [ ] **Canonical:** ![Medium][medium_img] Use `rel=\"canonical\"` to avoid duplicate content.", "", "```html", "<link rel=\"canonical\" href=\"http://example.com/2017/09/a-new-article-to-read.html\">", "```", "", "> * \ud83d\udcd6 [Use canonical URLs - Search Console Help - Google Support](https://support.google.com/webmasters/answer/139066?hl=en)", "> * \ud83d\udcd6 [5 common mistakes with rel=canonical - Google Webmaster Blog](https://webmasters.googleblog.com/2013/04/5-common-mistakes-with-relcanonical.html)", ""], "HTML tags": ["", "* [ ] **Language attribute:** ![High][high_img] The `lang` attribute of your website is specified and related to the language of the current page.", "", "```html", "<html lang=\"en\">", "```", "", "* [ ] **Direction attribute:** ![Medium][medium_img] The direction of lecture is specified on the html tag (It can be used on another HTML tag).", "", "```html", "<html dir=\"rtl\">", "```", "", "> * \ud83d\udcd6 [dir - HTML - MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir)", "", "* [ ] **Alternate language:** ![Low][low_img] The language tag of your website is specified and related to the language of the current page.", "", "```html", "<link rel=\"alternate\" href=\"https://es.example.com/\" hreflang=\"es\">", "```", "", "* [ ] **x-default:** ![Low][low_img] The language tag of your website for international landing pages.", "", "```html", "<link rel=\"alternate\" href=\"https://example.com/\" hreflang=\"x-default\" />", "```", "", "> * \ud83d\udcd6 [x-default - Google](https://webmasters.googleblog.com/2013/04/x-default-hreflang-for-international-pages.html)", "", "", "* [ ] **Conditional comments:** ![Low][low_img] Conditional comments are present for IE if needed.", "", "> * \ud83d\udcd6 [About conditional comments (Internet Explorer) - MSDN - Microsoft](https://msdn.microsoft.com/en-us/library/ms537512(v=vs.85).aspx)", "", "* [ ] **RSS feed:** ![Low][low_img] If your project is a blog or has articles, an RSS link was provided.", "", "* [ ] **CSS Critical:** ![Medium][medium_img] The CSS critical (or \"above the fold\") collects all the CSS used to render the visible portion of the page. It is embedded before your principal CSS call and between `<style></style>` in a single line (minified).", "", "> * \ud83d\udee0 [Critical by Addy Osmani on GitHub](https://github.com/addyosmani/critical) automates this.", "", "* [ ] **CSS order:** ![High][high_img] All CSS files are loaded before any JavaScript files in the `<head>`. (Except the case where sometimes JS files are loaded asynchronously on top of your page).", ""], "Social meta": ["", "Visualize and generate automatically our social meta tags with [Meta Tags](https://metatags.io/)", "", "***Facebook OG*** and ***Twitter Cards*** are, for any website, highly recommended. The other social media tags can be considered if you target a particular presence on those and want to ensure the display.", "", "* [ ] **Facebook Open Graph:** ![Low][low_img] All Facebook Open Graph (OG) are tested and no one is missing or with false information. Images need to be at least 600 x 315 pixels, although 1200 x 630 pixels is recommended.", "", "> **Notes:** Using `og:image:width` and `og:image:height` will specify the image dimensions to the crawler so that it can render the image immediately without having to asynchronously download and process it.", "", "```html", "<meta property=\"og:type\" content=\"website\">", "<meta property=\"og:url\" content=\"https://example.com/page.html\">", "<meta property=\"og:title\" content=\"Content Title\">", "<meta property=\"og:image\" content=\"https://example.com/image.jpg\">", "<meta property=\"og:description\" content=\"Description Here\">", "<meta property=\"og:site_name\" content=\"Site Name\">", "<meta property=\"og:locale\" content=\"en_US\">", "<meta property=\"og:image:width\" content=\"1200\">", "<meta property=\"og:image:height\" content=\"630\">", "```", "", "> * \ud83d\udcd6 [A Guide to Sharing for Webmasters](https://developers.facebook.com/docs/sharing/webmasters/)", "> * \ud83d\udcd6 [Best Practices - Sharing](https://developers.facebook.com/docs/sharing/best-practices/)", "> * \ud83d\udee0 Test your page with the [Facebook OG testing](https://developers.facebook.com/tools/debug/)", "", "* [ ] **Twitter Card:** ![Low][low_img]", "", "```html", "<meta name=\"twitter:card\" content=\"summary\">", "<meta name=\"twitter:site\" content=\"@site_account\">", "<meta name=\"twitter:creator\" content=\"@individual_account\">", "<meta name=\"twitter:url\" content=\"https://example.com/page.html\">", "<meta name=\"twitter:title\" content=\"Content Title\">", "<meta name=\"twitter:description\" content=\"Content description less than 200 characters\">", "<meta name=\"twitter:image\" content=\"https://example.com/image.jpg\">", "```", "", "> * \ud83d\udcd6 [Getting started with cards \u2014 Twitter Developers](https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started)", "> * \ud83d\udee0 Test your page with the [Twitter card validator](https://cards-dev.twitter.com/validator)", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", ""]}, "HTML": {"Best practices": ["", "* [ ] **HTML5 Semantic Elements:** ![High][high_img] HTML5 Semantic Elements are used appropriately (header, section, footer, main...).", "", "> * \ud83d\udcd6 [HTML Reference](http://htmlreference.io/)", "", "* [ ] **Error pages:** ![High][high_img] Error 404 page and 5xx exist. Remember that the 5xx error pages need to have their CSS integrated (no external call on the current server).", "", "* [ ] **Noopener:** ![Medium][medium_img] In case you are using external links with `target=\"_blank\"`, your link should have a `rel=\"noopener\"` attribute to prevent tab nabbing. If you need to support older versions of Firefox, use `rel=\"noopener noreferrer\"`.", "", "> * \ud83d\udcd6 [About rel=noopener](https://mathiasbynens.github.io/rel-noopener/)", "", "* [ ] **Clean up comments:** ![Low][low_img] Unnecessary code needs to be removed before sending the page to production.", ""], "HTML testing": ["", "* [ ] **W3C compliant:** ![High][high_img] All pages need to be tested with the W3C validator to identify possible issues in the HTML code.", "", "> * \ud83d\udee0 [W3C validator](https://validator.w3.org/)", "", "* [ ] **HTML Lint:** ![High][high_img] I use tools to help me analyze any issues I could have on my HTML code.", "", "> * \ud83d\udee0 [Dirty markup](https://www.10bestdesign.com/dirtymarkup/)", "", "> * \ud83d\udee0 [webhint](https://webhint.io/)", "", "* [ ] **Link checker:** ![High][high_img] There are no broken links in my page, verify that you don't have any 404 error.", "", "> * \ud83d\udee0 [W3C Link Checker](https://validator.w3.org/checklink)", "", "* [ ] **Adblockers test:** ![Medium][medium_img] Your website shows your content correctly with adblockers enabled (You can provide a message encouraging people to disable their adblocker).", "", "> * \ud83d\udcd6 [Use AdBlocking in your Dev Environment](https://andreicioara.com/use-adblocking-in-your-dev-environment-48db500d9b86)", "", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", "", "> **Notes:** Using web fonts may cause Flash Of Unstyled Text/Flash Of Invisible Text - consider having fallback fonts and/or utilizing web font loaders to control behavior.", "> * \ud83d\udcd6 [Google Technical considerations about webfonts](https://developers.google.com/fonts/docs/technical_considerations)", "", "* [ ] **Webfont format:** ![High][high_img] WOFF, WOFF2 and TTF are supported by all modern browsers.", "", "> * \ud83d\udcd6 [WOFF - Web Open Font Format - Caniuse](https://caniuse.com/#feat=woff).", "> * \ud83d\udcd6 [WOFF 2.0 - Web Open Font Format - Caniuse](https://caniuse.com/#feat=woff2).", "> * \ud83d\udcd6 [TTF/OTF - TrueType and OpenType font support](https://caniuse.com/#feat=ttf)", "> * \ud83d\udcd6 [Using @font-face - CSS-Tricks](https://css-tricks.com/snippets/css/using-font-face/)", "", "* [ ] **Webfont size:** ![High][high_img] Webfont sizes don't exceed 2 MB (all variants included).", "", "* [ ] **Webfont loader:** ![Low][low_img] Control loading behavior with a webfont loader", "", "> * \ud83d\udee0 [Typekit Web Font Loader](https://github.com/typekit/webfontloader)", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", "", "> **Notes:** Take a look at [CSS guidelines](https://cssguidelin.es/) and [Sass Guidelines](https://sass-guidelin.es/) followed by most  Front-End developers. If you have a doubt about CSS properties, you can visit [CSS Reference](http://cssreference.io/). There is also a short [Code Guide](http://codeguide.co/) for consistency.", "", "* [ ] **Responsive Web Design:** ![High][high_img] The website is using responsive web design.", "* [ ] **CSS Print:** ![Medium][medium_img] A print stylesheet is provided and is correct on each page.", "* [ ] **Preprocessors:** ![Low][low_img] Your project is using a CSS preprocessor (e.g [Sass](http://sass-lang.com/), [Less](http://lesscss.org/), [Stylus](http://stylus-lang.com/)).", "* [ ] **Unique ID:** ![High][high_img] If IDs are used, they are unique to a page.", "* [ ] **Reset CSS:** ![High][high_img] A CSS reset (reset, normalize or reboot) is used and up to date. *(If you are using a CSS Framework like Bootstrap or Foundation, a Normalize is already included into it.)*", "", "> * \ud83d\udcd6 [Reset.css](https://meyerweb.com/eric/tools/css/reset/)", "> * \ud83d\udcd6 [Normalize.css](https://necolas.github.io/normalize.css/)", "> * \ud83d\udcd6 [Reboot](https://getbootstrap.com/docs/4.0/content/reboot/)", "", "* [ ] **JS prefix:** ![Low][low_img] All classes (or id- used in JavaScript files) begin with **js-** and are not styled into the CSS files.", "", "```html", "<div id=\"js-slider\" class=\"my-slider\">", "<div id=\"id-used-by-cms\" class=\"js-slider my-slider\">", "```", "", "* [ ] **embedded or inline CSS:** ![High][high_img] Avoid at all cost embedding CSS in `<style>` tags or using inline CSS: only use for valid reasons (e.g. background-image for slider, critical CSS).", "* [ ] **Vendor prefixes:** ![High][high_img] CSS vendor prefixes are used and are generated accordingly with your browser support compatibility.", "", "> * \ud83d\udee0 [Autoprefixer CSS online](https://autoprefixer.github.io/)", ""]}, "Webfonts": {}, "CSS": {"Performance": ["", "- [ ] **Concatenation:** ![High][high_img] CSS files are concatenated in a single file *(Not for HTTP/2)*.", "- [ ] **Minification:** ![High][high_img] All CSS files are minified.", "- [ ] **Non-blocking:** ![Medium][medium_img] CSS files need to be non-blocking to prevent the DOM from taking time to load.", "", "> * \ud83d\udcd6 [loadCSS by filament group](https://github.com/filamentgroup/loadCSS)", "> * \ud83d\udcd6 [Example of preload CSS using loadCSS](https://gist.github.com/thedaviddias/c24763b82b9991e53928e66a0bafc9bf)", "", "- [ ] **Unused CSS:** ![Low][low_img] Remove unused CSS.", "", "> * \ud83d\udee0 [UnCSS Online](https://uncss-online.com/)", "> * \ud83d\udee0 [PurifyCSS](https://github.com/purifycss/purifycss)", "> * \ud83d\udee0 [PurgeCSS](https://github.com/FullHuman/purgecss)", "> * \ud83d\udee0 [Chrome DevTools Coverage](https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage)", "", ""], "CSS testing": ["", "* [ ] **Stylelint:** ![High][high_img] All CSS or SCSS files are without any errors.", "", "> * \ud83d\udee0 [stylelint, a CSS linter](https://stylelint.io/)", "> * \ud83d\udcd6 [Sass guidelines](https://sass-guidelin.es/)", "", "* [ ] **Responsive web design:** ![High][high_img] All pages were tested at the following breakpoints: 320px, 768px, 1024px (can be more / different according to your analytics).", "", "* [ ] **CSS Validator:** ![Medium][medium_img] The CSS was tested and pertinent errors were corrected.", "", "> * \ud83d\udee0 [CSS Validator](https://jigsaw.w3.org/css-validator/)", "", "* [ ] **Desktop Browsers:** ![High][high_img] All pages were tested on all current desktop browsers (Safari, Firefox, Chrome, Internet Explorer, EDGE...).", "* [ ] **Mobile Browsers:**  ![High][high_img] All pages were tested on all current mobile browsers (Native browser, Chrome, Safari...).", "* [ ] **OS:**  ![High][high_img] All pages were tested on all current OS (Windows, Android, iOS, Mac...).", "", "- [ ] **Design fidelity:** ![Low][low_img] Depending on the project and the quality of the creatives, you may be asked to be close to the design. You can use some tools to compare creatives with your code implementation and ensure consistency.", "", "> [Pixel Perfect - Chrome Extension](https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi?hl=en)", "", "* [ ] **Reading direction:** ![High][high_img] All pages need to be tested for LTR and RTL languages if they need to be supported.", "", "> * \ud83d\udcd6 [Building RTL-Aware Web Apps & Websites: Part 1 - Mozilla Hacks](https://hacks.mozilla.org/2015/09/building-rtl-aware-web-apps-and-websites-part-1/)", "> * \ud83d\udcd6 [Building RTL-Aware Web Apps & Websites: Part 2 - Mozilla Hacks](https://hacks.mozilla.org/2015/10/building-rtl-aware-web-apps-websites-part-2/)", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", "", "> **Notes:** For a complete understanding of image optimization, check the free ebook **[Essential Image Optimization](https://images.guide/)** from Addy Osmani.", ""]}, "Images": {"Best practices": ["", "* [ ] **Optimization:** ![High][high_img] All images are optimized to be rendered in the browser. WebP format could be used for critical pages (like Homepage).", "", "> * \ud83d\udee0 [Imagemin](https://github.com/imagemin/imagemin)", "> * \ud83d\udee0 Use [ImageOptim](https://imageoptim.com/) to optimise your images for free.", "> * \ud83d\udee0 Use [KeyCDN Image Processing](https://www.keycdn.com/support/image-processing) for image optimization in real time.", "> * \ud83d\udee0 Use [Kraken.io](https://kraken.io/web-interface) awesome alternative for both png and jpg optimization. Up to 1mb per files on free plan.", "> * \ud83d\udee0 [TinyPNG](https://tinypng.com/) losslessly optimises png, apng (animated png) and jpg images. Free and paid version available.", "> * \ud83d\udee0 [ZorroSVG](http://quasimondo.com/ZorroSVG/) jpg-like compression for transparent images using svg masking.", "> * \ud83d\udee0 [SVGO](https://github.com/svg/svgo) a Nodejs-based tool for optimizing SVG vector graphics files.", "> * \ud83d\udee0 [SVGOMG](https://jakearchibald.github.io/svgomg/) a web-based GUI version of SVGO for optimising your svgs online.", "", "", "* [ ] **Picture/Srcset:** ![Medium][medium_img] You use picture/srcset to provide the most appropriate image for the current viewport of the user.", "", "> * \ud83d\udcd6 [How to Build Responsive Images with srcset](https://www.sitepoint.com/how-to-build-responsive-images-with-srcset/)", "", "* [ ] **Retina:** ![Low][low_img] You provide layout images 2x or 3x, support retina display.", "* [ ] **Sprite:** ![Medium][medium_img] Small images are in a sprite file (in the case of icons, they can be in an SVG sprite image).", "* [ ] **Width and Height:** ![High][high_img] Set `width` and `height` attributes on `<img>` if the final rendered image size is known (can be omitted for CSS sizing).", "* [ ] **Alternative text:** ![High][high_img] All `<img>` have an alternative text which describes the image visually.", "", "> * \ud83d\udcd6 [Alt-texts: The Ultimate Guide](https://axesslab.com/alt-texts/)", "", "* [ ] **Lazy loading:** ![Medium][medium_img] Images are lazyloaded (A noscript fallback is always provided).", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", ""]}, "JavaScript": {"Best practices": ["", "* [ ] **JavaScript Inline:** ![High][high_img] You don't have any JavaScript code inline (mixed with your HTML code).", "* [ ] **Concatenation:** ![High][high_img] JavaScript files are concatenated.", "* [ ] **Minification:** ![High][high_img] JavaScript files are minified (you can add the `.min` suffix).", "", "> * \ud83d\udcd6 [Minify Resources (HTML, CSS, and JavaScript)](https://developers.google.com/speed/docs/insights/MinifyResources)", "", "* [ ] **JavaScript security:** ![High][high_img]", "", "> * \ud83d\udcd6 [Guidelines for Developing Secure Applications Utilizing JavaScript](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet#Guidelines_for_Developing_Secure_Applications_Utilizing_JavaScript)", "", "* [ ] **`noscript` tag:** ![Medium][medium_img] Use `<noscript>` tag in the HTML body if a script type on the page is unsupported or if scripting is currently turned off in the browser. This will be helpful in client-side rendering heavy apps such as React.js, see [examples](https://webdesign.tutsplus.com/tutorials/quick-tip-dont-forget-the-noscript-element--cms-25498).", "", "```html", "<noscript>", "  You need to enable JavaScript to run this app.", "</noscript>", "```", "", "* [ ] **Non-blocking:** ![Medium][medium_img] JavaScript files are loaded asynchronously using `async` or deferred using `defer` attribute.", "", "> * \ud83d\udcd6 [Remove Render-Blocking JavaScript](https://developers.google.com/speed/docs/insights/BlockingJS)", "", "* [ ] **Optimized and updated JS libraries:** ![Medium][medium_img] All JavaScript libraries used in your project are necessary (prefer Vanilla Javascript for simple functionalities), updated to their latest version and don't overwhelm your JavaScript with unnecessary methods.", "", "> * \ud83d\udcd6 [You may not need jQuery](http://youmightnotneedjquery.com/)", "> * \ud83d\udcd6 [Vanilla JavaScript for building powerful web applications](https://plainjs.com/)", "", "* [ ] **Modernizr:** ![Low][low_img] If you need to target some specific features you can use a custom Modernizr to add classes in your `<html>` tag.", "", "> * \ud83d\udee0 [Customize your Modernizr](https://modernizr.com/download?setclasses)", ""], "JavaScript testing": ["", "* [ ] **ESLint:** ![High][high_img] No errors are flagged by ESLint (based on your configuration or standards rules).", "", "> * \ud83d\udcd6 [ESLint - The pluggable linting utility for JavaScript and JSX](https://eslint.org/)", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", ""]}, "Security": {"Scan and check your web site": ["", "> * [securityheaders.io](https://securityheaders.io/)", "> * [Observatory by Mozilla](https://observatory.mozilla.org/)", ""], "Best practices": ["", "* [ ] **HTTPS:** ![High][high_img] HTTPS is used on every page and for all external content (plugins, images...).", "", "> * \ud83d\udee0 [Let's Encrypt - Free SSL/TLS Certificates](https://letsencrypt.org/)", "> * \ud83d\udee0 [Free SSL Server Test](https://www.ssllabs.com/ssltest/index.html)", "> * \ud83d\udcd6 [Strict Transport Security](http://caniuse.com/#feat=stricttransportsecurity)", "", "* [ ] **HTTP Strict Transport Security (HSTS):** ![Medium][medium_img] The HTTP header is set to 'Strict-Transport-Security'.", "", "> * \ud83d\udee0 [Check HSTS preload status and eligibility](https://hstspreload.org/)", "> * \ud83d\udcd6 [HTTP Strict Transport Security Cheat Sheet - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html)", "> * \ud83d\udcd6 [Transport Layer Protection Cheat Sheet - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)", "", "* [ ] **Cross Site Request Forgery (CSRF):** ![High][high_img] You ensure that requests made to your server-side are legitimate and originate from your website / app to prevent CSRF attacks.", "", "> * \ud83d\udcd6 [Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet  - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)", "", "* [ ] **Cross Site Scripting (XSS):** ![High][high_img] Your page or website is free from XSS possible issues.", "", "> * \ud83d\udcd6 [XSS (Cross Site Scripting) Prevention Cheat Sheet  - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)", "> * \ud83d\udcd6 [DOM based XSS Prevention Cheat Sheet  - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html)", "", "* [ ] **Content Type Options:** ![Medium][medium_img] Prevents Google Chrome and Internet Explorer from trying to mime-sniff the content-type of a response away from the one being declared by the server.", "", "> * \ud83d\udcd6 [X-Content-Type-Options - Scott Helme](https://scotthelme.co.uk/hardening-your-http-response-headers/#x-content-type-options)", "", "* [ ] **X-Frame-Options (XFO):** ![Medium][medium_img] Protects your visitors against clickjacking attacks.", "", "> * \ud83d\udcd6 [X-Frame-Options - Scott Helme](https://scotthelme.co.uk/hardening-your-http-response-headers/#x-frame-options)", "> * \ud83d\udcd6 [RFC7034 - HTTP Header Field X-Frame-Options](https://tools.ietf.org/html/rfc7034)", "", "* [ ] **Content Security Policy:** ![Medium][medium_img] Defines how content is loaded on your site and from where it is permitted to be loaded. Can also be used to protect against clickjacking attacks.", "", "> * \ud83d\udcd6 [Content Security Policy - An Introduction - Scott Helme](https://scotthelme.co.uk/content-security-policy-an-introduction/)", "> * \ud83d\udcd6 [CSP Cheat Sheet - Scott Helme](https://scotthelme.co.uk/csp-cheat-sheet/)", "> * \ud83d\udcd6 [CSP Cheat Sheet - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)", "> * \ud83d\udcd6 [Content Security Policy Reference](https://content-security-policy.com/)", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", ""]}, "Performance": {"Best practices": ["", "- [ ] **Goals to achieve:** ![Medium][medium_img] Your pages should reach these goals:", "  - First Meaningful Paint under 1 second", "  - Time To Interactive under 5 seconds for the \"average\" configuration (a $200 Android on a slow 3G network with 400ms RTT and 400kbps transfer speed) and under 2 seconds for repeat visits", "  - Critical file size under 170Kb gzipped", "", "> * \ud83d\udee0 [Website Page Analysis](https://tools.pingdom.com)", "> * \ud83d\udee0 [WebPageTest](https://www.webpagetest.org/)", "> * \ud83d\udcd6 [Size Limit: Make the Web lighter](https://evilmartians.com/chronicles/size-limit-make-the-web-lighter)", "", "* [ ] **Minified HTML:** ![Medium][medium_img] Your HTML is minified.", "", "* [ ] **Lazy loading:** ![Medium][medium_img] Images, scripts and CSS need to be lazy loaded to improve the response time of the current page (See details in their respective sections).", "", "* [ ] **Cookie size:** ![Medium][medium_img] If you are using cookies be sure each cookie doesn't exceed 4096 bytes and your domain name doesn't have more than 20 cookies.", "", "> * \ud83d\udcd6 [Cookie specification: RFC 6265](https://tools.ietf.org/html/rfc6265)", "> * \ud83d\udcd6 [Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)", "> * \ud83d\udee0 [Browser Cookie Limits](http://browsercookielimits.squawky.net/)", "", "* [ ] **Third party components:** ![Medium][medium_img] Third party iframes or components relying on external JS (like sharing buttons) are replaced by static components when possible, thus limiting calls to external APIs and keeping your user's activity private.", "", "> * \ud83d\udee0 [Simple sharing buttons generator](https://simplesharingbuttons.com/)", ""], "Preparing upcoming requests": ["", "> * \ud83d\udcd6 [Explanation of the following techniques](https://css-tricks.com/prefetching-preloading-prebrowsing/)", "", "* [ ] **DNS resolution:** ![Low][low_img] DNS of third-party services that may be needed are resolved in advance during idle time using `dns-prefetch`.", "", "```html", "<link rel=\"dns-prefetch\" href=\"https://example.com\">", "```", "", "* [ ] **Preconnection:** ![Low][low_img] DNS lookup, TCP handshake and TLS negotiation with services that will be needed soon is done in advance during idle time using `preconnect`.", "", "```html", "<link rel=\"preconnect\" href=\"https://example.com\">", "```", "", "* [ ] **Prefetching:** ![Low][low_img] Resources that will be needed soon (e.g. lazy loaded images) are requested in advance during idle time using `prefetch`.", "", "```html", "<link rel=\"prefetch\" href=\"image.png\">", "```", "", "* [ ] **Preloading:** ![Low][low_img] Resources needed in the current page (e.g. scripts placed at the end of `<body>`) in advance using `preload`.", "", "```html", "<link rel=\"preload\" href=\"app.js\">", "```", "", "> * \ud83d\udcd6 [Difference between prefetch and preload](https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf)", ""], "Performance testing": ["", "* [ ] **Google PageSpeed:** ![High][high_img] All your pages were tested (not only the homepage) and have a score of at least 90/100.", "", "> * \ud83d\udee0 [Google PageSpeed](https://developers.google.com/speed/pagespeed/insights/)", "> * \ud83d\udee0 [Test your mobile speed with Google](https://testmysite.withgoogle.com)", "> * \ud83d\udee0 [WebPagetest - Website Performance and Optimization Test](https://www.webpagetest.org/)", "> * \ud83d\udee0 [GTmetrix - Website speed and performance optimization](https://gtmetrix.com/)", "> * \ud83d\udee0 [Speedrank - Improve the performance of your website](https://speedrank.app/)", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", "", "> **Notes:** You can watch the playlist [A11ycasts with Rob Dodson](https://www.youtube.com/playlist?list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g) \ud83d\udcf9", ""]}, "Accessibility": {"Best practices": ["", "- [ ] **Progressive enhancement:** ![Medium][medium_img] Major functionality like main navigation and search should work without JavaScript enabled.", "", "> * \ud83d\udcd6 [Enable / Disable JavaScript in Chrome Developer Tools](https://www.youtube.com/watch?v=kBmvq2cE0D8)", "", "- [ ] **Color contrast:** ![Medium][medium_img] Color contrast should at least pass WCAG AA (AAA for mobile).", "", "> * \ud83d\udee0 [Contrast ratio](https://leaverou.github.io/contrast-ratio/)", "", "#### Headings", "", "* [ ] **H1:** ![High][high_img] All pages have an H1 which is not the title of the website.", "* [ ] **Headings:** ![High][high_img] Headings should be used properly and in the right order (H1 to H6).", "", "> * \ud83d\udcf9 [Why headings and landmarks are so important -- A11ycasts #18](https://www.youtube.com/watch?v=vAAzdi1xuUY&index=9&list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g)", ""], "Semantics": ["", "- [ ] **Specific HTML5 input types are used:** ![Medium][medium_img] This is especially important for mobile devices that show customized keypads and widgets for different types.", "", "> * \ud83d\udcd6 [Mobile Input Types](http://mobileinputtypes.com/)", ""], "Form": ["", "* [ ] **Label:** ![High][high_img] A label is associated with each input form element. In case a label can't be displayed, use `aria-label` instead.", "", "> * \ud83d\udcd6 [Using the aria-label attribute - MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)", ""], "Accessibility testing": ["", "* [ ] **Accessibility standards testing:** ![High][high_img] Use the WAVE tool to test if your page respects the accessibility standards.", "", "> * \ud83d\udee0 [Wave testing](http://wave.webaim.org/)", "", "* [ ] **Keyboard navigation:** ![High][high_img] Test your website using only your keyboard in a previsible order. All interactive elements are reachable and usable.", "* [ ] **Screen-reader:** ![Medium][medium_img] All pages were tested in a screen-reader (VoiceOver, ChromeVox, NVDA or Lynx).", "* [ ] **Focus style:** ![High][high_img] If the focus is disabled, it is replaced by visible state in CSS.", "", "> * \ud83d\udcf9 [Managing Focus - A11ycasts #22](https://www.youtube.com/watch?v=srLRSQg6Jgg&index=5&list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g)", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", "", "* [ ] **Google Analytics:** ![High][high_img] Google Analytics is installed and correctly configured.", "", "> * \ud83d\udee0 [Google Analytics](https://analytics.google.com/analytics/web/)", "> * \ud83d\udee0 [GA Checker (and others)](http://www.gachecker.com/)", "", "* [ ] **Headings logic:** ![Medium][medium_img] Heading text helps to understand the content in the current page.", "", "> * \ud83d\udee0 [Tota11y, tab Headings](http://khan.github.io/tota11y/#Try-it)", "", "* [ ] **sitemap.xml:** ![High][high_img] A sitemap.xml exists and was submitted to Google Search Console (previously Google Webmaster Tools).", "", "> * \ud83d\udee0 [Sitemap generator](https://websiteseochecker.com/html-sitemap-generator/)", "", "* [ ] **robots.txt:** ![High][high_img] The robots.txt is not blocking webpages.", "", "> * \ud83d\udcd6 [The robots.txt file](https://varvy.com/robottxt.html)", "> * \ud83d\udee0 Test your robots.txt with [Google Robots Testing Tool](https://www.google.com/webmasters/tools/robots-testing-tool)", "", "* [ ] **Structured Data:** ![High][high_img] Pages using structured data are tested and are without errors. Structured data helps crawlers understand the content in the current page.", "", "> * \ud83d\udcd6 [Introduction to Structured Data - Search - Google Developers](https://developers.google.com/search/docs/guides/intro-structured-data)", "> * \ud83d\udcd6 [RDFa - Linked Data in HTML](https://rdfa.info/)", "> * \ud83d\udcd6 [JSON-LD](https://json-ld.org/)", "> * \ud83d\udcd6 [Microdata](https://www.w3.org/TR/microdata/)", "> * \ud83d\udee0 Test your page with the [Structured Data Testing Tool](https://developers.google.com/structured-data/testing-tool/)", "> * \ud83d\udee0 Complete list of vocabularies that can be used as structured data. [Schema.org Full Hierarchy](http://schema.org/docs/full.html)", "", "* [ ] **Sitemap HTML:** ![Medium][medium_img] An HTML sitemap is provided and is accessible via a link in the footer of your website.", "", "> * \ud83d\udcd6 [Sitemap guidelines - Google Support](https://support.google.com/webmasters/answer/183668?hl=en)", "", "* [ ] **Pagination link tags:** ![Medium][medium_img] Provide `rel=\"prev\"` and `rel=\"next\"` to indicate paginated content.", "", "> * \ud83d\udee0 [Pagination (rel=\"prev/next\") Testing Tool](https://technicalseo.com/seo-tools/rel-prev-next/)", "", "> * \ud83d\udcd6 [Pagination guidelines - Google Support](https://support.google.com/webmasters/answer/1663744?hl=en)", "", "```html", "<link rel=\"prev\" href=\"https://example.com/?page=1\">", "<link rel=\"next\" href=\"https://example.com/?page=3\">", "```", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", "", "", "The Front-End Checklist is also available in other languages. Thanks for all translators and their awesome work!", "", "* \ud83c\uddef\ud83c\uddf5 Japanese: [miya0001/Front-End-Checklist](https://github.com/miya0001/Front-End-Checklist)", "* \ud83c\uddea\ud83c\uddf8 Spanish: [eoasakura/Front-End-Checklist-ES](https://github.com/eoasakura/Front-End-Checklist-ES)", "* \ud83c\udde8\ud83c\uddf3 Chinese: [JohnsenZhou/Front-End-Checklist](https://github.com/JohnsenZhou/Front-End-Checklist)", "* \ud83c\uddf0\ud83c\uddf7 Korean: [kesuskim/Front-End-Checklist](https://github.com/kesuskim/Front-End-Checklist)", "* \ud83c\udde7\ud83c\uddf7 Portuguese: [jcezarms/Front-End-Checklist](https://github.com/jcezarms/Front-End-Checklist)", "* \ud83c\uddfb\ud83c\uddf3 Vietnamese: [euclid1990/Front-End-Checklist](https://github.com/euclid1990/Front-End-Checklist)", "* \ud83c\uddf9\ud83c\uddfc Traditional Chinese: [EngineLin/Front-End-Checklist](https://github.com/EngineLin/Front-End-Checklist)", "* \ud83c\uddeb\ud83c\uddf7 French: [ynizon/Front-End-Checklist](https://github.com/ynizon/Front-End-Checklist)", "* \ud83c\uddf7\ud83c\uddfa Russian: [ungear/Front-End-Checklist](https://github.com/ungear/Front-End-Checklist)", "* \ud83c\uddf9\ud83c\uddf7 Turkish: [eraycetinay/Front-End-Checklist](https://github.com/eraycetinay/Front-End-Checklist)", "* \ud83c\udde9\ud83c\uddea German: [xfuture603/Front-End-Checklist](https://github.com/xFuture603/Front-End-Checklist)", "", "---", "", "", "If you want to show you are following the rules of the Front-End Checklist, put this badge on your README file!", "", "\u2794 [![Front\u2011End_Checklist followed](https://img.shields.io/badge/Front\u2011End_Checklist-followed-brightgreen.svg)](https://github.com/thedaviddias/Front-End-Checklist/)", "", "```md", "[![Front\u2011End_Checklist followed](https://img.shields.io/badge/Front\u2011End_Checklist-followed-brightgreen.svg)](https://github.com/thedaviddias/Front-End-Checklist/)", "```", "", "**[\u2b06 back to top](#table-of-contents)**", "", "---", ""]}, "SEO": {}, "Translations": {}, "Front-End Checklist Badge": {}, "Support": {}, "Author": {}, "Contributors": {}, "Backers": {}, "Sponsors": {}, "License": {}}}, {"name": "API Security Checklist", "content": {"API Security Checklist": {"Authentication": ["- [ ] Don't use `Basic Auth`. Use standard authentication instead (e.g. [JWT](https://jwt.io/), [OAuth](https://oauth.net/)).", "- [ ] Don't reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards.", "- [ ] Use `Max Retry` and jail features in Login.", "- [ ] Use encryption on all sensitive data.", "", "### JWT (JSON Web Token)", "- [ ] Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.", "- [ ] Don't extract the algorithm from the header. Force the algorithm in the backend (`HS256` or `RS256`).", "- [ ] Make token expiration (`TTL`, `RTTL`) as short as possible.", "- [ ] Don't store sensitive data in the JWT payload, it can be decoded [easily](https://jwt.io/#debugger-io).", "", "### OAuth", "- [ ] Always validate `redirect_uri` server-side to allow only whitelisted URLs.", "- [ ] Always try to exchange for code and not tokens (don't allow `response_type=token`).", "- [ ] Use `state` parameter with a random hash to prevent CSRF on the OAuth authentication process.", "- [ ] Define the default scope, and validate scope parameters for each application.", ""], "Access": ["- [ ] Limit requests (Throttling) to avoid DDoS / brute-force attacks.", "- [ ] Use HTTPS on server side to avoid MITM (Man in the Middle Attack).", "- [ ] Use `HSTS` header with SSL to avoid SSL Strip attack.", ""], "Input": ["- [ ] Use the proper HTTP method according to the operation: `GET (read)`, `POST (create)`, `PUT/PATCH (replace/update)`, and `DELETE (to delete a record)`, and respond with `405 Method Not Allowed` if the requested method isn't appropriate for the requested resource.", "- [ ] Validate `content-type` on request Accept header (Content Negotiation) to allow only your supported format (e.g. `application/xml`, `application/json`, etc.) and respond with `406 Not Acceptable` response if not matched.", "- [ ] Validate `content-type` of posted data as you accept (e.g. `application/x-www-form-urlencoded`, `multipart/form-data`, `application/json`, etc.).", "- [ ] Validate user input to avoid common vulnerabilities (e.g. `XSS`, `SQL-Injection`, `Remote Code Execution`, etc.).", "- [ ] Don't use any sensitive data (`credentials`, `Passwords`, `security tokens`, or `API keys`) in the URL, but use standard Authorization header.", "- [ ] Use an API Gateway service to enable caching, Rate Limit policies (e.g. `Quota`, `Spike Arrest`, or `Concurrent Rate Limit`) and deploy APIs resources dynamically.", ""], "Processing": ["- [ ] Check if all the endpoints are protected behind authentication to avoid broken authentication process.", "- [ ] User own resource ID should be avoided. Use `/me/orders` instead of `/user/654321/orders`.", "- [ ] Don't auto-increment IDs. Use `UUID` instead.", "- [ ] If you are parsing XML files, make sure entity parsing is not enabled to avoid `XXE` (XML external entity attack).", "- [ ] If you are parsing XML files, make sure entity expansion is not enabled to avoid `Billion Laughs/XML bomb` via exponential entity expansion attack.", "- [ ] Use a CDN for file uploads.", "- [ ] If you are dealing with huge amount of data, use Workers and Queues to process as much as possible in background and return response fast to avoid HTTP Blocking.", "- [ ] Do not forget to turn the DEBUG mode OFF.", ""], "Output": ["- [ ] Send `X-Content-Type-Options: nosniff` header.", "- [ ] Send `X-Frame-Options: deny` header.", "- [ ] Send `Content-Security-Policy: default-src 'none'` header.", "- [ ] Remove fingerprinting headers - `X-Powered-By`, `Server`, `X-AspNet-Version`, etc.", "- [ ] Force `content-type` for your response. If you return `application/json`, then your `content-type` response is `application/json`.", "- [ ] Don't return sensitive data like `credentials`, `Passwords`, or `security tokens`.", "- [ ] Return the proper status code according to the operation completed. (e.g. `200 OK`, `400 Bad Request`, `401 Unauthorized`, `405 Method Not Allowed`, etc.).", ""], "CI & CD": ["- [ ] Audit your design and implementation with unit/integration tests coverage.", "- [ ] Use a code review process and disregard self-approval.", "- [ ] Ensure that all components of your services are statically scanned by AV software before pushing to production, including vendor libraries and other dependencies.", "- [ ] Design a rollback solution for deployments.", "", "", "---", ""], "See also:": ["- [yosriady/api-development-tools](https://github.com/yosriady/api-development-tools) - A collection of useful resources for building RESTful HTTP+JSON APIs.", "", "", "---", "", "Feel free to contribute by forking this repository, making some changes, and submitting pull requests. For any questions drop us an email at `team@shieldfy.io`.", ""]}, "Contribution": {}}}]
export default data