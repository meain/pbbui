/* eslint-disable */
const data = [{"name": "Pure Bash Bible", "content": {"STRINGS": {"Trim leading and trailing white-space from string": ["", "This is an alternative to `sed`, `awk`, `perl` and other tools. The", "function below works by finding all leading and trailing white-space and", "removing it from the start and end of the string. The `:` built-in is used in place of a temporary variable.", "", "**Example Function:**", "", "```sh", "trim_string() {", "    # Usage: trim_string \"   example   string    \"", "    : \"${1#\"${1%%[![:space:]]*}\"}\"", "    : \"${_%\"${_##*[![:space:]]}\"}\"", "    printf '%s\\n' \"$_\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ trim_string \"    Hello,  World    \"", "Hello,  World", "", "$ name=\"   John Black  \"", "$ trim_string \"$name\"", "John Black", "```", "", ""], "Trim all white-space from string and truncate spaces": ["", "This is an alternative to `sed`, `awk`, `perl` and other tools. The", "function below works by abusing word splitting to create a new string", "without leading/trailing white-space and with truncated spaces.", "", "**Example Function:**", "", "```sh", "trim_all() {", "    # Usage: trim_all \"   example   string    \"", "    set -f", "    set -- $*", "    printf '%s\\n' \"$*\"", "    set +f", "}", "```", "", "**Example Usage:**", "", "```shell", "$ trim_all \"    Hello,    World    \"", "Hello, World", "", "$ name=\"   John   Black  is     my    name.    \"", "$ trim_all \"$name\"", "John Black is my name.", "```", ""], "Use regex on a string": ["", "The result of `bash`'s regex matching can be used to replace `sed` for a", "large number of use-cases.", "", "**CAVEAT**: This is one of the few platform dependent `bash` features.", "`bash` will use whatever regex engine is installed on the user's system.", "Stick to POSIX regex features if aiming for compatibility.", "", "**CAVEAT**: This example only prints the first matching group. When using", "multiple capture groups some modification is needed.", "", "**Example Function:**", "", "```sh", "regex() {", "    # Usage: regex \"string\" \"regex\"", "    [[ $1 =~ $2 ]] && printf '%s\\n' \"${BASH_REMATCH[1]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ # Trim leading white-space.", "$ regex '    hello' '^\\s*(.*)'", "hello", "", "$ # Validate a hex color.", "$ regex \"#FFFFFF\" '^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$'", "#FFFFFF", "", "$ # Validate a hex color (invalid).", "$ regex \"red\" '^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$'", "```", "", "**Example Usage in script:**", "", "```shell", "is_hex_color() {", "    if [[ $1 =~ ^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then", "        printf '%s\\n' \"${BASH_REMATCH[1]}\"", "    else", "        printf '%s\\n' \"error: $1 is an invalid color.\"", "        return 1", "    fi", "}", "", "read -r color", "is_hex_color \"$color\" || color=\"#FFFFFF\"", "", "```", "", ""], "Split a string on a delimiter": ["", "This is an alternative to `cut`, `awk` and other tools.", "", "**Example Function:**", "", "```sh", "split() {", "   # Usage: split \"string\" \"delimiter\"", "   IFS=$'\\n' read -d \"\" -ra arr <<< \"${1//$2/$'\\n'}\"", "   printf '%s\\n' \"${arr[@]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ split \"apples,oranges,pears,grapes\" \",\"", "apples", "oranges", "pears", "grapes", "", "$ split \"1, 2, 3, 4, 5\" \", \"", "1", "2", "3", "4", "5", "", "$ split \"hello---world---my---name---is---john\" \"---\"", "hello", "world", "my", "name", "is", "john", "```", ""], "Change a string to lowercase": ["", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "lower() {", "    # Usage: lower \"string\"", "    printf '%s\\n' \"${1,,}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lower \"HELLO\"", "hello", "", "$ lower \"HeLlO\"", "hello", "", "$ lower \"hello\"", "hello", "```", ""], "Change a string to uppercase": ["", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "upper() {", "    # Usage: upper \"string\"", "    printf '%s\\n' \"${1^^}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ upper \"hello\"", "HELLO", "", "$ upper \"HeLlO\"", "HELLO", "", "$ upper \"HELLO\"", "HELLO", "```", ""], "Trim quotes from a string": ["", "**Example Function:**", "", "```sh", "trim_quotes() {", "    # Usage: trim_quotes \"string\"", "    : \"${1//\\'}\"", "    printf '%s\\n' \"${_//\\\"}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ var=\"'Hello', \\\"World\\\"\"", "$ trim_quotes \"$var\"", "Hello, World", "```", ""], "Strip all instances of pattern from string": ["", "**Example Function:**", "", "```sh", "strip_all() {", "    # Usage: strip_all \"string\" \"pattern\"", "    printf '%s\\n' \"${1//$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ strip_all \"The Quick Brown Fox\" \"[aeiou]\"", "Th Qck Brwn Fx", "", "$ strip_all \"The Quick Brown Fox\" \"[[:space:]]\"", "TheQuickBrownFox", "", "$ strip_all \"The Quick Brown Fox\" \"Quick \"", "The Brown Fox", "```", ""], "Strip first occurrence of pattern from string": ["", "**Example Function:**", "", "```sh", "strip() {", "    # Usage: strip \"string\" \"pattern\"", "    printf '%s\\n' \"${1/$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ strip \"The Quick Brown Fox\" \"[aeiou]\"", "Th Quick Brown Fox", "", "$ strip \"The Quick Brown Fox\" \"[[:space:]]\"", "TheQuick Brown Fox", "```", ""], "Strip pattern from start of string": ["", "**Example Function:**", "", "```sh", "lstrip() {", "    # Usage: lstrip \"string\" \"pattern\"", "    printf '%s\\n' \"${1##$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lstrip \"The Quick Brown Fox\" \"The \"", "Quick Brown Fox", "```", ""], "Strip pattern from end of string": ["", "**Example Function:**", "", "```sh", "rstrip() {", "    # Usage: rstrip \"string\" \"pattern\"", "    printf '%s\\n' \"${1%%$2}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ rstrip \"The Quick Brown Fox\" \" Fox\"", "The Quick Brown", "```", ""], "Percent-encode a string": ["", "**Example Function:**", "", "```sh", "urlencode() {", "    # Usage: urlencode \"string\"", "    local LC_ALL=C", "    for (( i = 0; i < ${#1}; i++ )); do", "        : \"${1:i:1}\"", "        case \"$_\" in", "            [a-zA-Z0-9.~_-])", "                printf '%s' \"$_\"", "            ;;", "", "            *)", "                printf '%%%02X' \"'$_\"", "            ;;", "        esac", "    done", "    printf '\\n'", "}", "```", "", "**Example Usage:**", "", "```shell", "$ urlencode \"https://github.com/dylanaraps/pure-bash-bible\"", "https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible", "```", ""], "Decode a percent-encoded string": ["", "**Example Function:**", "", "```sh", "urldecode() {", "    # Usage: urldecode \"string\"", "    : \"${1//+/ }\"", "    printf '%b\\n' \"${_//%/\\\\x}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ urldecode \"https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible\"", "https://github.com/dylanaraps/pure-bash-bible", "```", ""], "Check if string contains a sub-string": ["", "**Using a test:**", "", "```shell", "if [[ $var == *sub_string* ]]; then", "    printf '%s\\n' \"sub_string is in var.\"", "fi", "", "if [[ $var != *sub_string* ]]; then", "    printf '%s\\n' \"sub_string is not in var.\"", "fi", "", "if [[ ${arr[*]} == *sub_string* ]]; then", "    printf '%s\\n' \"sub_string is in array.\"", "fi", "```", "", "**Using a case statement:**", "", "```shell", "case \"$var\" in", "    *sub_string*)", "        # Do stuff", "    ;;", "", "    *sub_string2*)", "        # Do more stuff", "    ;;", "", "    *)", "        # Else", "    ;;", "esac", "```", ""], "Check if string starts with sub-string": ["", "```shell", "if [[ $var == sub_string* ]]; then", "    printf '%s\\n' \"var starts with sub_string.\"", "fi", "", "if [[ $var != sub_string* ]]; then", "    printf '%s\\n' \"var does not start with sub_string.\"", "fi", "```", ""], "Check if string ends with sub-string": ["", "```shell", "if [[ $var == *sub_string ]]; then", "    printf '%s\\n' \"var ends with sub_string.\"", "fi", "", "if [[ $var != *sub_string ]]; then", "    printf '%s\\n' \"var does not end with sub_string.\"", "fi", "```", "", "", ""]}, "ARRAYS": {"Reverse an array": ["", "Enabling `extdebug` allows access to the `BASH_ARGV` array which stores", "the current function\u2019s arguments in reverse.", "", "**Example Function:**", "", "```sh", "reverse_array() {", "    # Usage: reverse_array \"array\"", "    shopt -s extdebug", "    f()(printf '%s\\n' \"${BASH_ARGV[@]}\"); f \"$@\"", "    shopt -u extdebug", "}", "```", "", "**Example Usage:**", "", "```shell", "$ reverse_array 1 2 3 4 5", "5", "4", "3", "2", "1", "", "$ arr=(red blue green)", "$ reverse_array \"${arr[@]}\"", "green", "blue", "red", "```", ""], "Remove duplicate array elements": ["", "Create a temporary associative array. When setting associative array", "values and a duplicate assignment occurs, bash overwrites the key. This", "allows us to effectively remove array duplicates.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "remove_array_dups() {", "    # Usage: remove_array_dups \"array\"", "    declare -A tmp_array", "", "    for i in \"$@\"; do", "        [[ $i ]] && IFS=\" \" tmp_array[\"${i:- }\"]=1", "    done", "", "    printf '%s\\n' \"${!tmp_array[@]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5", "1", "2", "3", "4", "5", "", "$ arr=(red red green blue blue)", "$ remove_array_dups \"${arr[@]}\"", "red", "green", "blue", "```", ""], "Random array element": ["", "**Example Function:**", "", "```sh", "random_array_element() {", "    # Usage: random_array_element \"array\"", "    local arr=(\"$@\")", "    printf '%s\\n' \"${arr[RANDOM % $#]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ array=(red green blue yellow brown)", "$ random_array_element \"${array[@]}\"", "yellow", "", "$ random_array_element 1 2 3 4 5 6 7", "3", "```", ""], "Cycle through an array": ["", "Each time the `printf` is called, the next array element is printed. When", "the print hits the last array element it starts from the first element", "again.", "", "```sh", "arr=(a b c d)", "", "cycle() {", "    printf '%s ' \"${arr[${i:=0}]}\"", "    ((i=i>=${#arr[@]}-1?0:++i))", "}", "```", "", ""], "Toggle between two values": ["", "This works the same as above, this is just a different use case.", "", "```sh", "arr=(true false)", "", "cycle() {", "    printf '%s ' \"${arr[${i:=0}]}\"", "    ((i=i>=${#arr[@]}-1?0:++i))", "}", "```", "", "", ""]}, "LOOPS": {"Loop over a range of numbers": ["", "Alternative to `seq`.", "", "```shell", "for i in {0..100}; do", "    printf '%s\\n' \"$i\"", "done", "```", ""], "Loop over a variable range of numbers": ["", "Alternative to `seq`.", "", "```shell", "VAR=50", "for ((i=0;i<=VAR;i++)); do", "    printf '%s\\n' \"$i\"", "done", "```", ""], "Loop over an array": ["", "```shell", "arr=(apples oranges tomatoes)", "", "for element in \"${arr[@]}\"; do", "    printf '%s\\n' \"$element\"", "done", "```", ""], "Loop over an array with an index": ["", "```shell", "arr=(apples oranges tomatoes)", "", "for i in \"${!arr[@]}\"; do", "    printf '%s\\n' \"${arr[i]}\"", "done", "", "for ((i=0;i<${#arr[@]};i++)); do", "    printf '%s\\n' \"${arr[i]}\"", "done", "```", ""], "Loop over the contents of a file": ["", "```shell", "while read -r line; do", "    printf '%s\\n' \"$line\"", "done < \"file\"", "```", ""], "Loop over files and directories": ["", "Don\u2019t use `ls`.", "", "```shell", "for file in *; do", "    printf '%s\\n' \"$file\"", "done", "", "for file in ~/Pictures/*.png; do", "    printf '%s\\n' \"$file\"", "done", "", "for dir in ~/Downloads/*/; do", "    printf '%s\\n' \"$dir\"", "done", "", "for file in /path/to/parentdir/{file1,file2,subdir/file3}; do", "    printf '%s\\n' \"$file\"", "done", "", "shopt -s globstar", "for file in ~/Pictures/**/*; do", "    printf '%s\\n' \"$file\"", "done", "shopt -u globstar", "```", "", "", "", "**CAVEAT:** `bash` does not handle binary data properly in versions `< 4.4`.", ""]}, "FILE HANDLING": {"Read a file to a string": ["", "Alternative to the `cat` command.", "", "```shell", "file_data=\"$(<\"file\")\"", "```", ""], "Read a file to an array (*by line*)": ["", "Alternative to the `cat` command.", "", "```shell", "IFS=$'\\n' read -d \"\" -ra file_data < \"file\"", "", "mapfile -t file_data < \"file\"", "```", ""], "Get the first N lines of a file": ["", "Alternative to the `head` command.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "head() {", "    # Usage: head \"n\" \"file\"", "    mapfile -tn \"$1\" line < \"$2\"", "    printf '%s\\n' \"${line[@]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ head 2 ~/.bashrc", "PS1='\u279c '", "", "$ head 1 ~/.bashrc", "```", ""], "Get the last N lines of a file": ["", "Alternative to the `tail` command.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "tail() {", "    # Usage: tail \"n\" \"file\"", "    mapfile -tn 0 line < \"$2\"", "    printf '%s\\n' \"${line[@]: -$1}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ tail 2 ~/.bashrc", "", "$ tail 1 ~/.bashrc", "```", ""], "Get the number of lines in a file": ["", "Alternative to `wc -l`.", "", "**Example Function (bash 4):**", "", "```sh", "lines() {", "    # Usage: lines \"file\"", "    mapfile -tn 0 lines < \"$1\"", "    printf '%s\\n' \"${#lines[@]}\"", "}", "```", "", "**Example Function (bash 3):**", "", "This method uses less memory than the `mapfile` method and works in `bash` 3 but it is slower for bigger files.", "", "```sh", "lines_loop() {", "    # Usage: lines_loop \"file\"", "    count=0", "    while IFS= read -r _; do", "        ((count++))", "    done < \"$1\"", "    printf '%s\\n' \"$count\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ lines ~/.bashrc", "48", "", "$ lines_loop ~/.bashrc", "48", "```", ""], "Count files or directories in directory": ["", "This works by passing the output of the glob to the function and then counting the number of arguments.", "", "**Example Function:**", "", "```sh", "count() {", "    # Usage: count /path/to/dir/*", "    #        count /path/to/dir/*/", "    printf '%s\\n' \"$#\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ count ~/Downloads/*", "232", "", "$ count ~/Downloads/*/", "45", "", "$ count ~/Pictures/*.jpg", "64", "```", ""], "Create an empty file": ["", "Alternative to `touch`.", "", "```shell", ">file", "", ":>file", "echo -n >file", "printf '' >file", "```", ""], "Extract lines between two markers": ["", "**Example Function:**", "", "```sh", "extract() {", "    # Usage: extract file \"opening marker\" \"closing marker\"", "    while IFS=$'\\n' read -r line; do", "        [[ $extract && $line != \"$3\" ]] &&", "            printf '%s\\n' \"$line\"", "", "        [[ $line == \"$2\" ]] && extract=1", "        [[ $line == \"$3\" ]] && extract=", "    done < \"$1\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ extract ~/projects/pure-bash/README.md '```sh' '```'", "```", "", "", ""]}, "FILE PATHS": {"Get the directory name of a file path": ["", "Alternative to the `dirname` command.", "", "**Example Function:**", "", "```sh", "dirname() {", "    # Usage: dirname \"path\"", "    printf '%s\\n' \"${1%/*}/\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ dirname ~/Pictures/Wallpapers/1.jpg", "/home/black/Pictures/Wallpapers/", "", "$ dirname ~/Pictures/Downloads/", "/home/black/Pictures/", "```", ""], "Get the base-name of a file path": ["", "Alternative to the `basename` command.", "", "**Example Function:**", "", "```sh", "basename() {", "    # Usage: basename \"path\"", "    : \"${1%/}\"", "    printf '%s\\n' \"${_##*/}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ basename ~/Pictures/Wallpapers/1.jpg", "1.jpg", "", "$ basename ~/Pictures/Downloads/", "Downloads", "```", "", "", ""]}, "VARIABLES": {"Assign and access a variable using a variable": ["", "```shell", "$ hello_world=\"value\"", "", "$ var=\"world\"", "$ ref=\"hello_$var\"", "", "$ printf '%s\\n' \"${!ref}\"", "value", "```", "", "Alternatively, on `bash` 4.3+:", "", "```shell", "$ hello_world=\"value\"", "$ var=\"world\"", "", "$ declare -n ref=hello_$var", "", "$ printf '%s\\n' \"$ref\"", "value", "```", ""], "Name a variable based on another variable": ["", "```shell", "$ var=\"world\"", "$ declare \"hello_$var=value\"", "$ printf '%s\\n' \"$hello_world\"", "value", "```", "", "", "", "Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using `tput` abstracts the same ANSI sequences as if printed manually. Worse still, `tput` is not actually portable. There are a number of `tput` variants each with different commands and syntaxes (*try `tput setaf 3` on a FreeBSD system*). Raw sequences are fine.", ""]}, "ESCAPE SEQUENCES": {"Text Colors": ["", "**NOTE:** Sequences requiring RGB values only work in True-Color Terminal Emulators.", "", "| Sequence | What does it do? | Value |", "| -------- | ---------------- | ----- |", "| `\\e[38;5;<NUM>m` | Set text foreground color. | `0-255`", "| `\\e[48;5;<NUM>m` | Set text background color. | `0-255`", "| `\\e[38;2;<R>;<G>;<B>m` | Set text foreground color to RGB color. | `R`, `G`, `B`", "| `\\e[48;2;<R>;<G>;<B>m` | Set text background color to RGB color. | `R`, `G`, `B`", ""], "Text Attributes": ["", "| Sequence | What does it do? |", "| -------- | ---------------- |", "| `\\e[m`  | Reset text formatting and colors.", "| `\\e[1m` | Bold text. |", "| `\\e[2m` | Faint text. |", "| `\\e[3m` | Italic text. |", "| `\\e[4m` | Underline text. |", "| `\\e[5m` | Slow blink. |", "| `\\e[7m` | Swap foreground and background colors. |", "", ""], "Cursor Movement": ["", "| Sequence | What does it do? | Value |", "| -------- | ---------------- | ----- |", "| `\\e[<LINE>;<COLUMN>H` | Move cursor to absolute position. | `line`, `column`", "| `\\e[H` | Move cursor to home position (`0,0`). |", "| `\\e[<NUM>A` | Move cursor up N lines. | `num`", "| `\\e[<NUM>B` | Move cursor down N lines. | `num`", "| `\\e[<NUM>C` | Move cursor right N columns. | `num`", "| `\\e[<NUM>D` | Move cursor left N columns. | `num`", "| `\\e[s` | Save cursor position. |", "| `\\e[u` | Restore cursor position. |", "", ""], "Erasing Text": ["", "| Sequence | What does it do? |", "| -------- | ---------------- |", "| `\\e[K` | Erase from cursor position to end of line.", "| `\\e[1K` | Erase from cursor position to start of line.", "| `\\e[2K` | Erase the entire current line.", "| `\\e[J` | Erase from the current line to the bottom of the screen.", "| `\\e[1J` | Erase from the current line to the top of the screen.", "| `\\e[2J` | Clear the screen.", "| `\\e[2J\\e[H` | Clear the screen and move cursor to `0,0`.", "", "", "", ""]}, "PARAMETER EXPANSION": {"Indirection": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${!VAR}` | Access a variable based on the value of `VAR`.", "| `${!VAR*}` | Expand to `IFS` separated list of variable names starting with `VAR`. |", "| `${!VAR@}` | Expand to `IFS` separated list of variable names starting with `VAR`. If double-quoted, each variable name expands to a separate word. |", "", ""], "Replacement": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR#PATTERN}` | Remove shortest match of pattern from start of string. |", "| `${VAR##PATTERN}` | Remove longest match of pattern from start of string. |", "| `${VAR%PATTERN}` | Remove shortest match of pattern from end of string. |", "| `${VAR%%PATTERN}` | Remove longest match of pattern from end of string. |", "| `${VAR/PATTERN/REPLACE}` | Replace first match with string.", "| `${VAR//PATTERN/REPLACE}` | Replace all matches with string.", "| `${VAR/PATTERN}` | Remove first match.", "| `${VAR//PATTERN}` | Remove all matches.", ""], "Length": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${#VAR}` | Length of var in characters.", "| `${#ARR[@]}` | Length of array in elements.", ""], "Expansion": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR:OFFSET}` | Remove first `N` chars from variable.", "| `${VAR:OFFSET:LENGTH}` | Get substring from `N` character to `N` character. <br> (`${VAR:10:10}`: Get sub-string from char `10` to char `20`)", "| `${VAR:: OFFSET}` | Get first `N` chars from variable.", "| `${VAR:: -OFFSET}` | Remove last `N` chars from variable.", "| `${VAR: -OFFSET}` | Get last `N` chars from variable.", "| `${VAR:OFFSET:-OFFSET}` | Cut first `N` chars and last `N` chars. | `bash 4.2+` |", ""], "Case Modification": ["", "| Parameter | What does it do? | CAVEAT |", "| --------- | ---------------- | ------ |", "| `${VAR^}` | Uppercase first character. | `bash 4+` |", "| `${VAR^^}` | Uppercase all characters. | `bash 4+` |", "| `${VAR,}` | Lowercase first character. | `bash 4+` |", "| `${VAR,,}` | Lowercase all characters. | `bash 4+` |", "", ""], "Default Value": ["", "| Parameter | What does it do? |", "| --------- | ---------------- |", "| `${VAR:-STRING}` | If `VAR` is empty or unset, use `STRING` as its value.", "| `${VAR-STRING}` | If `VAR` is unset, use `STRING` as its value.", "| `${VAR:=STRING}` | If `VAR` is empty or unset, set the value of `VAR` to `STRING`.", "| `${VAR=STRING}` | If `VAR` is unset, set the value of `VAR` to `STRING`.", "| `${VAR:+STRING}` | If `VAR` is not empty, use `STRING` as its value.", "| `${VAR+STRING}` | If `VAR` is set, use `STRING` as its value.", "| `${VAR:?STRING}` | Display an error if empty or unset.", "| `${VAR?STRING}` | Display an error if unset.", "", "", "", ""]}, "BRACE EXPANSION": {"Ranges": ["", "```shell", "", "echo {1..100}", "", "echo 1.{1..9}", "", "echo {a..z}", "echo {A..Z}", "", "echo {A..Z}{0..9}", "", "echo {01..100}", "", "echo {1..10..2} # Increment by 2.", "```", ""], "String Lists": ["", "```shell", "echo {apples,oranges,pears,grapes}", "", "rm -rf ~/Downloads/{Movies,Music,ISOS}", "```", "", "", "", "", ""]}, "CONDITIONAL EXPRESSIONS": {"File Conditionals": ["", "| Expression | Value  | What does it do? |", "| ---------- | ------ | ---------------- |", "| `-a`       | `file` | If file exists.", "| `-b`       | `file` | If file exists and is a block special file.", "| `-c`       | `file` | If file exists and is a character special file.", "| `-d`       | `file` | If file exists and is a directory.", "| `-e`       | `file` | If file exists.", "| `-f`       | `file` | If file exists and is a regular file.", "| `-g`       | `file` | If file exists and its set-group-id bit is set.", "| `-h`       | `file` | If file exists and is a symbolic link.", "| `-k`       | `file` | If file exists and its sticky-bit is set", "| `-p`       | `file` | If file exists and is a named pipe (*FIFO*).", "| `-r`       | `file` | If file exists and is readable.", "| `-s`       | `file` | If file exists and its size is greater than zero.", "| `-t`       | `fd`   | If file descriptor is open and refers to a terminal.", "| `-u`       | `file` | If file exists and its set-user-id bit is set.", "| `-w`       | `file` | If file exists and is writable.", "| `-x`       | `file` | If file exists and is executable.", "| `-G`       | `file` | If file exists and is owned by the effective group ID.", "| `-L`       | `file` | If file exists and is a symbolic link.", "| `-N`       | `file` | If file exists and has been modified since last read.", "| `-O`       | `file` | If file exists and is owned by the effective user ID.", "| `-S`       | `file` | If file exists and is a socket.", ""], "File Comparisons": ["", "| Expression | What does it do? |", "| ---------- | ---------------- |", "| `file -ef file2` | If both files refer to the same inode and device numbers.", "| `file -nt file2` | If `file` is newer than `file2` (*uses modification time*) or `file` exists and `file2` does not.", "| `file -ot file2` | If `file` is older than `file2` (*uses modification time*) or `file2` exists and `file` does not.", ""], "Variable Conditionals": ["", "| Expression | Value | What does it do? |", "| ---------- | ----- | ---------------- |", "| `-o`       | `opt` | If shell option is enabled.", "| `-v`       | `var` | If variable has a value assigned.", "| `-R`       | `var` | If variable is a name reference.", "| `-z`       | `var` | If the length of string is zero.", "| `-n`       | `var` | If the length of string is non-zero.", ""], "Variable Comparisons": ["", "| Expression | What does it do? |", "| ---------- | ---------------- |", "| `var = var2` | Equal to.", "| `var == var2` | Equal to (*synonym for `=`*).", "| `var != var2` | Not equal to.", "| `var < var2` | Less than (*in ASCII alphabetical order.*)", "| `var > var2` | Greater than (*in ASCII alphabetical order.*)", "", "", "", ""]}, "ARITHMETIC OPERATORS": {"Assignment": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `=`       | Initialize or change the value of a variable.", ""], "Arithmetic": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `+` | Addition", "| `-` | Subtraction", "| `*` | Multiplication", "| `/` | Division", "| `**` | Exponentiation", "| `%` | Modulo", "| `+=` | Plus-Equal (*Increment a variable.*)", "| `-=` | Minus-Equal (*Decrement a variable.*)", "| `*=` | Times-Equal (*Multiply a variable.*)", "| `/=` | Slash-Equal (*Divide a variable.*)", "| `%=` | Mod-Equal (*Remainder of dividing a variable.*)", ""], "Bitwise": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `<<` | Bitwise Left Shift", "| `<<=` | Left-Shift-Equal", "| `>>` | Bitwise Right Shift", "| `>>=` | Right-Shift-Equal", "| `&` | Bitwise AND", "| `&=` | Bitwise AND-Equal", "| `\\|` | Bitwise OR", "| `\\|=` | Bitwise OR-Equal", "| `~` | Bitwise NOT", "| `^` | Bitwise XOR", "| `^=` | Bitwise XOR-Equal", ""], "Logical": ["", "| Operators | What does it do? |", "| --------- | ---------------- |", "| `!` | NOT", "| `&&` | AND", "| `\\|\\|` | OR", ""], "Miscellaneous": ["", "| Operators | What does it do? | Example |", "| --------- | ---------------- | ------- |", "| `,` | Comma Separator | `((a=1,b=2,c=3))`", "", "", "", ""]}, "ARITHMETIC": {"Simpler syntax to set variables": ["", "```shell", "((var=1+2))", "", "((var++))", "((var--))", "((var+=1))", "((var-=1))", "", "((var=var2*arr[2]))", "```", ""], "Ternary Tests": ["", "```shell", "((var=var2>var?var2:var))", "```", "", "", "", "Traps allow a script to execute code on various signals. In [pxltrm](https://github.com/dylanaraps/pxltrm) (*a pixel art editor written in bash*)  traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.", "", "Traps should be added near the start of scripts so any early errors are also caught.", "", "**NOTE:** For a full list of signals, see `trap -l`.", "", ""]}, "TRAPS": {"Do something on script exit": ["", "```shell", "trap 'printf \\\\e[2J\\\\e[H\\\\e[m' EXIT", "```", ""], "Ignore terminal interrupt (CTRL+C, SIGINT)": ["", "```shell", "trap '' INT", "```", ""], "React to window resize": ["", "```shell", "trap 'code_here' SIGWINCH", "```", ""], "Do something before every command": ["", "```shell", "trap 'code_here' DEBUG", "```", ""], "Do something when a shell function or a sourced file finishes executing": ["", "```shell", "trap 'code_here' RETURN", "```", "", "", ""]}, "PERFORMANCE": {"Disable Unicode": ["", "If unicode is not required, it can be disabled for a performance increase. Results may vary however there have been noticeable improvements in [neofetch](https://github.com/dylanaraps/neofetch) and other programs.", "", "```shell", "LC_ALL=C", "LANG=C", "```", "", "", ""]}, "OBSOLETE SYNTAX": {"Shebang": ["", "Use `#!/usr/bin/env bash` instead of `#!/bin/bash`.", "", "- The former searches the user's `PATH` to find the `bash` binary.", "- The latter assumes it is always installed to `/bin/` which can cause issues.", "", "```shell", "", "    #!/usr/bin/env bash", "", "", "    #!/bin/bash", "```", ""], "Command Substitution": ["", "Use `$()` instead of `` ` ` ``.", "", "```shell", "var=\"$(command)\"", "", "var=`command`", "", "var=\"$(command \"$(command)\")\"", "```", ""], "Function Declaration": ["", "Do not use the `function` keyword, it reduces compatibility with older versions of `bash`.", "", "```shell", "do_something() {", "    # ...", "}", "", "function do_something() {", "    # ...", "}", "```", "", "", ""]}, "INTERNAL VARIABLES": {"Get the location to the `bash` binary": ["", "```shell", "\"$BASH\"", "```", ""], "Get the version of the current running `bash` process": ["", "```shell", "\"$BASH_VERSION\"", "", "\"${BASH_VERSINFO[@]}\"", "```", ""], "Open the user's preferred text editor": ["", "```shell", "\"$EDITOR\" \"$file\"", "", "\"${EDITOR:-vi}\" \"$file\"", "```", ""], "Get the name of the current function": ["", "```shell", "\"${FUNCNAME[0]}\"", "", "\"${FUNCNAME[1]}\"", "", "\"${FUNCNAME[2]}\"", "\"${FUNCNAME[3]}\"", "", "\"${FUNCNAME[@]}\"", "```", ""], "Get the host-name of the system": ["", "```shell", "\"$HOSTNAME\"", "", "\"${HOSTNAME:-$(hostname)}\"", "```", ""], "Get the architecture of the Operating System": ["", "```shell", "\"$HOSTTYPE\"", "```", ""], "Get the name of the Operating System / Kernel": ["", "This can be used to add conditional support for different Operating", "Systems without needing to call `uname`.", "", "```shell", "\"$OSTYPE\"", "```", ""], "Get the current working directory": ["", "This is an alternative to the `pwd` built-in.", "", "```shell", "\"$PWD\"", "```", ""], "Get the number of seconds the script has been running": ["", "```shell", "\"$SECONDS\"", "```", ""], "Get a pseudorandom integer": ["", "Each time `$RANDOM` is used, a different integer between `0` and `32767` is returned. This variable should not be used for anything related to security (*this includes encryption keys etc*).", "", "", "```shell", "\"$RANDOM\"", "```", "", "", ""]}, "INFORMATION ABOUT THE TERMINAL": {"Get the terminal size in lines and columns (*from a script*)": ["", "This is handy when writing scripts in pure bash and `stty`/`tput` can\u2019t be", "called.", "", "**Example Function:**", "", "```sh", "get_term_size() {", "    # Usage: get_term_size", "", "    # (:;:) is a micro sleep to ensure the variables are", "    # exported immediately.", "    shopt -s checkwinsize; (:;:)", "    printf '%s\\n' \"$LINES $COLUMNS\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ get_term_size", "15 55", "```", ""], "Get the terminal size in pixels": ["", "**CAVEAT**: This does not work in some terminal emulators.", "", "**Example Function:**", "", "```sh", "get_window_size() {", "    # Usage: get_window_size", "    printf '%b' \"${TMUX:+\\\\ePtmux;\\\\e}\\\\e[14t${TMUX:+\\\\e\\\\\\\\}\"", "    IFS=';t' read -d t -t 0.05 -sra term_size", "    printf '%s\\n' \"${term_size[1]}x${term_size[2]}\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ get_window_size", "1200x800", "", "$ get_window_size", "x", "```", ""], "Get the current cursor position": ["", "This is useful when creating a TUI in pure bash.", "", "**Example Function:**", "", "```sh", "get_cursor_pos() {", "    # Usage: get_cursor_pos", "    IFS='[;' read -p $'\\e[6n' -d R -rs _ y x _", "    printf '%s\\n' \"$x $y\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ get_cursor_pos", "1 8", "```", "", "", ""]}, "CONVERSION": {"Convert a hex color to RGB": ["", "**Example Function:**", "", "```sh", "hex_to_rgb() {", "    # Usage: hex_to_rgb \"#FFFFFF\"", "    #        hex_to_rgb \"000000\"", "    : \"${1/\\#}\"", "    ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))", "    printf '%s\\n' \"$r $g $b\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ hex_to_rgb \"#FFFFFF\"", "255 255 255", "```", "", ""], "Convert an RGB color to hex": ["", "**Example Function:**", "", "```sh", "rgb_to_hex() {", "    # Usage: rgb_to_hex \"r\" \"g\" \"b\"", "    printf '#%02x%02x%02x\\n' \"$1\" \"$2\" \"$3\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ rgb_to_hex \"255\" \"255\" \"255\"", "#FFFFFF", "```", "", "", ""]}, "CODE GOLF": {"Shorter `for` loop syntax": ["", "```shell", "for((;i++<10;)){ echo \"$i\";}", "", "for i in {1..10};{ echo \"$i\";}", "", "for i in {1..10}; do echo \"$i\"; done", "", "for((i=0;i<=10;i++)); do echo \"$i\"; done", "```", ""], "Shorter infinite loops": ["", "```shell", "while :; do echo hi; done", "", "for((;;)){ echo hi;}", "```", ""], "Shorter function declaration": ["", "```shell", "f(){ echo hi;}", "", "f()(echo hi)", "", "f()(($1))", "", "f()if true; then echo \"$1\"; fi", "f()for i in \"$@\"; do echo \"$i\"; done", "```", ""], "Shorter `if` syntax": ["", "```shell", "[[ $var == hello ]] && echo hi || echo bye", "[[ $var == hello ]] && { echo hi; echo there; } || echo bye", "", "[[ $var == hello ]] &&", "    echo hi", "", "[[ $var == hello ]] && {", "    echo hi", "    # ...", "}", "```", ""], "Simpler `case` statement to set variable": ["", "The `:` built-in can be used to avoid repeating `variable=` in a case statement. The `$_` variable stores the last argument of the last command. `:` always succeeds so it can be used to store the variable value.", "", "```shell", "case \"$OSTYPE\" in", "    \"darwin\"*)", "        : \"MacOS\"", "    ;;", "", "    \"linux\"*)", "        : \"Linux\"", "    ;;", "", "    *\"bsd\"* | \"dragonfly\" | \"bitrig\")", "        : \"BSD\"", "    ;;", "", "    \"cygwin\" | \"msys\" | \"win32\")", "        : \"Windows\"", "    ;;", "", "    *)", "        printf '%s\\n' \"Unknown OS detected, aborting...\" >&2", "        exit 1", "    ;;", "esac", "", "os=\"$_\"", "```", "", "", ""]}, "OTHER": {"Use `read` as an alternative to the `sleep` command": ["", "Surprisingly, `sleep` is an external command and not a `bash` built-in.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "read_sleep() {", "    # Usage: sleep 1", "    #        sleep 0.2", "    read -rst \"${1:-1}\" -N 999", "}", "```", "", "**Example Usage:**", "", "```shell", "read_sleep 1", "read_sleep 0.1", "read_sleep 30", "```", ""], "Check if a program is in the user's PATH": ["", "```shell", "type -p executable_name &>/dev/null", "hash executable_name &>/dev/null", "command -v executable_name &>/dev/null", "", "if type -p executable_name &>/dev/null; then", "    # Program is in PATH.", "fi", "", "if ! type -p executable_name &>/dev/null; then", "    # Program is not in PATH.", "fi", "", "if ! type -p convert &>/dev/null; then", "    printf '%s\\n' \"error: convert is not installed, exiting...\"", "    exit 1", "fi", "```", ""], "Get the current date using `strftime`": ["", "Bash\u2019s `printf` has a built-in method of getting the date which can be used in place of the `date` command.", "", "**CAVEAT:** Requires `bash` 4+", "", "**Example Function:**", "", "```sh", "date() {", "    # Usage: date \"format\"", "    # See: 'man strftime' for format.", "    printf \"%($1)T\\\\n\" \"-1\"", "}", "```", "", "**Example Usage:**", "", "```shell", "$ date \"%a %d %b  - %l:%M %p\"", "Fri 15 Jun  - 10:00 AM", "", "$ printf '%(%a %d %b  - %l:%M %p)T\\n' \"-1\"", "Fri 15 Jun  - 10:00 AM", "", "$ printf -v date '%(%a %d %b  - %l:%M %p)T\\n' '-1'", "$ printf '%s\\n' \"$date\"", "Fri 15 Jun  - 10:00 AM", "```", ""], "Get the username of the current user": ["", "**CAVEAT:** Requires `bash` 4.4+", "", "```shell", "$ : \\\\u", "$ printf '%s\\n' \"${_@P}\"", "black", "```", ""], "Generate a UUID V4": ["", "**CAVEAT**: The generated value is not cryptographically secure.", "", "**Example Function:**", "", "```sh", "uuid() {", "    # Usage: uuid", "    C=\"89ab\"", "", "    for ((N=0;N<16;++N)); do", "        B=\"$((RANDOM%256))\"", "", "        case \"$N\" in", "            6)  printf '4%x' \"$((B%16))\" ;;", "            8)  printf '%c%x' \"${C:$RANDOM%${#C}:1}\" \"$((B%16))\" ;;", "", "            3|5|7|9)", "                printf '%02x-' \"$B\"", "            ;;", "", "            *)", "                printf '%02x' \"$B\"", "            ;;", "        esac", "    done", "", "    printf '\\n'", "}", "```", "", "**Example Usage:**", "", "```shell", "$ uuid", "d5b6c731-1310-4c24-9fe3-55d556d44374", "```", ""], "Progress bars": ["", "This is a simple way of drawing progress bars without needing a for loop", "in the function itself.", "", "**Example Function:**", "", "```sh", "bar() {", "    # Usage: bar 1 10", "    #            ^----- Elapsed Percentage (0-100).", "    #               ^-- Total length in chars.", "    ((elapsed=$1*$2/100))", "", "    # Create the bar with spaces.", "    printf -v prog  \"%${elapsed}s\"", "    printf -v total \"%$(($2-elapsed))s\"", "", "    printf '%s\\r' \"[${prog// /-}${total}]\"", "}", "```", "", "**Example Usage:**", "", "```shell", "for ((i=0;i<=100;i++)); do", "    # Pure bash micro sleeps (for the example).", "    (:;:) && (:;:) && (:;:) && (:;:) && (:;:)", "", "    # Print the bar.", "    bar \"$i\" \"10\"", "done", "", "printf '\\n'", "```", ""], "Get the list of functions in a script": ["", "```sh", "get_functions() {", "    # Usage: get_functions", "    IFS=$'\\n' read -d \"\" -ra functions < <(declare -F)", "    printf '%s\\n' \"${functions[@]//declare -f }\"", "}", "```", ""], "Bypass shell aliases": ["", "```shell", "ls", "", "\\ls", "```", ""], "Bypass shell functions": ["", "```shell", "ls", "", "command ls", "```", ""], "Run a command in the background": ["", "This will run the given command and keep it running, even after the terminal or SSH connection is terminated. All output is ignored.", "", "```sh", "bkr() {", "    (nohup \"$@\" &>/dev/null &)", "}", "", "bkr ./some_script.sh # some_script.sh is now running in the background", "```", "", ""]}}}, {"name": "Writing a TUI in Bash", "content": {"Operating Systems": {"Identify the Operating System.": ["", "The quickest way to determine the current Operating System is the `$OSTYPE` variable. This variable is set at compile time in `bash` and typically stores the name of the running kernel or the name of the OS itself.", "", "You can also use the command `uname` to identify which OS is running. The `uname` command is POSIX and should be available everywhere. The output from `uname` does differ from `$OSTYPE` but there's a vast amount of documented information about it. [\\[1\\]](https://github.com/dylanaraps/neofetch/blob/415ef5d4aeb1cced7afcf9fd1223dd09c3306b9c/neofetch#L814-L845) [\\[2\\]](https://en.wikipedia.org/wiki/Uname)", "", "```sh", "get_os() {", "    # Figure out the current operating system to handle some", "    # OS specific behavior.", "    # '$OSTYPE' typically stores the name of the OS kernel.", "    case \"$OSTYPE\" in", "        linux*)", "            # ...", "        ;;", "", "        # Mac OS X / macOS.", "        darwin*)", "            # ...", "        ;;", "", "        openbsd*)", "            # ...", "        ;;", "", "        # Everything else.", "        *)", "            #...", "        ;;", "    esac", "}", "```", ""], "Documented `$OSTYPE` values.": ["", "The table below was populated by users submitting the value of the `$OSTYPE` variable using the following command. If you're running an OS not mentioned below or the output differs, please open an issue with the correct value.", "", "```sh", "bash -c \"echo $OSTYPE\"", "```", "", "| OS     | `$OSTYPE` |", "| ----- | ---------- |", "| Linux with glibc | `linux-gnu` |", "| Linux with musl | `linux-musl` |", "| Cygwin | `cygwin` |", "| Bash on Windows 10 | `linux-gnu` |", "| OpenBSD | `openbsd*` |", "| FreeBSD | `freebsd*` |", "| NetBSD | `netbsd` |", "| macOS | `darwin*` |", "| iOS | `darwin9` |", "| Solaris | `solaris*` |", "| Android (Termux) | `linux-android` |", "| Android | `linux-gnu` |", "| Haiku | `haiku` |", "", "", "", ""]}, "Terminal Window Size.": {"Getting the window size.": ["", "This function calls `stty size` to query the terminal for its size. This can be done in pure bash by setting `shopt -s checkwinsize` and using some trickery to capture the `$LINES` and `$COLUMNS` variables but this method is unreliable and only works in some versions of `bash`.", "", "The `stty` command is POSIX and should be available everywhere which makes it a reliable and viable alternative.", "", "```sh", "get_term_size() {", "    # Get terminal size ('stty' is POSIX and always available).", "    # This can't be done reliably across all bash versions in pure bash.", "    read -r LINES COLUMNS < <(stty size)", "}", "```", ""], "Reacting to window size changes.": ["", "Using `trap` allows us to capture and react to specific signals sent to the running program. In this case we're trapping the `SIGWINCH` signal which is sent to the terminal and the running shell on window resize.", "", "We're reacting to the signal by running the above `get_term_size()` function. The variables `$LINES` and `$COLUMNS` will be updated with the new terminal size ready to use elsewhere in the program.", "", "```sh", "# Trap the window resize signal (handle window resize events).", "# See: 'man trap' and 'trap -l'", "trap 'get_term_size' WINCH", "```", "", "", "For the purposes of this resource we won't be using `tput`. The `tput` command has a lot of overhead (`10-15 ms` per invocation) and won't make the program any more portable than sticking to standard **VT100** escape sequences. Using `tput` also adds a dependency on `ncurses` which defeats the whole purpose of doing this in `bash`.", ""]}, "Escape Sequences": {"Hiding and Showing the cursor": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/DECTCEM.html", "", "```sh", "# Hiding the cursor.", "printf '\\e[?25l'", "", "# Showing the cursor.", "printf '\\e[?25h'", "```", ""], "Line wrapping": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/DECAWM.html", "", "```sh", "# Disabling line wrapping.", "printf '\\e[?7l'", "", "# Enabling line wrapping.", "printf '\\e[?7h'", "```", ""], "Moving the cursor to specific coordinates": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/CUP.html", "", "```sh", "# Move the cursor to 0,0.", "printf '\\e[H'", "", "# Move the cursor to line 3, column 10.", "printf '\\e[3;10H'", "", "# Move the cursor to line 5.", "printf '\\e[5H'", "```", ""], "Moving the cursor to the bottom of the terminal.": ["", "See:", "", "- [getting-the-window-size](#getting-the-window-size)", "- https://vt100.net/docs/vt510-rm/CUP.html", "", "```sh", "# Using terminal size, move cursor to bottom.", "printf '\\e[%sH' \"$LINES\"", "```", ""], "Moving the cursor relatively": ["", "When using these escape sequences and the cursor hits the edge of the window it stops.", "", "", "#### Cursor Up", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUU.html", "", "```sh", "# Move the cursor up a line.", "printf '\\e[A'", "", "# Move the cursor up 10 lines.", "printf '\\e[10A'", "```", "", "#### Cursor Down", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUD.html", "", "```sh", "# Move the cursor down a line.", "printf '\\e[B'", "", "# Move the cursor down 10 lines.", "printf '\\e[10B'", "```", "", "#### Cursor Left", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUB.html", "", "```sh", "# Move the cursor back a column.", "printf '\\e[D'", "", "# Move the cursor back 10 columns.", "printf '\\e[10D'", "```", "", "#### Cursor Right", "", "See:", "", "- https://vt100.net/docs/vt510-rm/CUF.html", "", "```sh", "# Move the cursor forward a column.", "printf '\\e[C'", "", "# Move the cursor forward 10 columns.", "printf '\\e[10C'", "```", ""], "Clearing the screen": ["", "See:", "", "- https://vt100.net/docs/vt510-rm/ED.html", "- https://vt100.net/docs/vt510-rm/CUP.html", "", "```sh", "# Clear the screen.", "printf '\\e[2J'", "", "# Clear the screen and move cursor to (0,0).", "# This mimics the 'clear' command.", "printf '\\e[2J\\e[H'", "```", ""], "Setting the scroll area.": ["", "This sequence allow you to limit the terminal's vertical scrolling area between two points. This comes in handy when you need to reserve portions of the screen for a top or bottom status-line (*you don't want them to scroll*).", "", "This sequence also has the side-effect of moving the cursor to the top-left of the boundaries. This means you can use it directly after a screen clear instead of `\\e[H` (`\\e[2J\\e[0;10r`).", "", "See:", "", "- https://vt100.net/docs/vt510-rm/DECSTBM.html", "", "```sh", "# Limit scrolling from line 0 to line 10.", "printf '\\e[0;10r'", "", "# Set scrolling margins back to default.", "printf '\\e[;r'", "```", ""], "Limiting cursor movement to inside the scroll area.": ["", "With this sequence set you will no longer be able to move the cursor outside of the defined scroll boundaries. If you need to redraw a status-line or move the cursor beyond the boundaries you'll need to reset this sequence `\\e[?6l` and then set it again when you're done.", "", "See:", "", "- https://vt100.net/docs/vt510-rm/DECOM.html", "", "```sh", "# Restrict cursor movement to scroll area.", "printf '\\e[?6h'", "", "# Unrestrict the cursor.", "printf '\\e[?6l'", "```", ""], "Saving and Restoring the user's terminal screen.": ["", "This is one of the only non **VT100** I'll be covering. This sequence allows you to save and restore the user's terminal screen when running your program. When the user exits the program, their command-line will be restored as it was before running the program.", "", "While this sequence is XTerm specific, it is covered by almost all modern terminal emulators and simply ignored in older ones. There is also [DECCRA](https://vt100.net/docs/vt510-rm/DECCRA.html) which may or may not be more widely supported than the XTerm sequence but I haven't done much testing.", "", "```sh", "# Save the user's terminal screen.", "printf '\\e[?1049h'", "", "# Restore the user's terminal screen.", "printf '\\e[?1049l'", "```", ""]}}}]
export default data