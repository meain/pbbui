{"version":3,"sources":["components/Cards/undraw_empty_xct9.svg","components/Header/magnifier-tool.svg","components/Card/Card.js","components/Cards/Cards.js","components/Footer/Footer.js","components/Header/Header.js","pbb.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","header","title","accent","onClick","className","style","color","Remarkable","require","hljs","md","html","xhtmlOut","breaks","langPrefix","linkify","linkTarget","typographer","quotes","highlight","str","lang","getLanguage","value","__","highlightAuto","Cards","cards","length","src","emptyImage","alt","map","set","card","key","opener","document","createElement","innerHTML","render","content","swal","Footer","target","rel","href","Header","name","projects","currentProject","onSearch","onProjectChange","colourStyles","control","styles","border","borderBottom","borderRadius","margin","menu","input","width","onChange","option","options","searchIcon","type","placeholder","e","data","getTagColor","tag","ColorHash","lightness","rgb","formatData","formatted","heading","subheading","push","join","filterCards","search","ca","filter","c","toLowerCase","includes","cd","App","d","i","label","useState","project","setProject","fData","setCards","projectChange","val","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.baf78538.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_empty_xct9.cfb49f55.svg\";","module.exports = __webpack_public_path__ + \"static/media/magnifier-tool.54af9eb3.svg\";","// @flow\nimport * as React from 'react'\nimport './Card.css'\n\nexport type CardType = {\n  header: string,\n  title: string,\n  accent: string,\n  content: string,\n  onClick: void => mixed,\n}\ntype Props = CardType\n\nconst Card = ({ header, title, accent, onClick }: Props) => {\n  return (\n    <div className=\"Card\" onClick={onClick}>\n      <div\n        className=\"header\"\n        style={{\n          color: accent,\n        }}>\n        {header}\n      </div>\n      <div className=\"title\">{title}</div>\n    </div>\n  )\n}\n\nexport default Card\n","// @flow\nimport './Cards.css'\n\nimport React from 'react'\nimport swal from 'sweetalert'\nimport emptyImage from './undraw_empty_xct9.svg'\n\nimport Card, { type CardType } from '../Card/Card'\n\ntype Props = {\n  cards: Array<Array<CardType>>,\n}\n\nvar Remarkable = require('remarkable')\nvar hljs = require('highlight.js')\n\nvar md = new Remarkable('full', {\n  html: false,\n  xhtmlOut: false,\n  breaks: false,\n  langPrefix: 'language-',\n  linkify: true,\n  linkTarget: '',\n  typographer: false,\n  quotes: '“”‘’',\n  highlight: function(str, lang) {\n    if (lang === 'shell') lang = 'sh'\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str).value\n      } catch (__) {}\n    }\n\n    try {\n      return hljs.highlightAuto(str).value\n    } catch (__) {}\n\n    return ''\n  },\n})\n\nconst Cards = ({ cards }: Props) => {\n  return (\n    <div className=\"Cards-wrapper\">\n      {cards.length === 0 && (\n        <div className=\"no-content\">\n          <img src={emptyImage} alt=\"\" />\n          <div>Woops, I could not find anything for that search</div>\n        </div>\n      )}\n      {cards.map(set => (\n        <>\n          <h2 style={{ color: set[0].accent }}>{set[0].header}</h2>\n          <div className=\"Cards\">\n            {set.map(card => {\n              return (\n                <Card\n                  key={card.header + card.title}\n                  onClick={() => {\n                    let opener = document.createElement('p')\n                    opener.innerHTML =\n                      `<h4 style=\"color: ${card.accent};text-align: center;\">${card.title}</h4>` +\n                      md.render(card.content)\n                    swal({ content: opener })\n                  }}\n                  {...card}\n                />\n              )\n            })}\n          </div>\n        </>\n      ))}\n    </div>\n  )\n}\n\nexport default Cards\n","// @flow\nimport * as React from 'react'\nimport './Footer.css'\n\nconst Footer = () => {\n  return (\n    <div className=\"Footer\">\n      <span>\n        <span>Github:</span>{' '}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/meain/pbbui\">\n          meain/pbbui\n        </a>\n      </span>\n    </div>\n  )\n}\n\nexport default Footer\n","// @flow\nimport './Header.css'\n\nimport * as React from 'react'\nimport Select from 'react-select'\n\nimport type { ProjectOption } from '../../App'\nimport searchIcon from './magnifier-tool.svg'\n\ntype Props = {\n  name: string,\n  projects: Array<ProjectOption>,\n  currentProject: number,\n  onSearch: string => mixed,\n  onProjectChange: number => mixed,\n}\n\nconst Header = ({ name, projects, currentProject, onSearch, onProjectChange }: Props) => {\n  const colourStyles = {\n    control: styles => ({\n      ...styles,\n      border: 'none',\n      borderBottom: '1px solid #ccc',\n      borderRadius: '0',\n      margin: '6px 0'\n    }),\n    menu: styles => ({\n      ...styles,\n      borderRadius: '0',\n    }),\n    input: styles => ({ ...styles, width: '300px' }),\n  }\n\n  return (\n    <div className=\"Header-wrapper\">\n      <div className=\"Header\">\n        <Select\n          value={projects[currentProject]}\n          styles={colourStyles}\n          onChange={option => onProjectChange(option.value)}\n          options={projects}\n        />\n        {/* <h1 className=\"Header-hero\">{name}</h1> */}\n        <div className=\"search\">\n          <img src={searchIcon} className=\"Header-icon\" alt=\"\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"Header-input\"\n            onChange={e => onSearch(e.target.value)}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","/* eslint-disable */\nconst data = [{\"name\": \"Pure Bash Bible\", \"content\": {\"STRINGS\": {\"Trim leading and trailing white-space from string\": [\"\", \"This is an alternative to `sed`, `awk`, `perl` and other tools. The\", \"function below works by finding all leading and trailing white-space and\", \"removing it from the start and end of the string. The `:` built-in is used in place of a temporary variable.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"trim_string() {\", \"    # Usage: trim_string \\\"   example   string    \\\"\", \"    : \\\"${1#\\\"${1%%[![:space:]]*}\\\"}\\\"\", \"    : \\\"${_%\\\"${_##*[![:space:]]}\\\"}\\\"\", \"    printf '%s\\\\n' \\\"$_\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ trim_string \\\"    Hello,  World    \\\"\", \"Hello,  World\", \"\", \"$ name=\\\"   John Black  \\\"\", \"$ trim_string \\\"$name\\\"\", \"John Black\", \"```\", \"\", \"\"], \"Trim all white-space from string and truncate spaces\": [\"\", \"This is an alternative to `sed`, `awk`, `perl` and other tools. The\", \"function below works by abusing word splitting to create a new string\", \"without leading/trailing white-space and with truncated spaces.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"trim_all() {\", \"    # Usage: trim_all \\\"   example   string    \\\"\", \"    set -f\", \"    set -- $*\", \"    printf '%s\\\\n' \\\"$*\\\"\", \"    set +f\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ trim_all \\\"    Hello,    World    \\\"\", \"Hello, World\", \"\", \"$ name=\\\"   John   Black  is     my    name.    \\\"\", \"$ trim_all \\\"$name\\\"\", \"John Black is my name.\", \"```\", \"\"], \"Use regex on a string\": [\"\", \"The result of `bash`'s regex matching can be used to replace `sed` for a\", \"large number of use-cases.\", \"\", \"**CAVEAT**: This is one of the few platform dependent `bash` features.\", \"`bash` will use whatever regex engine is installed on the user's system.\", \"Stick to POSIX regex features if aiming for compatibility.\", \"\", \"**CAVEAT**: This example only prints the first matching group. When using\", \"multiple capture groups some modification is needed.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"regex() {\", \"    # Usage: regex \\\"string\\\" \\\"regex\\\"\", \"    [[ $1 =~ $2 ]] && printf '%s\\\\n' \\\"${BASH_REMATCH[1]}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ # Trim leading white-space.\", \"$ regex '    hello' '^\\\\s*(.*)'\", \"hello\", \"\", \"$ # Validate a hex color.\", \"$ regex \\\"#FFFFFF\\\" '^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$'\", \"#FFFFFF\", \"\", \"$ # Validate a hex color (invalid).\", \"$ regex \\\"red\\\" '^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$'\", \"```\", \"\", \"**Example Usage in script:**\", \"\", \"```shell\", \"is_hex_color() {\", \"    if [[ $1 =~ ^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then\", \"        printf '%s\\\\n' \\\"${BASH_REMATCH[1]}\\\"\", \"    else\", \"        printf '%s\\\\n' \\\"error: $1 is an invalid color.\\\"\", \"        return 1\", \"    fi\", \"}\", \"\", \"read -r color\", \"is_hex_color \\\"$color\\\" || color=\\\"#FFFFFF\\\"\", \"\", \"```\", \"\", \"\"], \"Split a string on a delimiter\": [\"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"This is an alternative to `cut`, `awk` and other tools.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"split() {\", \"   # Usage: split \\\"string\\\" \\\"delimiter\\\"\", \"   IFS=$'\\\\n' read -d \\\"\\\" -ra arr <<< \\\"${1//$2/$'\\\\n'}\\\"\", \"   printf '%s\\\\n' \\\"${arr[@]}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ split \\\"apples,oranges,pears,grapes\\\" \\\",\\\"\", \"apples\", \"oranges\", \"pears\", \"grapes\", \"\", \"$ split \\\"1, 2, 3, 4, 5\\\" \\\", \\\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\", \"$ split \\\"hello---world---my---name---is---john\\\" \\\"---\\\"\", \"hello\", \"world\", \"my\", \"name\", \"is\", \"john\", \"```\", \"\"], \"Change a string to lowercase\": [\"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"lower() {\", \"    # Usage: lower \\\"string\\\"\", \"    printf '%s\\\\n' \\\"${1,,}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ lower \\\"HELLO\\\"\", \"hello\", \"\", \"$ lower \\\"HeLlO\\\"\", \"hello\", \"\", \"$ lower \\\"hello\\\"\", \"hello\", \"```\", \"\"], \"Change a string to uppercase\": [\"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"upper() {\", \"    # Usage: upper \\\"string\\\"\", \"    printf '%s\\\\n' \\\"${1^^}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ upper \\\"hello\\\"\", \"HELLO\", \"\", \"$ upper \\\"HeLlO\\\"\", \"HELLO\", \"\", \"$ upper \\\"HELLO\\\"\", \"HELLO\", \"```\", \"\"], \"Reverse a string case\": [\"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"reverse_case() {\", \"    # Usage: reverse_case \\\"string\\\"\", \"    printf '%s\\\\n' \\\"${1~~}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ reverse_case \\\"hello\\\"\", \"HELLO\", \"\", \"$ reverse_case \\\"HeLlO\\\"\", \"hElLo\", \"\", \"$ reverse_case \\\"HELLO\\\"\", \"hello\", \"```\", \"\"], \"Trim quotes from a string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"trim_quotes() {\", \"    # Usage: trim_quotes \\\"string\\\"\", \"    : \\\"${1//\\\\'}\\\"\", \"    printf '%s\\\\n' \\\"${_//\\\\\\\"}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ var=\\\"'Hello', \\\\\\\"World\\\\\\\"\\\"\", \"$ trim_quotes \\\"$var\\\"\", \"Hello, World\", \"```\", \"\"], \"Strip all instances of pattern from string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"strip_all() {\", \"    # Usage: strip_all \\\"string\\\" \\\"pattern\\\"\", \"    printf '%s\\\\n' \\\"${1//$2}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ strip_all \\\"The Quick Brown Fox\\\" \\\"[aeiou]\\\"\", \"Th Qck Brwn Fx\", \"\", \"$ strip_all \\\"The Quick Brown Fox\\\" \\\"[[:space:]]\\\"\", \"TheQuickBrownFox\", \"\", \"$ strip_all \\\"The Quick Brown Fox\\\" \\\"Quick \\\"\", \"The Brown Fox\", \"```\", \"\"], \"Strip first occurrence of pattern from string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"strip() {\", \"    # Usage: strip \\\"string\\\" \\\"pattern\\\"\", \"    printf '%s\\\\n' \\\"${1/$2}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ strip \\\"The Quick Brown Fox\\\" \\\"[aeiou]\\\"\", \"Th Quick Brown Fox\", \"\", \"$ strip \\\"The Quick Brown Fox\\\" \\\"[[:space:]]\\\"\", \"TheQuick Brown Fox\", \"```\", \"\"], \"Strip pattern from start of string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"lstrip() {\", \"    # Usage: lstrip \\\"string\\\" \\\"pattern\\\"\", \"    printf '%s\\\\n' \\\"${1##$2}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ lstrip \\\"The Quick Brown Fox\\\" \\\"The \\\"\", \"Quick Brown Fox\", \"```\", \"\"], \"Strip pattern from end of string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"rstrip() {\", \"    # Usage: rstrip \\\"string\\\" \\\"pattern\\\"\", \"    printf '%s\\\\n' \\\"${1%%$2}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ rstrip \\\"The Quick Brown Fox\\\" \\\" Fox\\\"\", \"The Quick Brown\", \"```\", \"\"], \"Percent-encode a string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"urlencode() {\", \"    # Usage: urlencode \\\"string\\\"\", \"    local LC_ALL=C\", \"    for (( i = 0; i < ${#1}; i++ )); do\", \"        : \\\"${1:i:1}\\\"\", \"        case \\\"$_\\\" in\", \"            [a-zA-Z0-9.~_-])\", \"                printf '%s' \\\"$_\\\"\", \"            ;;\", \"\", \"            *)\", \"                printf '%%%02X' \\\"'$_\\\"\", \"            ;;\", \"        esac\", \"    done\", \"    printf '\\\\n'\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ urlencode \\\"https://github.com/dylanaraps/pure-bash-bible\\\"\", \"https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible\", \"```\", \"\"], \"Decode a percent-encoded string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"urldecode() {\", \"    # Usage: urldecode \\\"string\\\"\", \"    : \\\"${1//+/ }\\\"\", \"    printf '%b\\\\n' \\\"${_//%/\\\\\\\\x}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ urldecode \\\"https%3A%2F%2Fgithub.com%2Fdylanaraps%2Fpure-bash-bible\\\"\", \"https://github.com/dylanaraps/pure-bash-bible\", \"```\", \"\"], \"Check if string contains a sub-string\": [\"\", \"**Using a test:**\", \"\", \"```shell\", \"if [[ $var == *sub_string* ]]; then\", \"    printf '%s\\\\n' \\\"sub_string is in var.\\\"\", \"fi\", \"\", \"if [[ $var != *sub_string* ]]; then\", \"    printf '%s\\\\n' \\\"sub_string is not in var.\\\"\", \"fi\", \"\", \"if [[ ${arr[*]} == *sub_string* ]]; then\", \"    printf '%s\\\\n' \\\"sub_string is in array.\\\"\", \"fi\", \"```\", \"\", \"**Using a case statement:**\", \"\", \"```shell\", \"case \\\"$var\\\" in\", \"    *sub_string*)\", \"        # Do stuff\", \"    ;;\", \"\", \"    *sub_string2*)\", \"        # Do more stuff\", \"    ;;\", \"\", \"    *)\", \"        # Else\", \"    ;;\", \"esac\", \"```\", \"\"], \"Check if string starts with sub-string\": [\"\", \"```shell\", \"if [[ $var == sub_string* ]]; then\", \"    printf '%s\\\\n' \\\"var starts with sub_string.\\\"\", \"fi\", \"\", \"if [[ $var != sub_string* ]]; then\", \"    printf '%s\\\\n' \\\"var does not start with sub_string.\\\"\", \"fi\", \"```\", \"\"], \"Check if string ends with sub-string\": [\"\", \"```shell\", \"if [[ $var == *sub_string ]]; then\", \"    printf '%s\\\\n' \\\"var ends with sub_string.\\\"\", \"fi\", \"\", \"if [[ $var != *sub_string ]]; then\", \"    printf '%s\\\\n' \\\"var does not end with sub_string.\\\"\", \"fi\", \"```\", \"\", \"\", \"\"]}, \"ARRAYS\": {\"Reverse an array\": [\"\", \"Enabling `extdebug` allows access to the `BASH_ARGV` array which stores\", \"the current function\\u2019s arguments in reverse.\", \"\", \"**CAVEAT**: Requires `shopt -s compat44` in `bash` 5.0+.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"reverse_array() {\", \"    # Usage: reverse_array \\\"array\\\"\", \"    shopt -s extdebug\", \"    f()(printf '%s\\\\n' \\\"${BASH_ARGV[@]}\\\"); f \\\"$@\\\"\", \"    shopt -u extdebug\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ reverse_array 1 2 3 4 5\", \"5\", \"4\", \"3\", \"2\", \"1\", \"\", \"$ arr=(red blue green)\", \"$ reverse_array \\\"${arr[@]}\\\"\", \"green\", \"blue\", \"red\", \"```\", \"\"], \"Remove duplicate array elements\": [\"\", \"Create a temporary associative array. When setting associative array\", \"values and a duplicate assignment occurs, bash overwrites the key. This\", \"allows us to effectively remove array duplicates.\", \"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**CAVEAT:** List order may not stay the same.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"remove_array_dups() {\", \"    # Usage: remove_array_dups \\\"array\\\"\", \"    declare -A tmp_array\", \"\", \"    for i in \\\"$@\\\"; do\", \"        [[ $i ]] && IFS=\\\" \\\" tmp_array[\\\"${i:- }\\\"]=1\", \"    done\", \"\", \"    printf '%s\\\\n' \\\"${!tmp_array[@]}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\", \"$ arr=(red red green blue blue)\", \"$ remove_array_dups \\\"${arr[@]}\\\"\", \"red\", \"green\", \"blue\", \"```\", \"\"], \"Random array element\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"random_array_element() {\", \"    # Usage: random_array_element \\\"array\\\"\", \"    local arr=(\\\"$@\\\")\", \"    printf '%s\\\\n' \\\"${arr[RANDOM % $#]}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ array=(red green blue yellow brown)\", \"$ random_array_element \\\"${array[@]}\\\"\", \"yellow\", \"\", \"$ random_array_element 1 2 3 4 5 6 7\", \"3\", \"```\", \"\"], \"Cycle through an array\": [\"\", \"Each time the `printf` is called, the next array element is printed. When\", \"the print hits the last array element it starts from the first element\", \"again.\", \"\", \"```sh\", \"arr=(a b c d)\", \"\", \"cycle() {\", \"    printf '%s ' \\\"${arr[${i:=0}]}\\\"\", \"    ((i=i>=${#arr[@]}-1?0:++i))\", \"}\", \"```\", \"\", \"\"], \"Toggle between two values\": [\"\", \"This works the same as above, this is just a different use case.\", \"\", \"```sh\", \"arr=(true false)\", \"\", \"cycle() {\", \"    printf '%s ' \\\"${arr[${i:=0}]}\\\"\", \"    ((i=i>=${#arr[@]}-1?0:++i))\", \"}\", \"```\", \"\", \"\", \"\"]}, \"LOOPS\": {\"Loop over a range of numbers\": [\"\", \"Alternative to `seq`.\", \"\", \"```shell\", \"for i in {0..100}; do\", \"    printf '%s\\\\n' \\\"$i\\\"\", \"done\", \"```\", \"\"], \"Loop over a variable range of numbers\": [\"\", \"Alternative to `seq`.\", \"\", \"```shell\", \"VAR=50\", \"for ((i=0;i<=VAR;i++)); do\", \"    printf '%s\\\\n' \\\"$i\\\"\", \"done\", \"```\", \"\"], \"Loop over an array\": [\"\", \"```shell\", \"arr=(apples oranges tomatoes)\", \"\", \"for element in \\\"${arr[@]}\\\"; do\", \"    printf '%s\\\\n' \\\"$element\\\"\", \"done\", \"```\", \"\"], \"Loop over an array with an index\": [\"\", \"```shell\", \"arr=(apples oranges tomatoes)\", \"\", \"for i in \\\"${!arr[@]}\\\"; do\", \"    printf '%s\\\\n' \\\"${arr[i]}\\\"\", \"done\", \"\", \"for ((i=0;i<${#arr[@]};i++)); do\", \"    printf '%s\\\\n' \\\"${arr[i]}\\\"\", \"done\", \"```\", \"\"], \"Loop over the contents of a file\": [\"\", \"```shell\", \"while read -r line; do\", \"    printf '%s\\\\n' \\\"$line\\\"\", \"done < \\\"file\\\"\", \"```\", \"\"], \"Loop over files and directories\": [\"\", \"Don\\u2019t use `ls`.\", \"\", \"```shell\", \"for file in *; do\", \"    printf '%s\\\\n' \\\"$file\\\"\", \"done\", \"\", \"for file in ~/Pictures/*.png; do\", \"    printf '%s\\\\n' \\\"$file\\\"\", \"done\", \"\", \"for dir in ~/Downloads/*/; do\", \"    printf '%s\\\\n' \\\"$dir\\\"\", \"done\", \"\", \"for file in /path/to/parentdir/{file1,file2,subdir/file3}; do\", \"    printf '%s\\\\n' \\\"$file\\\"\", \"done\", \"\", \"shopt -s globstar\", \"for file in ~/Pictures/**/*; do\", \"    printf '%s\\\\n' \\\"$file\\\"\", \"done\", \"shopt -u globstar\", \"```\", \"\", \"\", \"\", \"**CAVEAT:** `bash` does not handle binary data properly in versions `< 4.4`.\", \"\"]}, \"FILE HANDLING\": {\"Read a file to a string\": [\"\", \"Alternative to the `cat` command.\", \"\", \"```shell\", \"file_data=\\\"$(<\\\"file\\\")\\\"\", \"```\", \"\"], \"Read a file to an array (*by line*)\": [\"\", \"Alternative to the `cat` command.\", \"\", \"```shell\", \"IFS=$'\\\\n' read -d \\\"\\\" -ra file_data < \\\"file\\\"\", \"\", \"while read -r line; do\", \"    file_data+=(\\\"$line\\\")\", \"done < \\\"file\\\"\", \"\", \"mapfile -t file_data < \\\"file\\\"\", \"```\", \"\"], \"Get the first N lines of a file\": [\"\", \"Alternative to the `head` command.\", \"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"head() {\", \"    # Usage: head \\\"n\\\" \\\"file\\\"\", \"    mapfile -tn \\\"$1\\\" line < \\\"$2\\\"\", \"    printf '%s\\\\n' \\\"${line[@]}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ head 2 ~/.bashrc\", \"PS1='\\u279c '\", \"\", \"$ head 1 ~/.bashrc\", \"```\", \"\"], \"Get the last N lines of a file\": [\"\", \"Alternative to the `tail` command.\", \"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"tail() {\", \"    # Usage: tail \\\"n\\\" \\\"file\\\"\", \"    mapfile -tn 0 line < \\\"$2\\\"\", \"    printf '%s\\\\n' \\\"${line[@]: -$1}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ tail 2 ~/.bashrc\", \"\", \"$ tail 1 ~/.bashrc\", \"```\", \"\"], \"Get the number of lines in a file\": [\"\", \"Alternative to `wc -l`.\", \"\", \"**Example Function (bash 4):**\", \"\", \"```sh\", \"lines() {\", \"    # Usage: lines \\\"file\\\"\", \"    mapfile -tn 0 lines < \\\"$1\\\"\", \"    printf '%s\\\\n' \\\"${#lines[@]}\\\"\", \"}\", \"```\", \"\", \"**Example Function (bash 3):**\", \"\", \"This method uses less memory than the `mapfile` method and works in `bash` 3 but it is slower for bigger files.\", \"\", \"```sh\", \"lines_loop() {\", \"    # Usage: lines_loop \\\"file\\\"\", \"    count=0\", \"    while IFS= read -r _; do\", \"        ((count++))\", \"    done < \\\"$1\\\"\", \"    printf '%s\\\\n' \\\"$count\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ lines ~/.bashrc\", \"48\", \"\", \"$ lines_loop ~/.bashrc\", \"48\", \"```\", \"\"], \"Count files or directories in directory\": [\"\", \"This works by passing the output of the glob to the function and then counting the number of arguments.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"count() {\", \"    # Usage: count /path/to/dir/*\", \"    #        count /path/to/dir/*/\", \"    printf '%s\\\\n' \\\"$#\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ count ~/Downloads/*\", \"232\", \"\", \"$ count ~/Downloads/*/\", \"45\", \"\", \"$ count ~/Pictures/*.jpg\", \"64\", \"```\", \"\"], \"Create an empty file\": [\"\", \"Alternative to `touch`.\", \"\", \"```shell\", \">file\", \"\", \":>file\", \"echo -n >file\", \"printf '' >file\", \"```\", \"\"], \"Extract lines between two markers\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"extract() {\", \"    # Usage: extract file \\\"opening marker\\\" \\\"closing marker\\\"\", \"    while IFS=$'\\\\n' read -r line; do\", \"        [[ $extract && $line != \\\"$3\\\" ]] &&\", \"            printf '%s\\\\n' \\\"$line\\\"\", \"\", \"        [[ $line == \\\"$2\\\" ]] && extract=1\", \"        [[ $line == \\\"$3\\\" ]] && extract=\", \"    done < \\\"$1\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ extract ~/projects/pure-bash/README.md '```sh' '```'\", \"```\", \"\", \"\", \"\"]}, \"FILE PATHS\": {\"Get the directory name of a file path\": [\"\", \"Alternative to the `dirname` command.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"dirname() {\", \"    # Usage: dirname \\\"path\\\"\", \"    local tmp=${1:-.}\", \"\", \"    [[ $tmp != *[!/]* ]] && {\", \"        printf '/\\\\n'\", \"        return\", \"    }\", \"\", \"    tmp=${tmp%%\\\"${tmp##*[!/]}\\\"}\", \"\", \"    [[ $tmp != */* ]] && {\", \"        printf '.\\\\n'\", \"        return\", \"    }\", \"\", \"    tmp=${tmp%/*}\", \"    tmp=${tmp%%\\\"${tmp##*[!/]}\\\"}\", \"\", \"    printf '%s\\\\n' \\\"${tmp:-/}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ dirname ~/Pictures/Wallpapers/1.jpg\", \"/home/black/Pictures/Wallpapers\", \"\", \"$ dirname ~/Pictures/Downloads/\", \"/home/black/Pictures\", \"```\", \"\"], \"Get the base-name of a file path\": [\"\", \"Alternative to the `basename` command.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"basename() {\", \"    # Usage: basename \\\"path\\\" [\\\"suffix\\\"]\", \"    local tmp\", \"\", \"    tmp=${1%\\\"${1##*[!/]}\\\"}\", \"    tmp=${tmp##*/}\", \"    tmp=${tmp%\\\"${2/\\\"$tmp\\\"}\\\"}\", \"\", \"    printf '%s\\\\n' \\\"${tmp:-/}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ basename ~/Pictures/Wallpapers/1.jpg\", \"1.jpg\", \"\", \"$ basename ~/Pictures/Wallpapers/1.jpg .jpg\", \"1\", \"\", \"$ basename ~/Pictures/Downloads/\", \"Downloads\", \"```\", \"\", \"\", \"\"]}, \"VARIABLES\": {\"Assign and access a variable using a variable\": [\"\", \"```shell\", \"$ hello_world=\\\"value\\\"\", \"\", \"$ var=\\\"world\\\"\", \"$ ref=\\\"hello_$var\\\"\", \"\", \"$ printf '%s\\\\n' \\\"${!ref}\\\"\", \"value\", \"```\", \"\", \"Alternatively, on `bash` 4.3+:\", \"\", \"```shell\", \"$ hello_world=\\\"value\\\"\", \"$ var=\\\"world\\\"\", \"\", \"$ declare -n ref=hello_$var\", \"\", \"$ printf '%s\\\\n' \\\"$ref\\\"\", \"value\", \"```\", \"\"], \"Name a variable based on another variable\": [\"\", \"```shell\", \"$ var=\\\"world\\\"\", \"$ declare \\\"hello_$var=value\\\"\", \"$ printf '%s\\\\n' \\\"$hello_world\\\"\", \"value\", \"```\", \"\", \"\", \"\", \"Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using `tput` abstracts the same ANSI sequences as if printed manually. Worse still, `tput` is not actually portable. There are a number of `tput` variants each with different commands and syntaxes (*try `tput setaf 3` on a FreeBSD system*). Raw sequences are fine.\", \"\"]}, \"ESCAPE SEQUENCES\": {\"Text Colors\": [\"\", \"**NOTE:** Sequences requiring RGB values only work in True-Color Terminal Emulators.\", \"\", \"| Sequence | What does it do? | Value |\", \"| -------- | ---------------- | ----- |\", \"| `\\\\e[38;5;<NUM>m` | Set text foreground color. | `0-255`\", \"| `\\\\e[48;5;<NUM>m` | Set text background color. | `0-255`\", \"| `\\\\e[38;2;<R>;<G>;<B>m` | Set text foreground color to RGB color. | `R`, `G`, `B`\", \"| `\\\\e[48;2;<R>;<G>;<B>m` | Set text background color to RGB color. | `R`, `G`, `B`\", \"\"], \"Text Attributes\": [\"\", \"**NOTE:** Prepend 2 to any code below to turn it's effect off\", \"(examples: 21=bold text off, 22=faint text off, 23=italic text off).\", \"\", \"| Sequence | What does it do? |\", \"| -------- | ---------------- |\", \"| `\\\\e[m` | Reset text formatting and colors. |\", \"| `\\\\e[1m` | Bold text. |\", \"| `\\\\e[2m` | Faint text. |\", \"| `\\\\e[3m` | Italic text. |\", \"| `\\\\e[4m` | Underline text. |\", \"| `\\\\e[5m` | Blinking text. |\", \"| `\\\\e[7m` | Highlighted text. |\", \"| `\\\\e[8m` | Hidden text. |\", \"| `\\\\e[9m` | Strike-through text. |\", \"\", \"\"], \"Cursor Movement\": [\"\", \"| Sequence | What does it do? | Value |\", \"| -------- | ---------------- | ----- |\", \"| `\\\\e[<LINE>;<COLUMN>H` | Move cursor to absolute position. | `line`, `column`\", \"| `\\\\e[H` | Move cursor to home position (`0,0`). |\", \"| `\\\\e[<NUM>A` | Move cursor up N lines. | `num`\", \"| `\\\\e[<NUM>B` | Move cursor down N lines. | `num`\", \"| `\\\\e[<NUM>C` | Move cursor right N columns. | `num`\", \"| `\\\\e[<NUM>D` | Move cursor left N columns. | `num`\", \"| `\\\\e[s` | Save cursor position. |\", \"| `\\\\e[u` | Restore cursor position. |\", \"\", \"\"], \"Erasing Text\": [\"\", \"| Sequence | What does it do? |\", \"| -------- | ---------------- |\", \"| `\\\\e[K` | Erase from cursor position to end of line.\", \"| `\\\\e[1K` | Erase from cursor position to start of line.\", \"| `\\\\e[2K` | Erase the entire current line.\", \"| `\\\\e[J` | Erase from the current line to the bottom of the screen.\", \"| `\\\\e[1J` | Erase from the current line to the top of the screen.\", \"| `\\\\e[2J` | Clear the screen.\", \"| `\\\\e[2J\\\\e[H` | Clear the screen and move cursor to `0,0`.\", \"\", \"\", \"\", \"\"]}, \"PARAMETER EXPANSION\": {\"Indirection\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${!VAR}` | Access a variable based on the value of `VAR`.\", \"| `${!VAR*}` | Expand to `IFS` separated list of variable names starting with `VAR`. |\", \"| `${!VAR@}` | Expand to `IFS` separated list of variable names starting with `VAR`. If double-quoted, each variable name expands to a separate word. |\", \"\", \"\"], \"Replacement\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${VAR#PATTERN}` | Remove shortest match of pattern from start of string. |\", \"| `${VAR##PATTERN}` | Remove longest match of pattern from start of string. |\", \"| `${VAR%PATTERN}` | Remove shortest match of pattern from end of string. |\", \"| `${VAR%%PATTERN}` | Remove longest match of pattern from end of string. |\", \"| `${VAR/PATTERN/REPLACE}` | Replace first match with string.\", \"| `${VAR//PATTERN/REPLACE}` | Replace all matches with string.\", \"| `${VAR/PATTERN}` | Remove first match.\", \"| `${VAR//PATTERN}` | Remove all matches.\", \"\"], \"Length\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${#VAR}` | Length of var in characters.\", \"| `${#ARR[@]}` | Length of array in elements.\", \"\"], \"Expansion\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${VAR:OFFSET}` | Remove first `N` chars from variable.\", \"| `${VAR:OFFSET:LENGTH}` | Get substring from `N` character to `N` character. <br> (`${VAR:10:10}`: Get sub-string from char `10` to char `20`)\", \"| `${VAR:: OFFSET}` | Get first `N` chars from variable.\", \"| `${VAR:: -OFFSET}` | Remove last `N` chars from variable.\", \"| `${VAR: -OFFSET}` | Get last `N` chars from variable.\", \"| `${VAR:OFFSET:-OFFSET}` | Cut first `N` chars and last `N` chars. | `bash 4.2+` |\", \"\"], \"Case Modification\": [\"\", \"| Parameter | What does it do? | CAVEAT |\", \"| --------- | ---------------- | ------ |\", \"| `${VAR^}` | Uppercase first character. | `bash 4+` |\", \"| `${VAR^^}` | Uppercase all characters. | `bash 4+` |\", \"| `${VAR,}` | Lowercase first character. | `bash 4+` |\", \"| `${VAR,,}` | Lowercase all characters. | `bash 4+` |\", \"| `${VAR~}` | Reverse case of first character. | `bash 4+` |\", \"| `${VAR~~}` | Reverse case of all characters. | `bash 4+` |\", \"\", \"\"], \"Default Value\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${VAR:-STRING}` | If `VAR` is empty or unset, use `STRING` as its value.\", \"| `${VAR-STRING}` | If `VAR` is unset, use `STRING` as its value.\", \"| `${VAR:=STRING}` | If `VAR` is empty or unset, set the value of `VAR` to `STRING`.\", \"| `${VAR=STRING}` | If `VAR` is unset, set the value of `VAR` to `STRING`.\", \"| `${VAR:+STRING}` | If `VAR` is not empty, use `STRING` as its value.\", \"| `${VAR+STRING}` | If `VAR` is set, use `STRING` as its value.\", \"| `${VAR:?STRING}` | Display an error if empty or unset.\", \"| `${VAR?STRING}` | Display an error if unset.\", \"\", \"\", \"\", \"\"]}, \"BRACE EXPANSION\": {\"Ranges\": [\"\", \"```shell\", \"\", \"echo {1..100}\", \"\", \"echo 1.{1..9}\", \"\", \"echo {a..z}\", \"echo {A..Z}\", \"\", \"echo {A..Z}{0..9}\", \"\", \"echo {01..100}\", \"\", \"echo {1..10..2} # Increment by 2.\", \"```\", \"\"], \"String Lists\": [\"\", \"```shell\", \"echo {apples,oranges,pears,grapes}\", \"\", \"rm -rf ~/Downloads/{Movies,Music,ISOS}\", \"```\", \"\", \"\", \"\", \"\", \"\"]}, \"CONDITIONAL EXPRESSIONS\": {\"File Conditionals\": [\"\", \"| Expression | Value  | What does it do? |\", \"| ---------- | ------ | ---------------- |\", \"| `-a`       | `file` | If file exists.\", \"| `-b`       | `file` | If file exists and is a block special file.\", \"| `-c`       | `file` | If file exists and is a character special file.\", \"| `-d`       | `file` | If file exists and is a directory.\", \"| `-e`       | `file` | If file exists.\", \"| `-f`       | `file` | If file exists and is a regular file.\", \"| `-g`       | `file` | If file exists and its set-group-id bit is set.\", \"| `-h`       | `file` | If file exists and is a symbolic link.\", \"| `-k`       | `file` | If file exists and its sticky-bit is set\", \"| `-p`       | `file` | If file exists and is a named pipe (*FIFO*).\", \"| `-r`       | `file` | If file exists and is readable.\", \"| `-s`       | `file` | If file exists and its size is greater than zero.\", \"| `-t`       | `fd`   | If file descriptor is open and refers to a terminal.\", \"| `-u`       | `file` | If file exists and its set-user-id bit is set.\", \"| `-w`       | `file` | If file exists and is writable.\", \"| `-x`       | `file` | If file exists and is executable.\", \"| `-G`       | `file` | If file exists and is owned by the effective group ID.\", \"| `-L`       | `file` | If file exists and is a symbolic link.\", \"| `-N`       | `file` | If file exists and has been modified since last read.\", \"| `-O`       | `file` | If file exists and is owned by the effective user ID.\", \"| `-S`       | `file` | If file exists and is a socket.\", \"\"], \"File Comparisons\": [\"\", \"| Expression | What does it do? |\", \"| ---------- | ---------------- |\", \"| `file -ef file2` | If both files refer to the same inode and device numbers.\", \"| `file -nt file2` | If `file` is newer than `file2` (*uses modification time*) or `file` exists and `file2` does not.\", \"| `file -ot file2` | If `file` is older than `file2` (*uses modification time*) or `file2` exists and `file` does not.\", \"\"], \"Variable Conditionals\": [\"\", \"| Expression | Value | What does it do? |\", \"| ---------- | ----- | ---------------- |\", \"| `-o`       | `opt` | If shell option is enabled.\", \"| `-v`       | `var` | If variable has a value assigned.\", \"| `-R`       | `var` | If variable is a name reference.\", \"| `-z`       | `var` | If the length of string is zero.\", \"| `-n`       | `var` | If the length of string is non-zero.\", \"\"], \"Variable Comparisons\": [\"\", \"| Expression | What does it do? |\", \"| ---------- | ---------------- |\", \"| `var = var2` | Equal to.\", \"| `var == var2` | Equal to (*synonym for `=`*).\", \"| `var != var2` | Not equal to.\", \"| `var < var2` | Less than (*in ASCII alphabetical order.*)\", \"| `var > var2` | Greater than (*in ASCII alphabetical order.*)\", \"\", \"\", \"\", \"\"]}, \"ARITHMETIC OPERATORS\": {\"Assignment\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `=`       | Initialize or change the value of a variable.\", \"\"], \"Arithmetic\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `+` | Addition\", \"| `-` | Subtraction\", \"| `*` | Multiplication\", \"| `/` | Division\", \"| `**` | Exponentiation\", \"| `%` | Modulo\", \"| `+=` | Plus-Equal (*Increment a variable.*)\", \"| `-=` | Minus-Equal (*Decrement a variable.*)\", \"| `*=` | Times-Equal (*Multiply a variable.*)\", \"| `/=` | Slash-Equal (*Divide a variable.*)\", \"| `%=` | Mod-Equal (*Remainder of dividing a variable.*)\", \"\"], \"Bitwise\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `<<` | Bitwise Left Shift\", \"| `<<=` | Left-Shift-Equal\", \"| `>>` | Bitwise Right Shift\", \"| `>>=` | Right-Shift-Equal\", \"| `&` | Bitwise AND\", \"| `&=` | Bitwise AND-Equal\", \"| `\\\\|` | Bitwise OR\", \"| `\\\\|=` | Bitwise OR-Equal\", \"| `~` | Bitwise NOT\", \"| `^` | Bitwise XOR\", \"| `^=` | Bitwise XOR-Equal\", \"\"], \"Logical\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `!` | NOT\", \"| `&&` | AND\", \"| `\\\\|\\\\|` | OR\", \"\"], \"Miscellaneous\": [\"\", \"| Operators | What does it do? | Example |\", \"| --------- | ---------------- | ------- |\", \"| `,` | Comma Separator | `((a=1,b=2,c=3))`\", \"\", \"\", \"\", \"\"]}, \"ARITHMETIC\": {\"Simpler syntax to set variables\": [\"\", \"```shell\", \"((var=1+2))\", \"\", \"((var++))\", \"((var--))\", \"((var+=1))\", \"((var-=1))\", \"\", \"((var=var2*arr[2]))\", \"```\", \"\"], \"Ternary Tests\": [\"\", \"```shell\", \"((var=var2>var?var2:var))\", \"```\", \"\", \"\", \"\", \"Traps allow a script to execute code on various signals. In [pxltrm](https://github.com/dylanaraps/pxltrm) (*a pixel art editor written in bash*)  traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.\", \"\", \"Traps should be added near the start of scripts so any early errors are also caught.\", \"\", \"**NOTE:** For a full list of signals, see `trap -l`.\", \"\", \"\"]}, \"TRAPS\": {\"Do something on script exit\": [\"\", \"```shell\", \"trap 'printf \\\\\\\\e[2J\\\\\\\\e[H\\\\\\\\e[m' EXIT\", \"```\", \"\"], \"Ignore terminal interrupt (CTRL+C, SIGINT)\": [\"\", \"```shell\", \"trap '' INT\", \"```\", \"\"], \"React to window resize\": [\"\", \"```shell\", \"trap 'code_here' SIGWINCH\", \"```\", \"\"], \"Do something before every command\": [\"\", \"```shell\", \"trap 'code_here' DEBUG\", \"```\", \"\"], \"Do something when a shell function or a sourced file finishes executing\": [\"\", \"```shell\", \"trap 'code_here' RETURN\", \"```\", \"\", \"\", \"\"]}, \"PERFORMANCE\": {\"Disable Unicode\": [\"\", \"If unicode is not required, it can be disabled for a performance increase. Results may vary however there have been noticeable improvements in [neofetch](https://github.com/dylanaraps/neofetch) and other programs.\", \"\", \"```shell\", \"LC_ALL=C\", \"LANG=C\", \"```\", \"\", \"\", \"\"]}, \"OBSOLETE SYNTAX\": {\"Shebang\": [\"\", \"Use `#!/usr/bin/env bash` instead of `#!/bin/bash`.\", \"\", \"- The former searches the user's `PATH` to find the `bash` binary.\", \"- The latter assumes it is always installed to `/bin/` which can cause issues.\", \"\", \"**NOTE**: There are times when one may have a good reason for using `#!/bin/bash` or another direct path to the binary.\", \"\", \"\", \"```shell\", \"\", \"    #!/usr/bin/env bash\", \"\", \"\", \"    #!/bin/bash\", \"```\", \"\"], \"Command Substitution\": [\"\", \"Use `$()` instead of `` ` ` ``.\", \"\", \"```shell\", \"var=\\\"$(command)\\\"\", \"\", \"var=`command`\", \"\", \"var=\\\"$(command \\\"$(command)\\\")\\\"\", \"```\", \"\"], \"Function Declaration\": [\"\", \"Do not use the `function` keyword, it reduces compatibility with older versions of `bash`.\", \"\", \"```shell\", \"do_something() {\", \"    # ...\", \"}\", \"\", \"function do_something() {\", \"    # ...\", \"}\", \"```\", \"\", \"\", \"\"]}, \"INTERNAL VARIABLES\": {\"Get the location to the `bash` binary\": [\"\", \"```shell\", \"\\\"$BASH\\\"\", \"```\", \"\"], \"Get the version of the current running `bash` process\": [\"\", \"```shell\", \"\\\"$BASH_VERSION\\\"\", \"\", \"\\\"${BASH_VERSINFO[@]}\\\"\", \"```\", \"\"], \"Open the user's preferred text editor\": [\"\", \"```shell\", \"\\\"$EDITOR\\\" \\\"$file\\\"\", \"\", \"\\\"${EDITOR:-vi}\\\" \\\"$file\\\"\", \"```\", \"\"], \"Get the name of the current function\": [\"\", \"```shell\", \"\\\"${FUNCNAME[0]}\\\"\", \"\", \"\\\"${FUNCNAME[1]}\\\"\", \"\", \"\\\"${FUNCNAME[2]}\\\"\", \"\\\"${FUNCNAME[3]}\\\"\", \"\", \"\\\"${FUNCNAME[@]}\\\"\", \"```\", \"\"], \"Get the host-name of the system\": [\"\", \"```shell\", \"\\\"$HOSTNAME\\\"\", \"\", \"\\\"${HOSTNAME:-$(hostname)}\\\"\", \"```\", \"\"], \"Get the architecture of the Operating System\": [\"\", \"```shell\", \"\\\"$HOSTTYPE\\\"\", \"```\", \"\"], \"Get the name of the Operating System / Kernel\": [\"\", \"This can be used to add conditional support for different Operating\", \"Systems without needing to call `uname`.\", \"\", \"```shell\", \"\\\"$OSTYPE\\\"\", \"```\", \"\"], \"Get the current working directory\": [\"\", \"This is an alternative to the `pwd` built-in.\", \"\", \"```shell\", \"\\\"$PWD\\\"\", \"```\", \"\"], \"Get the number of seconds the script has been running\": [\"\", \"```shell\", \"\\\"$SECONDS\\\"\", \"```\", \"\"], \"Get a pseudorandom integer\": [\"\", \"Each time `$RANDOM` is used, a different integer between `0` and `32767` is returned. This variable should not be used for anything related to security (*this includes encryption keys etc*).\", \"\", \"\", \"```shell\", \"\\\"$RANDOM\\\"\", \"```\", \"\", \"\", \"\"]}, \"INFORMATION ABOUT THE TERMINAL\": {\"Get the terminal size in lines and columns (*from a script*)\": [\"\", \"This is handy when writing scripts in pure bash and `stty`/`tput` can\\u2019t be\", \"called.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"get_term_size() {\", \"    # Usage: get_term_size\", \"\", \"    # (:;:) is a micro sleep to ensure the variables are\", \"    # exported immediately.\", \"    shopt -s checkwinsize; (:;:)\", \"    printf '%s\\\\n' \\\"$LINES $COLUMNS\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ get_term_size\", \"15 55\", \"```\", \"\"], \"Get the terminal size in pixels\": [\"\", \"**CAVEAT**: This does not work in some terminal emulators.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"get_window_size() {\", \"    # Usage: get_window_size\", \"    printf '%b' \\\"${TMUX:+\\\\\\\\ePtmux;\\\\\\\\e}\\\\\\\\e[14t${TMUX:+\\\\\\\\e\\\\\\\\\\\\\\\\}\\\"\", \"    IFS=';t' read -d t -t 0.05 -sra term_size\", \"    printf '%s\\\\n' \\\"${term_size[1]}x${term_size[2]}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ get_window_size\", \"1200x800\", \"\", \"$ get_window_size\", \"x\", \"```\", \"\"], \"Get the current cursor position\": [\"\", \"This is useful when creating a TUI in pure bash.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"get_cursor_pos() {\", \"    # Usage: get_cursor_pos\", \"    IFS='[;' read -p $'\\\\e[6n' -d R -rs _ y x _\", \"    printf '%s\\\\n' \\\"$x $y\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ get_cursor_pos\", \"1 8\", \"```\", \"\", \"\", \"\"]}, \"CONVERSION\": {\"Convert a hex color to RGB\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"hex_to_rgb() {\", \"    # Usage: hex_to_rgb \\\"#FFFFFF\\\"\", \"    #        hex_to_rgb \\\"000000\\\"\", \"    : \\\"${1/\\\\#}\\\"\", \"    ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))\", \"    printf '%s\\\\n' \\\"$r $g $b\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ hex_to_rgb \\\"#FFFFFF\\\"\", \"255 255 255\", \"```\", \"\", \"\"], \"Convert an RGB color to hex\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"rgb_to_hex() {\", \"    # Usage: rgb_to_hex \\\"r\\\" \\\"g\\\" \\\"b\\\"\", \"    printf '#%02x%02x%02x\\\\n' \\\"$1\\\" \\\"$2\\\" \\\"$3\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ rgb_to_hex \\\"255\\\" \\\"255\\\" \\\"255\\\"\", \"#FFFFFF\", \"```\", \"\", \"\", \"\"]}, \"CODE GOLF\": {\"Shorter `for` loop syntax\": [\"\", \"```shell\", \"for((;i++<10;)){ echo \\\"$i\\\";}\", \"\", \"for i in {1..10};{ echo \\\"$i\\\";}\", \"\", \"for i in {1..10}; do echo \\\"$i\\\"; done\", \"\", \"for((i=0;i<=10;i++)); do echo \\\"$i\\\"; done\", \"```\", \"\"], \"Shorter infinite loops\": [\"\", \"```shell\", \"while :; do echo hi; done\", \"\", \"for((;;)){ echo hi;}\", \"```\", \"\"], \"Shorter function declaration\": [\"\", \"```shell\", \"f(){ echo hi;}\", \"\", \"f()(echo hi)\", \"\", \"f()(($1))\", \"\", \"f()if true; then echo \\\"$1\\\"; fi\", \"f()for i in \\\"$@\\\"; do echo \\\"$i\\\"; done\", \"```\", \"\"], \"Shorter `if` syntax\": [\"\", \"```shell\", \"[[ $var == hello ]] && echo hi || echo bye\", \"[[ $var == hello ]] && { echo hi; echo there; } || echo bye\", \"\", \"[[ $var == hello ]] &&\", \"    echo hi\", \"\", \"[[ $var == hello ]] && {\", \"    echo hi\", \"    # ...\", \"}\", \"```\", \"\"], \"Simpler `case` statement to set variable\": [\"\", \"The `:` built-in can be used to avoid repeating `variable=` in a case statement. The `$_` variable stores the last argument of the last command. `:` always succeeds so it can be used to store the variable value.\", \"\", \"```shell\", \"case \\\"$OSTYPE\\\" in\", \"    \\\"darwin\\\"*)\", \"        : \\\"MacOS\\\"\", \"    ;;\", \"\", \"    \\\"linux\\\"*)\", \"        : \\\"Linux\\\"\", \"    ;;\", \"\", \"    *\\\"bsd\\\"* | \\\"dragonfly\\\" | \\\"bitrig\\\")\", \"        : \\\"BSD\\\"\", \"    ;;\", \"\", \"    \\\"cygwin\\\" | \\\"msys\\\" | \\\"win32\\\")\", \"        : \\\"Windows\\\"\", \"    ;;\", \"\", \"    *)\", \"        printf '%s\\\\n' \\\"Unknown OS detected, aborting...\\\" >&2\", \"        exit 1\", \"    ;;\", \"esac\", \"\", \"os=\\\"$_\\\"\", \"```\", \"\", \"\", \"\"]}, \"OTHER\": {\"Use `read` as an alternative to the `sleep` command\": [\"\", \"Surprisingly, `sleep` is an external command and not a `bash` built-in.\", \"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"read_sleep() {\", \"    # Usage: read_sleep 1\", \"    #        read_sleep 0.2\", \"    read -rt \\\"$1\\\" <> <(:) || :\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"read_sleep 1\", \"read_sleep 0.1\", \"read_sleep 30\", \"```\", \"\", \"For performance-critical situations, where it is not economic to open and close an excessive number of file descriptors, the allocation of a file descriptor may be done only once for all invocations of `read`:\", \"\", \"(See the generic original implementation at https://blog.dhampir.no/content/sleeping-without-a-subprocess-in-bash-and-how-to-sleep-forever)\", \"\", \"```shell\", \"exec {sleep_fd}<> <(:)\", \"while some_quick_test; do\", \"    # equivalent of sleep 0.001\", \"    read -t 0.001 -u $sleep_fd\", \"done\", \"```\", \"\"], \"Check if a program is in the user's PATH\": [\"\", \"```shell\", \"type -p executable_name &>/dev/null\", \"hash executable_name &>/dev/null\", \"command -v executable_name &>/dev/null\", \"\", \"if type -p executable_name &>/dev/null; then\", \"    # Program is in PATH.\", \"fi\", \"\", \"if ! type -p executable_name &>/dev/null; then\", \"    # Program is not in PATH.\", \"fi\", \"\", \"if ! type -p convert &>/dev/null; then\", \"    printf '%s\\\\n' \\\"error: convert is not installed, exiting...\\\"\", \"    exit 1\", \"fi\", \"```\", \"\"], \"Get the current date using `strftime`\": [\"\", \"Bash\\u2019s `printf` has a built-in method of getting the date which can be used in place of the `date` command.\", \"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"date() {\", \"    # Usage: date \\\"format\\\"\", \"    # See: 'man strftime' for format.\", \"    printf \\\"%($1)T\\\\\\\\n\\\" \\\"-1\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ date \\\"%a %d %b  - %l:%M %p\\\"\", \"Fri 15 Jun  - 10:00 AM\", \"\", \"$ printf '%(%a %d %b  - %l:%M %p)T\\\\n' \\\"-1\\\"\", \"Fri 15 Jun  - 10:00 AM\", \"\", \"$ printf -v date '%(%a %d %b  - %l:%M %p)T\\\\n' '-1'\", \"$ printf '%s\\\\n' \\\"$date\\\"\", \"Fri 15 Jun  - 10:00 AM\", \"```\", \"\"], \"Get the username of the current user\": [\"\", \"**CAVEAT:** Requires `bash` 4.4+\", \"\", \"```shell\", \"$ : \\\\\\\\u\", \"$ printf '%s\\\\n' \\\"${_@P}\\\"\", \"black\", \"```\", \"\"], \"Generate a UUID V4\": [\"\", \"**CAVEAT**: The generated value is not cryptographically secure.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"uuid() {\", \"    # Usage: uuid\", \"    C=\\\"89ab\\\"\", \"\", \"    for ((N=0;N<16;++N)); do\", \"        B=\\\"$((RANDOM%256))\\\"\", \"\", \"        case \\\"$N\\\" in\", \"            6)  printf '4%x' \\\"$((B%16))\\\" ;;\", \"            8)  printf '%c%x' \\\"${C:$RANDOM%${#C}:1}\\\" \\\"$((B%16))\\\" ;;\", \"\", \"            3|5|7|9)\", \"                printf '%02x-' \\\"$B\\\"\", \"            ;;\", \"\", \"            *)\", \"                printf '%02x' \\\"$B\\\"\", \"            ;;\", \"        esac\", \"    done\", \"\", \"    printf '\\\\n'\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ uuid\", \"d5b6c731-1310-4c24-9fe3-55d556d44374\", \"```\", \"\"], \"Progress bars\": [\"\", \"This is a simple way of drawing progress bars without needing a for loop\", \"in the function itself.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"bar() {\", \"    # Usage: bar 1 10\", \"    #            ^----- Elapsed Percentage (0-100).\", \"    #               ^-- Total length in chars.\", \"    ((elapsed=$1*$2/100))\", \"\", \"    # Create the bar with spaces.\", \"    printf -v prog  \\\"%${elapsed}s\\\"\", \"    printf -v total \\\"%$(($2-elapsed))s\\\"\", \"\", \"    printf '%s\\\\r' \\\"[${prog// /-}${total}]\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"for ((i=0;i<=100;i++)); do\", \"    # Pure bash micro sleeps (for the example).\", \"    (:;:) && (:;:) && (:;:) && (:;:) && (:;:)\", \"\", \"    # Print the bar.\", \"    bar \\\"$i\\\" \\\"10\\\"\", \"done\", \"\", \"printf '\\\\n'\", \"```\", \"\"], \"Get the list of functions in a script\": [\"\", \"```sh\", \"get_functions() {\", \"    # Usage: get_functions\", \"    IFS=$'\\\\n' read -d \\\"\\\" -ra functions < <(declare -F)\", \"    printf '%s\\\\n' \\\"${functions[@]//declare -f }\\\"\", \"}\", \"```\", \"\"], \"Bypass shell aliases\": [\"\", \"```shell\", \"ls\", \"\", \"\\\\ls\", \"```\", \"\"], \"Bypass shell functions\": [\"\", \"```shell\", \"ls\", \"\", \"command ls\", \"```\", \"\"], \"Run a command in the background\": [\"\", \"This will run the given command and keep it running, even after the terminal or SSH connection is terminated. All output is ignored.\", \"\", \"```sh\", \"bkr() {\", \"    (nohup \\\"$@\\\" &>/dev/null &)\", \"}\", \"\", \"bkr ./some_script.sh # some_script.sh is now running in the background\", \"```\", \"\"], \"Capture the return value of a function without command substitution\": [\"\", \"**CAVEAT:** Requires `bash` 4+\", \"\", \"This uses local namerefs to avoid using `var=$(some_func)` style command substitution for function output capture.\", \"\", \"```sh\", \"to_upper() {\", \"  local -n ptr=${1}\", \"\", \"  ptr=${ptr^^}\", \"}\", \"\", \"foo=\\\"bar\\\"\", \"to_upper foo\", \"printf \\\"%s\\\\n\\\" \\\"${foo}\\\" # BAR\", \"```\", \"\", \"\"]}}}, {\"name\": \"Pure sh Bible\", \"content\": {\"STRINGS\": {\"Strip pattern from start of string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"lstrip() {\", \"    # Usage: lstrip \\\"string\\\" \\\"pattern\\\"\", \"    printf '%s\\\\n' \\\"${1##$2}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ lstrip \\\"The Quick Brown Fox\\\" \\\"The \\\"\", \"Quick Brown Fox\", \"```\", \"\"], \"Strip pattern from end of string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"rstrip() {\", \"    # Usage: rstrip \\\"string\\\" \\\"pattern\\\"\", \"    printf '%s\\\\n' \\\"${1%%$2}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ rstrip \\\"The Quick Brown Fox\\\" \\\" Fox\\\"\", \"The Quick Brown\", \"```\", \"\"], \"Trim leading and trailing white-space from string\": [\"\", \"This is an alternative to `sed`, `awk`, `perl` and other tools. The\", \"function below works by finding all leading and trailing white-space and\", \"removing it from the start and end of the string.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"trim_string() {\", \"    # Usage: trim_string \\\"   example   string    \\\"\", \"\", \"    # Remove all leading white-space.\", \"    # '${1%%[![:space:]]*}': Strip everything but leading white-space.\", \"    # '${1#${XXX}}': Remove the white-space from the start of the string.\", \"    trim=${1#${1%%[![:space:]]*}}\", \"\", \"    # Remove all trailing white-space.\", \"    # '${trim##*[![:space:]]}': Strip everything but trailing white-space.\", \"    # '${trim#${XXX}}': Remove the white-space from the end of the string.\", \"    trim=${trim%${trim##*[![:space:]]}}\", \"\", \"    printf '%s\\\\n' \\\"$trim\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ trim_string \\\"    Hello,  World    \\\"\", \"Hello,  World\", \"\", \"$ name=\\\"   John Black  \\\"\", \"$ trim_string \\\"$name\\\"\", \"John Black\", \"```\", \"\"], \"Trim all white-space from string and truncate spaces\": [\"\", \"This is an alternative to `sed`, `awk`, `perl` and other tools. The\", \"function below works by abusing word splitting to create a new string\", \"without leading/trailing white-space and with truncated spaces.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"trim_all() {\", \"    # Usage: trim_all \\\"   example   string    \\\"\", \"\", \"    # Disable globbing to make the word-splitting below safe.\", \"    set -f\", \"\", \"    # Set the argument list to the word-splitted string.\", \"    # This removes all leading/trailing white-space and reduces\", \"    # all instances of multiple spaces to a single (\\\"  \\\" -> \\\" \\\").\", \"    set -- $*\", \"\", \"    # Print the argument list as a string.\", \"    printf '%s\\\\n' \\\"$*\\\"\", \"\", \"    # Re-enable globbing.\", \"    set +f\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ trim_all \\\"    Hello,    World    \\\"\", \"Hello, World\", \"\", \"$ name=\\\"   John   Black  is     my    name.    \\\"\", \"$ trim_all \\\"$name\\\"\", \"John Black is my name.\", \"```\", \"\"], \"Check if string contains a sub-string\": [\"\", \"**Using a case statement:**\", \"\", \"```shell\", \"case $var in\", \"    *sub_string1*)\", \"        # Do stuff\", \"    ;;\", \"\", \"    *sub_string2*)\", \"        # Do other stuff\", \"    ;;\", \"\", \"    *)\", \"        # Else\", \"    ;;\", \"esac\", \"```\", \"\"], \"Check if string starts with sub-string\": [\"\", \"**Using a case statement:**\", \"\", \"```shell\", \"case $var in\", \"    sub_string1*)\", \"        # Do stuff\", \"    ;;\", \"\", \"    sub_string2*)\", \"        # Do other stuff\", \"    ;;\", \"\", \"    *)\", \"        # Else\", \"    ;;\", \"esac\", \"```\", \"\"], \"Check if string ends with sub-string\": [\"\", \"**Using a case statement:**\", \"\", \"```shell\", \"case $var in\", \"    *sub_string1)\", \"        # Do stuff\", \"    ;;\", \"\", \"    *sub_string2)\", \"        # Do other stuff\", \"    ;;\", \"\", \"    *)\", \"        # Else\", \"    ;;\", \"esac\", \"```\", \"\"], \"Split a string on a delimiter\": [\"\", \"This is an alternative to `cut`, `awk` and other tools.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"split() {\", \"    # Disable globbing.\", \"    # This ensures that the word-splitting is safe.\", \"    set -f\", \"\", \"    # Store the current value of 'IFS' so we\", \"    # can restore it later.\", \"    old_ifs=$IFS\", \"\", \"    # Change the field separator to what we're\", \"    # splitting on.\", \"    IFS=$2\", \"\", \"    # Create an argument list splitting at each\", \"    # occurance of '$2'.\", \"    #\", \"    # This is safe to disable as it just warns against\", \"    # word-splitting which is the behavior we expect.\", \"    # shellcheck disable=2086\", \"    set -- $1\", \"\", \"    # Print each list value on its own line.\", \"    printf '%s\\\\n' \\\"$@\\\"\", \"\", \"    # Restore the value of 'IFS'.\", \"    IFS=$old_ifs\", \"\", \"    # Re-enable globbing.\", \"    set +f\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ split \\\"apples,oranges,pears,grapes\\\" \\\",\\\"\", \"apples\", \"oranges\", \"pears\", \"grapes\", \"\", \"$ split \\\"1, 2, 3, 4, 5\\\" \\\", \\\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"```\", \"\"], \"Trim quotes from a string\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"trim_quotes() {\", \"    # Usage: trim_quotes \\\"string\\\"\", \"\", \"    # Disable globbing.\", \"    # This makes the word-splitting below safe.\", \"    set -f\", \"\", \"    # Store the current value of 'IFS' so we\", \"    # can restore it later.\", \"    old_ifs=$IFS\", \"\", \"    # Set 'IFS' to [\\\"'].\", \"    IFS=\\\\\\\"\\\\'\", \"\", \"    # Create an argument list, splitting the\", \"    # string at [\\\"'].\", \"    #\", \"    # Disable this shellcheck error as it only\", \"    # warns about word-splitting which we expect.\", \"    # shellcheck disable=2086\", \"    set -- $1\", \"\", \"    # Set 'IFS' to blank to remove spaces left\", \"    # by the removal of [\\\"'].\", \"    IFS=\", \"\", \"    # Print the quote-less string.\", \"    printf '%s\\\\n' \\\"$*\\\"\", \"\", \"    # Restore the value of 'IFS'.\", \"    IFS=$old_ifs\", \"\", \"    # Re-enable globbing.\", \"    set +f\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ var=\\\"'Hello', \\\\\\\"World\\\\\\\"\\\"\", \"$ trim_quotes \\\"$var\\\"\", \"Hello, World\", \"```\", \"\", \"\"]}, \"FILES\": {\"Parsing a `key=val` file.\": [\"\", \"This could be used to parse a simple `key=value` configuration file.\", \"\", \"```shell\", \"while IFS='=' read -r key val; do\", \"    # Skip over lines containing comments.\", \"    # (Lines starting with '#').\", \"    [ \\\"${key##\\\\#*}\\\" ] || continue\", \"\", \"    # '$key' stores the key.\", \"    # '$val' stores the value.\", \"    printf '%s: %s\\\\n' \\\"$key\\\" \\\"$val\\\"\", \"\", \"    # Alternatively replacing 'printf' with the following\", \"    # populates variables called '$key' with the value of '$val'.\", \"    #\", \"    # NOTE: I would extend this with a check to ensure 'key' is\", \"    #       a valid variable name.\", \"    # export \\\"$key=$val\\\"\", \"    #\", \"    # Example with error handling:\", \"    # export \\\"$key=$val\\\" 2>/dev/null ||\", \"    #     printf 'warning %s is not a valid variable name\\\\n' \\\"$key\\\"\", \"done < \\\"file\\\"\", \"```\", \"\"], \"Get the first N lines of a file\": [\"\", \"Alternative to the `head` command.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"head() {\", \"    # Usage: head \\\"n\\\" \\\"file\\\"\", \"    while IFS= read -r line; do\", \"        printf '%s\\\\n' \\\"$line\\\"\", \"        i=$((i+1))\", \"        [ \\\"$i\\\" = \\\"$1\\\" ] && return\", \"    done < \\\"$2\\\"\", \"\", \"    # 'read' used in a loop will skip over\", \"    # the last line of a file if it does not contain\", \"    # a newline and instead contains EOF.\", \"    #\", \"    # The final line iteration is skipped as 'read'\", \"    # exits with '1' when it hits EOF. 'read' however,\", \"    # still populates the variable.\", \"    #\", \"    # This ensures that the final line is always printed\", \"    # if applicable.\", \"    [ -n \\\"$line\\\" ] && printf %s \\\"$line\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ head 2 ~/.bashrc\", \"PS1='\\u279c '\", \"\", \"$ head 1 ~/.bashrc\", \"```\", \"\"], \"Get the number of lines in a file\": [\"\", \"Alternative to `wc -l`.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"lines() {\", \"    # Usage: lines \\\"file\\\"\", \"\", \"    # '|| [ -n \\\"$line\\\" ]': This ensures that lines\", \"    # ending with EOL instead of a newline are still\", \"    # operated on in the loop.\", \"    #\", \"    # 'read' exits with '1' when it sees EOL and\", \"    # without the added test, the line isn't sent\", \"    # to the loop.\", \"    while IFS= read -r line || [ -n \\\"$line\\\" ]; do\", \"        lines=$((lines+1))\", \"    done < \\\"$1\\\"\", \"\", \"    printf '%s\\\\n' \\\"$lines\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ lines ~/.bashrc\", \"48\", \"```\", \"\"], \"Count files or directories in directory\": [\"\", \"This works by passing the output of the glob to the function and then counting the number of arguments.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"count() {\", \"    # Usage: count /path/to/dir/*\", \"    #        count /path/to/dir/*/\", \"    [ -e \\\"$1\\\" ] \\\\\", \"        && printf '%s\\\\n' \\\"$#\\\" \\\\\", \"        || printf '%s\\\\n' 0\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ count ~/Downloads/*\", \"232\", \"\", \"$ count ~/Downloads/*/\", \"45\", \"\", \"$ count ~/Pictures/*.jpg\", \"64\", \"```\", \"\"], \"Create an empty file\": [\"\", \"Alternative to `touch`.\", \"\", \"```shell\", \":>file\", \"\", \">file\", \"```\", \"\", \"\"]}, \"FILE PATHS\": {\"Get the directory name of a file path\": [\"\", \"Alternative to the `dirname` command.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"dirname() {\", \"    # Usage: dirname \\\"path\\\"\", \"\", \"    # If '$1' is empty set 'dir' to '.', else '$1'.\", \"    dir=${1:-.}\", \"\", \"    # Strip all trailing forward-slashes '/' from\", \"    # the end of the string.\", \"    #\", \"    # \\\"${dir##*[!/]}\\\": Remove all non-forward-slashes\", \"    # from the start of the string, leaving us with only\", \"    # the trailing slashes.\", \"    # \\\"${dir%%\\\"${}\\\"}\\\": Remove the result of the above\", \"    # substitution (a string of forward slashes) from the\", \"    # end of the original string.\", \"    dir=${dir%%\\\"${dir##*[!/]}\\\"}\", \"\", \"    # If the variable *does not* contain any forward slashes\", \"    # set its value to '.'.\", \"    [ \\\"${dir##*/*}\\\" ] && dir=.\", \"\", \"    # Remove everything *after* the last forward-slash '/'.\", \"    dir=${dir%/*}\", \"\", \"    # Again, strip all trailing forward-slashes '/' from\", \"    # the end of the string (see above).\", \"    dir=${dir%%\\\"${dir##*[!/]}\\\"}\", \"\", \"    # Print the resulting string and if it is empty,\", \"    # print '/'.\", \"    printf '%s\\\\n' \\\"${dir:-/}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ dirname ~/Pictures/Wallpapers/1.jpg\", \"/home/black/Pictures/Wallpapers/\", \"\", \"$ dirname ~/Pictures/Downloads/\", \"/home/black/Pictures/\", \"```\", \"\"], \"Get the base-name of a file path\": [\"\", \"Alternative to the `basename` command.\", \"\", \"**Example Function:**\", \"\", \"```sh\", \"basename() {\", \"    # Usage: basename \\\"path\\\" [\\\"suffix\\\"]\", \"\", \"    # Strip all trailing forward-slashes '/' from\", \"    # the end of the string.\", \"    #\", \"    # \\\"${1##*[!/]}\\\": Remove all non-forward-slashes\", \"    # from the start of the string, leaving us with only\", \"    # the trailing slashes.\", \"    # \\\"${1%%\\\"${}\\\"}:  Remove the result of the above\", \"    # substitution (a string of forward slashes) from the\", \"    # end of the original string.\", \"    dir=${1%${1##*[!/]}}\", \"\", \"    # Remove everything before the final forward-slash '/'.\", \"    dir=${dir##*/}\", \"\", \"    # If a suffix was passed to the function, remove it from\", \"    # the end of the resulting string.\", \"    dir=${dir%\\\"$2\\\"}\", \"\", \"    # Print the resulting string and if it is empty,\", \"    # print '/'.\", \"    printf '%s\\\\n' \\\"${dir:-/}\\\"\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ basename ~/Pictures/Wallpapers/1.jpg\", \"1.jpg\", \"\", \"$ basename ~/Pictures/Wallpapers/1.jpg .jpg\", \"1\", \"\", \"$ basename ~/Pictures/Downloads/\", \"Downloads\", \"```\", \"\", \"\"]}, \"LOOPS\": {\"Loop over a (*small*) range of numbers\": [\"\", \"Alternative to `seq` and only suitable for small and static number ranges. The number list can also be replaced with a list of words, variables etc.\", \"\", \"```shell\", \"for i in 0 1 2 3 4 5 6 7 8 9 10; do\", \"    printf '%s\\\\n' \\\"$i\\\"\", \"done\", \"```\", \"\"], \"Loop over a variable range of numbers\": [\"\", \"Alternative to `seq`.\", \"\", \"```shell\", \"start=0\", \"end=50\", \"\", \"while [ \\\"$start\\\" -le \\\"$end\\\" ]; do\", \"    printf '%s\\\\n' \\\"$start\\\"\", \"    start=$((start+1))\", \"done\", \"```\", \"\"], \"Loop over the contents of a file\": [\"\", \"```shell\", \"while IFS= read -r line || [ -n \\\"$line\\\" ]; do\", \"    printf '%s\\\\n' \\\"$line\\\"\", \"done < \\\"file\\\"\", \"```\", \"\"], \"Loop over files and directories\": [\"\", \"Don\\u2019t use `ls`.\", \"\", \"**CAVEAT:** When the glob does not match anything (empty directory or no matching files) the variable will contain the unexpanded glob. To avoid working on unexpanded globs check the existence of the file contained in the variable using the appropriate [file conditional](#file-conditionals). Be aware that symbolic links are resolved.\", \"\", \"```shell\", \"for file in *; do\", \"    [ -e \\\"$file\\\" ] || [ -L \\\"$file\\\" ] || continue\", \"    printf '%s\\\\n' \\\"$file\\\"\", \"done\", \"\", \"for file in ~/Pictures/*.png; do\", \"    [ -f \\\"$file\\\" ] || continue\", \"    printf '%s\\\\n' \\\"$file\\\"\", \"done\", \"\", \"for dir in ~/Downloads/*/; do\", \"    [ -d \\\"$dir\\\" ] || continue\", \"    printf '%s\\\\n' \\\"$dir\\\"\", \"done\", \"```\", \"\", \"\"]}, \"VARIABLES\": {\"Name and access a variable based on another variable\": [\"\", \"```shell\", \"$ var=\\\"world\\\"\", \"$ eval \\\"hello_$var=value\\\"\", \"$ eval printf '%s\\\\n' \\\"\\\\$hello_$var\\\"\", \"value\", \"```\", \"\", \"\", \"Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using `tput` abstracts the same ANSI sequences as if printed manually. Worse still, `tput` is not actually portable. There are a number of `tput` variants each with different commands and syntaxes (*try `tput setaf 3` on a FreeBSD system*). Raw sequences are fine.\", \"\"]}, \"ESCAPE SEQUENCES\": {\"Text Colors\": [\"\", \"**NOTE:** Sequences requiring RGB values only work in True-Color Terminal Emulators.\", \"\", \"| Sequence | What does it do? | Value |\", \"| -------- | ---------------- | ----- |\", \"| `\\\\033[38;5;<NUM>m` | Set text foreground color. | `0-255`\", \"| `\\\\033[48;5;<NUM>m` | Set text background color. | `0-255`\", \"| `\\\\033[38;2;<R>;<G>;<B>m` | Set text foreground color to RGB color. | `R`, `G`, `B`\", \"| `\\\\033[48;2;<R>;<G>;<B>m` | Set text background color to RGB color. | `R`, `G`, `B`\", \"\"], \"Text Attributes\": [\"\", \"| Sequence | What does it do? |\", \"| -------- | ---------------- |\", \"| `\\\\033[m`  | Reset text formatting and colors.\", \"| `\\\\033[1m` | Bold text. |\", \"| `\\\\033[2m` | Faint text. |\", \"| `\\\\033[3m` | Italic text. |\", \"| `\\\\033[4m` | Underline text. |\", \"| `\\\\033[5m` | Slow blink. |\", \"| `\\\\033[7m` | Swap foreground and background colors. |\", \"| `\\\\033[8m` | Hidden text. |\", \"| `\\\\033[9m` | Strike-through text. |\", \"\", \"\"], \"Cursor Movement\": [\"\", \"| Sequence | What does it do? | Value |\", \"| -------- | ---------------- | ----- |\", \"| `\\\\033[<LINE>;<COLUMN>H` | Move cursor to absolute position. | `line`, `column`\", \"| `\\\\033[H` | Move cursor to home position (`0,0`). |\", \"| `\\\\033[<NUM>A` | Move cursor up N lines. | `num`\", \"| `\\\\033[<NUM>B` | Move cursor down N lines. | `num`\", \"| `\\\\033[<NUM>C` | Move cursor right N columns. | `num`\", \"| `\\\\033[<NUM>D` | Move cursor left N columns. | `num`\", \"| `\\\\033[s` | Save cursor position. |\", \"| `\\\\033[u` | Restore cursor position. |\", \"\", \"\"], \"Erasing Text\": [\"\", \"| Sequence | What does it do? |\", \"| -------- | ---------------- |\", \"| `\\\\033[K` | Erase from cursor position to end of line.\", \"| `\\\\033[1K` | Erase from cursor position to start of line.\", \"| `\\\\033[2K` | Erase the entire current line.\", \"| `\\\\033[J` | Erase from the current line to the bottom of the screen.\", \"| `\\\\033[1J` | Erase from the current line to the top of the screen.\", \"| `\\\\033[2J` | Clear the screen.\", \"| `\\\\033[2J\\\\033[H` | Clear the screen and move cursor to `0,0`.\", \"\", \"\", \"\"]}, \"PARAMETER EXPANSION\": {\"Prefix and Suffix Deletion\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${VAR#PATTERN}` | Remove shortest match of pattern from start of string. |\", \"| `${VAR##PATTERN}` | Remove longest match of pattern from start of string. |\", \"| `${VAR%PATTERN}` | Remove shortest match of pattern from end of string. |\", \"| `${VAR%%PATTERN}` | Remove longest match of pattern from end of string. |\", \"\"], \"Length\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${#VAR}` | Length of var in characters.\", \"\"], \"Default Value\": [\"\", \"| Parameter | What does it do? |\", \"| --------- | ---------------- |\", \"| `${VAR:-STRING}` | If `VAR` is empty or unset, use `STRING` as its value.\", \"| `${VAR-STRING}` | If `VAR` is unset, use `STRING` as its value.\", \"| `${VAR:=STRING}` | If `VAR` is empty or unset, set the value of `VAR` to `STRING`.\", \"| `${VAR=STRING}` | If `VAR` is unset, set the value of `VAR` to `STRING`.\", \"| `${VAR:+STRING}` | If `VAR` is not empty, use `STRING` as its value.\", \"| `${VAR+STRING}` | If `VAR` is set, use `STRING` as its value.\", \"| `${VAR:?STRING}` | Display an error if empty or unset.\", \"| `${VAR?STRING}` | Display an error if unset.\", \"\", \"\", \"\", \"For use in `[ ]` `if [ ]; then` and `test`.\", \"\"]}, \"CONDITIONAL EXPRESSIONS\": {\"File Conditionals\": [\"\", \"| Expression | Value  | What does it do? |\", \"| ---------- | ------ | ---------------- |\", \"| `-b`       | `file` | If file exists and is a block special file.\", \"| `-c`       | `file` | If file exists and is a character special file.\", \"| `-d`       | `file` | If file exists and is a directory.\", \"| `-e`       | `file` | If file exists.\", \"| `-f`       | `file` | If file exists and is a regular file.\", \"| `-g`       | `file` | If file exists and its set-group-id bit is set.\", \"| `-h`       | `file` | If file exists and is a symbolic link.\", \"| `-p`       | `file` | If file exists and is a named pipe (*FIFO*).\", \"| `-r`       | `file` | If file exists and is readable.\", \"| `-s`       | `file` | If file exists and its size is greater than zero.\", \"| `-t`       | `fd`   | If file descriptor is open and refers to a terminal.\", \"| `-u`       | `file` | If file exists and its set-user-id bit is set.\", \"| `-w`       | `file` | If file exists and is writable.\", \"| `-x`       | `file` | If file exists and is executable.\", \"| `-L`       | `file` | If file exists and is a symbolic link.\", \"| `-S`       | `file` | If file exists and is a socket.\", \"\"], \"Variable Conditionals\": [\"\", \"| Expression | Value | What does it do? |\", \"| ---------- | ----- | ---------------- |\", \"| `-z`       | `var` | If the length of string is zero.\", \"| `-n`       | `var` | If the length of string is non-zero.\", \"\"], \"Variable Comparisons\": [\"\", \"| Expression | What does it do? |\", \"| ---------- | ---------------- |\", \"| `var = var2` | Equal to.\", \"| `var != var2` | Not equal to.\", \"| `var -eq var2` | Equal to (*algebraically*).\", \"| `var -ne var2` | Not equal to (*algebraically*).\", \"| `var -gt var2` | Greater than (*algebraically*).\", \"| `var -ge var2` | Greater than or equal to (*algebraically*).\", \"| `var -lt var2` | Less than (*algebraically*).\", \"| `var -le var2` | Less than or equal to (*algebraically*).\", \"\", \"\", \"\"]}, \"ARITHMETIC OPERATORS\": {\"Assignment\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `=`       | Initialize or change the value of a variable.\", \"\"], \"Arithmetic\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `+` | Addition\", \"| `-` | Subtraction\", \"| `*` | Multiplication\", \"| `/` | Division\", \"| `%` | Modulo\", \"| `+=` | Plus-Equal (*Increment a variable.*)\", \"| `-=` | Minus-Equal (*Decrement a variable.*)\", \"| `*=` | Times-Equal (*Multiply a variable.*)\", \"| `/=` | Slash-Equal (*Divide a variable.*)\", \"| `%=` | Mod-Equal (*Remainder of dividing a variable.*)\", \"\"], \"Bitwise\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `<<` | Bitwise Left Shift\", \"| `<<=` | Left-Shift-Equal\", \"| `>>` | Bitwise Right Shift\", \"| `>>=` | Right-Shift-Equal\", \"| `&` | Bitwise AND\", \"| `&=` | Bitwise AND-Equal\", \"| `\\\\|` | Bitwise OR\", \"| `\\\\|=` | Bitwise OR-Equal\", \"| `~` | Bitwise NOT\", \"| `^` | Bitwise XOR\", \"| `^=` | Bitwise XOR-Equal\", \"\"], \"Logical\": [\"\", \"| Operators | What does it do? |\", \"| --------- | ---------------- |\", \"| `!` | NOT\", \"| `&&` | AND\", \"| `\\\\|\\\\|` | OR\", \"\"], \"Miscellaneous\": [\"\", \"| Operators | What does it do? | Example |\", \"| --------- | ---------------- | ------- |\", \"| `,` | Comma Separator | `((a=1,b=2,c=3))`\", \"\", \"\", \"\"]}, \"ARITHMETIC\": {\"Ternary Tests\": [\"\", \"```shell\", \"var=$((var2 > var ? var2 : var))\", \"```\", \"\"], \"Check if a number is a float\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"is_float() {\", \"    # Usage: is_float \\\"number\\\"\", \"\", \"    # The test checks to see that the input contains\", \"    # a '.'. This filters out whole numbers.\", \"    [ -z \\\"${1##*.*}\\\" ] &&\", \"        printf %f \\\"$1\\\" >/dev/null 2>&1\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ is_float 1 && echo true\", \"$\", \"\", \"$ is_float 1.1 && echo true\", \"$ true\", \"```\", \"\"], \"Check if a number is an integer\": [\"\", \"**Example Function:**\", \"\", \"```sh\", \"is_int() {\", \"    # usage: is_int \\\"number\\\"\", \"    printf %d \\\"$1\\\" >/dev/null 2>&1\", \"}\", \"```\", \"\", \"**Example Usage:**\", \"\", \"```shell\", \"$ is_int 1 && echo true\", \"$ true\", \"\", \"$ is_int 1.1 && echo true\", \"$\", \"```\", \"\", \"\", \"Traps allow a script to execute code on various signals. In [pxltrm](https://github.com/dylanaraps/pxltrm) (*a pixel art editor written in bash*)  traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.\", \"\", \"Traps should be added near the start of scripts so any early errors are also caught.\", \"\"]}, \"TRAPS\": {\"Do something on script exit\": [\"\", \"```shell\", \"trap 'printf \\\\\\\\033[2J\\\\\\\\033[H\\\\\\\\033[m' EXIT\", \"\", \"trap clean_up EXIT\", \"```\", \"\"], \"Ignore terminal interrupt (CTRL+C, SIGINT)\": [\"\", \"```shell\", \"trap '' INT\", \"```\", \"\", \"\"]}, \"OBSOLETE SYNTAX\": {\"Command Substitution\": [\"\", \"Use `$()` instead of `` ` ` ``.\", \"\", \"```shell\", \"var=\\\"$(command)\\\"\", \"\", \"var=`command`\", \"\", \"var=\\\"$(command \\\"$(command)\\\")\\\"\", \"```\", \"\", \"\"]}, \"INTERNAL AND ENVIRONMENT VARIABLES\": {\"Open the user's preferred text editor\": [\"\", \"```shell\", \"\\\"$EDITOR\\\" \\\"$file\\\"\", \"\", \"\\\"${EDITOR:-vi}\\\" \\\"$file\\\"\", \"```\", \"\"], \"Get the current working directory\": [\"\", \"This is an alternative to the `pwd` built-in.\", \"\", \"```shell\", \"\\\"$PWD\\\"\", \"```\", \"\"], \"Get the PID of the current shell\": [\"\", \"```\", \"\\\"$$\\\"\", \"```\", \"\"], \"Get the current shell options\": [\"\", \"```\", \"\\\"$-\\\"\", \"```\", \"\"]}}}, {\"name\": \"Writing a TUI in Bash\", \"content\": {\"Operating Systems\": {\"Identify the Operating System.\": [\"\", \"The quickest way to determine the current Operating System is the `$OSTYPE` variable. This variable is set at compile time in `bash` and typically stores the name of the running kernel or the name of the OS itself.\", \"\", \"You can also use the command `uname` to identify which OS is running. The `uname` command is POSIX and should be available everywhere. The output from `uname` does differ from `$OSTYPE` but there's a vast amount of documented information about it. [\\\\[1\\\\]](https://github.com/dylanaraps/neofetch/blob/415ef5d4aeb1cced7afcf9fd1223dd09c3306b9c/neofetch#L814-L845) [\\\\[2\\\\]](https://en.wikipedia.org/wiki/Uname)\", \"\", \"```sh\", \"get_os() {\", \"    # Figure out the current operating system to handle some\", \"    # OS specific behavior.\", \"    # '$OSTYPE' typically stores the name of the OS kernel.\", \"    case \\\"$OSTYPE\\\" in\", \"        linux*)\", \"            # ...\", \"        ;;\", \"\", \"        # Mac OS X / macOS.\", \"        darwin*)\", \"            # ...\", \"        ;;\", \"\", \"        openbsd*)\", \"            # ...\", \"        ;;\", \"\", \"        # Everything else.\", \"        *)\", \"            #...\", \"        ;;\", \"    esac\", \"}\", \"```\", \"\"], \"Documented `$OSTYPE` values.\": [\"\", \"The table below was populated by users submitting the value of the `$OSTYPE` variable using the following command. If you're running an OS not mentioned below or the output differs, please open an issue with the correct value.\", \"\", \"```sh\", \"bash -c \\\"echo $OSTYPE\\\"\", \"```\", \"\", \"| OS     | `$OSTYPE` |\", \"| ----- | ---------- |\", \"| Linux with glibc | `linux-gnu` |\", \"| Linux with musl | `linux-musl` |\", \"| Cygwin | `cygwin` |\", \"| Bash on Windows 10 | `linux-gnu` |\", \"| Msys | `msys` |\", \"| Mingw64 | `msys` |\", \"| Mingw32 | `msys` |\", \"| OpenBSD | `openbsd*` |\", \"| FreeBSD | `freebsd*` |\", \"| NetBSD | `netbsd` |\", \"| macOS | `darwin*` |\", \"| iOS | `darwin9` |\", \"| Solaris | `solaris*` |\", \"| Android (Termux) | `linux-android` |\", \"| Android | `linux-gnu` |\", \"| Haiku | `haiku` |\", \"\", \"\", \"\"]}, \"Getting the window size.\": {\"Using cursor position\": [\"\", \"This function figures out the terminal window size by moving the cursor to the bottom right corner and then querying the terminal for the cursor's position. As the terminal is made up of cells the bottom right corner is equal to the terminal's size.\", \"\", \"```sh\", \"get_term_size() {\", \"    # '\\\\e7':           Save the current cursor position.\", \"    # '\\\\e[9999;9999H': Move the cursor to the bottom right corner.\", \"    # '\\\\e[6n':         Get the cursor position (window size).\", \"    # '\\\\e8':           Restore the cursor to its previous position.\", \"    IFS='[;' read -sp $'\\\\e7\\\\e[9999;9999H\\\\e[6n\\\\e8' -d R -rs _ LINES COLUMNS\", \"}\", \"```\", \"\"], \"Using `checkwinsize`\": [\"\", \"**Note**: This only works in `bash 4+`.\", \"\", \"When `checkwinsize` is enabled and `bash` receives a command, the `LINES` and `COLUMNS` variables are populated with the terminal window size. The `(:;:)` snippet works as a pseudo command, populating the variables without running anything external.\", \"\", \"```sh\", \"get_term_size() {\", \"    shopt -s checkwinsize; (:;:)\", \"}\", \"```\", \"\"], \"Using `stty`\": [\"\", \"This function calls `stty size` to query the terminal for its size. The `stty` command is POSIX and should be available everywhere which makes it a viable alternative to the pure `bash` solutions.\", \"\", \"```sh\", \"get_term_size() {\", \"    # Get terminal size ('stty' is POSIX and always available).\", \"    # This can't be done reliably across all bash versions in pure bash.\", \"    read -r LINES COLUMNS < <(stty size)\", \"}\", \"```\", \"\", \"\", \"Using `trap` allows us to capture and react to specific signals sent to the running program. In this case we're trapping the `SIGWINCH` signal which is sent to the terminal and the running shell on window resize.\", \"\", \"We're reacting to the signal by running the above `get_term_size()` function. The variables `$LINES` and `$COLUMNS` will be updated with the new terminal size ready to use elsewhere in the program.\", \"\", \"```sh\", \"# Trap the window resize signal (handle window resize events).\", \"# See: 'man trap' and 'trap -l'\", \"trap 'get_term_size' WINCH\", \"```\", \"\", \"\", \"For the purposes of this resource we won't be using `tput`. The `tput` command has a lot of overhead (`10-15 ms` per invocation) and won't make the program any more portable than sticking to standard **VT100** escape sequences. Using `tput` also adds a dependency on `ncurses` which defeats the whole purpose of doing this in `bash`.\", \"\"]}, \"Reacting to window size changes.\": {}, \"Escape Sequences\": {\"Hiding and Showing the cursor\": [\"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/DECTCEM.html\", \"\", \"```sh\", \"# Hiding the cursor.\", \"printf '\\\\e[?25l'\", \"\", \"# Showing the cursor.\", \"printf '\\\\e[?25h'\", \"```\", \"\"], \"Line wrapping\": [\"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/DECAWM.html\", \"\", \"```sh\", \"# Disabling line wrapping.\", \"printf '\\\\e[?7l'\", \"\", \"# Enabling line wrapping.\", \"printf '\\\\e[?7h'\", \"```\", \"\"], \"Moving the cursor to specific coordinates\": [\"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/CUP.html\", \"\", \"```sh\", \"# Move the cursor to 0,0.\", \"printf '\\\\e[H'\", \"\", \"# Move the cursor to line 3, column 10.\", \"printf '\\\\e[3;10H'\", \"\", \"# Move the cursor to line 5.\", \"printf '\\\\e[5H'\", \"```\", \"\"], \"Moving the cursor to the bottom of the terminal.\": [\"\", \"See:\", \"\", \"- [getting-the-window-size](#getting-the-window-size)\", \"- https://vt100.net/docs/vt510-rm/CUP.html\", \"\", \"```sh\", \"# Using terminal size, move cursor to bottom.\", \"printf '\\\\e[%sH' \\\"$LINES\\\"\", \"```\", \"\"], \"Moving the cursor relatively\": [\"\", \"When using these escape sequences and the cursor hits the edge of the window it stops.\", \"\", \"\", \"#### Cursor Up\", \"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/CUU.html\", \"\", \"```sh\", \"# Move the cursor up a line.\", \"printf '\\\\e[A'\", \"\", \"# Move the cursor up 10 lines.\", \"printf '\\\\e[10A'\", \"```\", \"\", \"#### Cursor Down\", \"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/CUD.html\", \"\", \"```sh\", \"# Move the cursor down a line.\", \"printf '\\\\e[B'\", \"\", \"# Move the cursor down 10 lines.\", \"printf '\\\\e[10B'\", \"```\", \"\", \"#### Cursor Left\", \"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/CUB.html\", \"\", \"```sh\", \"# Move the cursor back a column.\", \"printf '\\\\e[D'\", \"\", \"# Move the cursor back 10 columns.\", \"printf '\\\\e[10D'\", \"```\", \"\", \"#### Cursor Right\", \"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/CUF.html\", \"\", \"```sh\", \"# Move the cursor forward a column.\", \"printf '\\\\e[C'\", \"\", \"# Move the cursor forward 10 columns.\", \"printf '\\\\e[10C'\", \"```\", \"\"], \"Clearing the screen\": [\"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/ED.html\", \"- https://vt100.net/docs/vt510-rm/CUP.html\", \"\", \"```sh\", \"# Clear the screen.\", \"printf '\\\\e[2J'\", \"\", \"# Clear the screen and move cursor to (0,0).\", \"# This mimics the 'clear' command.\", \"printf '\\\\e[2J\\\\e[H'\", \"```\", \"\"], \"Setting the scroll area.\": [\"\", \"This sequence allow you to limit the terminal's vertical scrolling area between two points. This comes in handy when you need to reserve portions of the screen for a top or bottom status-line (*you don't want them to scroll*).\", \"\", \"This sequence also has the side-effect of moving the cursor to the top-left of the boundaries. This means you can use it directly after a screen clear instead of `\\\\e[H` (`\\\\e[2J\\\\e[0;10r`).\", \"\", \"See:\", \"\", \"- https://vt100.net/docs/vt510-rm/DECSTBM.html\", \"\", \"```sh\", \"# Limit scrolling from line 0 to line 10.\", \"printf '\\\\e[0;10r'\", \"\", \"# Set scrolling margins back to default.\", \"printf '\\\\e[;r'\", \"```\", \"\"], \"Saving and Restoring the user's terminal screen.\": [\"\", \"This is the only non **VT100** sequences I'll be covering. This sequence allows you to save and restore the user's terminal screen when running your program. When the user exits the program, their command-line will be restored as it was before running the program.\", \"\", \"While this sequence is XTerm specific, it is covered by almost all modern terminal emulators and simply ignored in older ones. There is also [DECCRA](https://vt100.net/docs/vt510-rm/DECCRA.html) which may or may not be more widely supported than the XTerm sequence but I haven't done much testing.\", \"\", \"```sh\", \"# Save the user's terminal screen.\", \"printf '\\\\e[?1049h'\", \"\", \"# Restore the user's terminal screen.\", \"printf '\\\\e[?1049l'\", \"```\", \"\"]}}}, {\"name\": \"Frontend Checklist\", \"content\": {\"How to use?\": {}, \"Head\": {\"Meta tag\": [\"\", \"* [ ] **Doctype:** ![High][high_img] The Doctype is HTML5 and is at the top of all your HTML pages.\", \"\", \"```html\", \"<!doctype html> <!-- HTML5 -->\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Determining the character encoding - HTML5 W3C](https://www.w3.org/TR/html5/syntax.html#determining-the-character-encoding)\", \"\", \"*The next 2 meta tags (Charset and Viewport) need to come first in the head.*\", \"\", \"* [ ] **Charset:** ![High][high_img] The charset (UTF-8) is declared correctly.\", \"\", \"```html\", \"<meta charset=\\\"utf-8\\\">\", \"```\", \"\", \"* [ ] **Viewport:** ![High][high_img] The viewport is declared correctly.\", \"\", \"```html\", \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, viewport-fit=cover\\\">\", \"```\", \"\", \"* [ ] **Title:** ![High][high_img] A title is used on all pages (SEO: Google calculates the pixel width of the characters used in the title, and it cuts off between 472 and 482 pixels. The average character limit would be around 55-characters).\", \"\", \"```html\", \"<title>Page Title less than 55 characters</title>\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Title - HTML - MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title)\", \"> * \\ud83d\\udee0 [SERP Snippet Generator](https://www.sistrix.com/serp-snippet-generator/)\", \"\", \"* [ ] **Description:** ![High][high_img] A meta description is provided, it is unique and doesn't possess more than 150 characters.\", \"\", \"```html\", \"<meta name=\\\"description\\\" content=\\\"Description of the page less than 150 characters\\\">\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Meta Description - HTML - MDN](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#Adding_an_author_and_description)\", \"\", \"* [ ] **Favicons:** ![Medium][medium_img] Each favicon has been created and displays correctly. If you have only a `favicon.ico`, put it at the root of your site. Normally you won't need to use any markup. However, it's still good practice to link to it using the example below. Today, **PNG format is recommended** over `.ico` format (dimensions: 32x32px).\", \"\", \"```html\", \"<link rel=\\\"icon\\\" type=\\\"image/x-icon\\\" href=\\\"https://example.com/favicon.ico\\\">\", \"<link rel=\\\"icon\\\" type=\\\"image/png\\\" href=\\\"https://example.com/favicon.png\\\">\", \"```\", \"\", \"> * \\ud83d\\udee0 [Favicon Generator](https://www.favicon-generator.org/)\", \"> * \\ud83d\\udee0 [RealFaviconGenerator](https://realfavicongenerator.net/)\", \"> * \\ud83d\\udcd6 [Favicon Cheat Sheet](https://github.com/audreyr/favicon-cheat-sheet)\", \"> * \\ud83d\\udcd6 [Favicons, Touch Icons, Tile Icons, etc. Which Do You Need? - CSS Tricks](https://css-tricks.com/favicon-quiz/)\", \"> * \\ud83d\\udcd6 [PNG favicons - caniuse](https://caniuse.com/#feat=link-icon-png)\", \"\", \"* [ ] **Apple Web App Meta:** ![Low][low_img] Apple meta-tags are present.\", \"\", \"```html\", \"<link rel=\\\"apple-touch-icon\\\" href=\\\"/custom-icon.png\\\">\", \"\", \"<meta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\">\", \"\", \"<meta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black\\\">\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Configuring Web Applications](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html)\", \"> * \\ud83d\\udcd6 [Supported Meta Tags](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html)\", \"\", \"* [ ] **Windows Tiles:** ![Low][low_img] Windows tiles are present and linked.\", \"\", \"```html\", \"<meta name=\\\"msapplication-config\\\" content=\\\"browserconfig.xml\\\" />\", \"```\", \"\", \"Minimum required xml markup for the `browserconfig.xml` file is as follows:\", \"\", \"```xml\", \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\", \"<browserconfig>\", \"   <msapplication>\", \"     <tile>\", \"        <square70x70logo src=\\\"small.png\\\"/>\", \"        <square150x150logo src=\\\"medium.png\\\"/>\", \"        <wide310x150logo src=\\\"wide.png\\\"/>\", \"        <square310x310logo src=\\\"large.png\\\"/>\", \"     </tile>\", \"   </msapplication>\", \"</browserconfig>\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Browser configuration schema reference](https://msdn.microsoft.com/en-us/library/dn320426(v=vs.85).aspx)\", \"\", \"* [ ] **Canonical:** ![Medium][medium_img] Use `rel=\\\"canonical\\\"` to avoid duplicate content.\", \"\", \"```html\", \"<link rel=\\\"canonical\\\" href=\\\"http://example.com/2017/09/a-new-article-to-read.html\\\">\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Use canonical URLs - Search Console Help - Google Support](https://support.google.com/webmasters/answer/139066?hl=en)\", \"> * \\ud83d\\udcd6 [5 common mistakes with rel=canonical - Google Webmaster Blog](https://webmasters.googleblog.com/2013/04/5-common-mistakes-with-relcanonical.html)\", \"\"], \"HTML tags\": [\"\", \"* [ ] **Language attribute:** ![High][high_img] The `lang` attribute of your website is specified and related to the language of the current page.\", \"\", \"```html\", \"<html lang=\\\"en\\\">\", \"```\", \"\", \"* [ ] **Direction attribute:** ![Medium][medium_img] The direction of lecture is specified on the html tag (It can be used on another HTML tag).\", \"\", \"```html\", \"<html dir=\\\"rtl\\\">\", \"```\", \"\", \"> * \\ud83d\\udcd6 [dir - HTML - MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir)\", \"\", \"* [ ] **Alternate language:** ![Low][low_img] The language tag of your website is specified and related to the language of the current page.\", \"\", \"```html\", \"<link rel=\\\"alternate\\\" href=\\\"https://es.example.com/\\\" hreflang=\\\"es\\\">\", \"```\", \"\", \"* [ ] **x-default:** ![Low][low_img] The language tag of your website for international landing pages.\", \"\", \"```html\", \"<link rel=\\\"alternate\\\" href=\\\"https://example.com/\\\" hreflang=\\\"x-default\\\" />\", \"```\", \"\", \"> * \\ud83d\\udcd6 [x-default - Google](https://webmasters.googleblog.com/2013/04/x-default-hreflang-for-international-pages.html)\", \"\", \"\", \"* [ ] **Conditional comments:** ![Low][low_img] Conditional comments are present for IE if needed.\", \"\", \"> * \\ud83d\\udcd6 [About conditional comments (Internet Explorer) - MSDN - Microsoft](https://msdn.microsoft.com/en-us/library/ms537512(v=vs.85).aspx)\", \"\", \"* [ ] **RSS feed:** ![Low][low_img] If your project is a blog or has articles, an RSS link was provided.\", \"\", \"* [ ] **CSS Critical:** ![Medium][medium_img] The CSS critical (or \\\"above the fold\\\") collects all the CSS used to render the visible portion of the page. It is embedded before your principal CSS call and between `<style></style>` in a single line (minified).\", \"\", \"> * \\ud83d\\udee0 [Critical by Addy Osmani on GitHub](https://github.com/addyosmani/critical) automates this.\", \"\", \"* [ ] **CSS order:** ![High][high_img] All CSS files are loaded before any JavaScript files in the `<head>`. (Except the case where sometimes JS files are loaded asynchronously on top of your page).\", \"\"], \"Social meta\": [\"\", \"Visualize and generate automatically our social meta tags with [Meta Tags](https://metatags.io/)\", \"\", \"***Facebook OG*** and ***Twitter Cards*** are, for any website, highly recommended. The other social media tags can be considered if you target a particular presence on those and want to ensure the display.\", \"\", \"* [ ] **Facebook Open Graph:** ![Low][low_img] All Facebook Open Graph (OG) are tested and no one is missing or with false information. Images need to be at least 600 x 315 pixels, although 1200 x 630 pixels is recommended.\", \"\", \"> **Notes:** Using `og:image:width` and `og:image:height` will specify the image dimensions to the crawler so that it can render the image immediately without having to asynchronously download and process it.\", \"\", \"```html\", \"<meta property=\\\"og:type\\\" content=\\\"website\\\">\", \"<meta property=\\\"og:url\\\" content=\\\"https://example.com/page.html\\\">\", \"<meta property=\\\"og:title\\\" content=\\\"Content Title\\\">\", \"<meta property=\\\"og:image\\\" content=\\\"https://example.com/image.jpg\\\">\", \"<meta property=\\\"og:description\\\" content=\\\"Description Here\\\">\", \"<meta property=\\\"og:site_name\\\" content=\\\"Site Name\\\">\", \"<meta property=\\\"og:locale\\\" content=\\\"en_US\\\">\", \"<meta property=\\\"og:image:width\\\" content=\\\"1200\\\">\", \"<meta property=\\\"og:image:height\\\" content=\\\"630\\\">\", \"```\", \"\", \"> * \\ud83d\\udcd6 [A Guide to Sharing for Webmasters](https://developers.facebook.com/docs/sharing/webmasters/)\", \"> * \\ud83d\\udcd6 [Best Practices - Sharing](https://developers.facebook.com/docs/sharing/best-practices/)\", \"> * \\ud83d\\udee0 Test your page with the [Facebook OG testing](https://developers.facebook.com/tools/debug/)\", \"\", \"* [ ] **Twitter Card:** ![Low][low_img]\", \"\", \"```html\", \"<meta name=\\\"twitter:card\\\" content=\\\"summary\\\">\", \"<meta name=\\\"twitter:site\\\" content=\\\"@site_account\\\">\", \"<meta name=\\\"twitter:creator\\\" content=\\\"@individual_account\\\">\", \"<meta name=\\\"twitter:url\\\" content=\\\"https://example.com/page.html\\\">\", \"<meta name=\\\"twitter:title\\\" content=\\\"Content Title\\\">\", \"<meta name=\\\"twitter:description\\\" content=\\\"Content description less than 200 characters\\\">\", \"<meta name=\\\"twitter:image\\\" content=\\\"https://example.com/image.jpg\\\">\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Getting started with cards \\u2014 Twitter Developers](https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started)\", \"> * \\ud83d\\udee0 Test your page with the [Twitter card validator](https://cards-dev.twitter.com/validator)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\"]}, \"HTML\": {\"Best practices\": [\"\", \"* [ ] **HTML5 Semantic Elements:** ![High][high_img] HTML5 Semantic Elements are used appropriately (header, section, footer, main...).\", \"\", \"> * \\ud83d\\udcd6 [HTML Reference](http://htmlreference.io/)\", \"\", \"* [ ] **Error pages:** ![High][high_img] Error 404 page and 5xx exist. Remember that the 5xx error pages need to have their CSS integrated (no external call on the current server).\", \"\", \"* [ ] **Noopener:** ![Medium][medium_img] In case you are using external links with `target=\\\"_blank\\\"`, your link should have a `rel=\\\"noopener\\\"` attribute to prevent tab nabbing. If you need to support older versions of Firefox, use `rel=\\\"noopener noreferrer\\\"`.\", \"\", \"> * \\ud83d\\udcd6 [About rel=noopener](https://mathiasbynens.github.io/rel-noopener/)\", \"\", \"* [ ] **Clean up comments:** ![Low][low_img] Unnecessary code needs to be removed before sending the page to production.\", \"\"], \"HTML testing\": [\"\", \"* [ ] **W3C compliant:** ![High][high_img] All pages need to be tested with the W3C validator to identify possible issues in the HTML code.\", \"\", \"> * \\ud83d\\udee0 [W3C validator](https://validator.w3.org/)\", \"\", \"* [ ] **HTML Lint:** ![High][high_img] I use tools to help me analyze any issues I could have on my HTML code.\", \"\", \"> * \\ud83d\\udee0 [Dirty markup](https://www.10bestdesign.com/dirtymarkup/)\", \"\", \"> * \\ud83d\\udee0 [webhint](https://webhint.io/)\", \"\", \"* [ ] **Link checker:** ![High][high_img] There are no broken links in my page, verify that you don't have any 404 error.\", \"\", \"> * \\ud83d\\udee0 [W3C Link Checker](https://validator.w3.org/checklink)\", \"\", \"* [ ] **Adblockers test:** ![Medium][medium_img] Your website shows your content correctly with adblockers enabled (You can provide a message encouraging people to disable their adblocker).\", \"\", \"> * \\ud83d\\udcd6 [Use AdBlocking in your Dev Environment](https://andreicioara.com/use-adblocking-in-your-dev-environment-48db500d9b86)\", \"\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\", \"> **Notes:** Using web fonts may cause Flash Of Unstyled Text/Flash Of Invisible Text - consider having fallback fonts and/or utilizing web font loaders to control behavior.\", \"> * \\ud83d\\udcd6 [Google Technical considerations about webfonts](https://developers.google.com/fonts/docs/technical_considerations)\", \"\", \"* [ ] **Webfont format:** ![High][high_img] WOFF, WOFF2 and TTF are supported by all modern browsers.\", \"\", \"> * \\ud83d\\udcd6 [WOFF - Web Open Font Format - Caniuse](https://caniuse.com/#feat=woff).\", \"> * \\ud83d\\udcd6 [WOFF 2.0 - Web Open Font Format - Caniuse](https://caniuse.com/#feat=woff2).\", \"> * \\ud83d\\udcd6 [TTF/OTF - TrueType and OpenType font support](https://caniuse.com/#feat=ttf)\", \"> * \\ud83d\\udcd6 [Using @font-face - CSS-Tricks](https://css-tricks.com/snippets/css/using-font-face/)\", \"\", \"* [ ] **Webfont size:** ![High][high_img] Webfont sizes don't exceed 2 MB (all variants included).\", \"\", \"* [ ] **Webfont loader:** ![Low][low_img] Control loading behavior with a webfont loader\", \"\", \"> * \\ud83d\\udee0 [Typekit Web Font Loader](https://github.com/typekit/webfontloader)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\", \"> **Notes:** Take a look at [CSS guidelines](https://cssguidelin.es/) and [Sass Guidelines](https://sass-guidelin.es/) followed by most  Front-End developers. If you have a doubt about CSS properties, you can visit [CSS Reference](http://cssreference.io/). There is also a short [Code Guide](http://codeguide.co/) for consistency.\", \"\", \"* [ ] **Responsive Web Design:** ![High][high_img] The website is using responsive web design.\", \"* [ ] **CSS Print:** ![Medium][medium_img] A print stylesheet is provided and is correct on each page.\", \"* [ ] **Preprocessors:** ![Low][low_img] Your project is using a CSS preprocessor (e.g [Sass](http://sass-lang.com/), [Less](http://lesscss.org/), [Stylus](http://stylus-lang.com/)).\", \"* [ ] **Unique ID:** ![High][high_img] If IDs are used, they are unique to a page.\", \"* [ ] **Reset CSS:** ![High][high_img] A CSS reset (reset, normalize or reboot) is used and up to date. *(If you are using a CSS Framework like Bootstrap or Foundation, a Normalize is already included into it.)*\", \"\", \"> * \\ud83d\\udcd6 [Reset.css](https://meyerweb.com/eric/tools/css/reset/)\", \"> * \\ud83d\\udcd6 [Normalize.css](https://necolas.github.io/normalize.css/)\", \"> * \\ud83d\\udcd6 [Reboot](https://getbootstrap.com/docs/4.0/content/reboot/)\", \"\", \"* [ ] **JS prefix:** ![Low][low_img] All classes (or id- used in JavaScript files) begin with **js-** and are not styled into the CSS files.\", \"\", \"```html\", \"<div id=\\\"js-slider\\\" class=\\\"my-slider\\\">\", \"<div id=\\\"id-used-by-cms\\\" class=\\\"js-slider my-slider\\\">\", \"```\", \"\", \"* [ ] **embedded or inline CSS:** ![High][high_img] Avoid at all cost embedding CSS in `<style>` tags or using inline CSS: only use for valid reasons (e.g. background-image for slider, critical CSS).\", \"* [ ] **Vendor prefixes:** ![High][high_img] CSS vendor prefixes are used and are generated accordingly with your browser support compatibility.\", \"\", \"> * \\ud83d\\udee0 [Autoprefixer CSS online](https://autoprefixer.github.io/)\", \"\"]}, \"Webfonts\": {}, \"CSS\": {\"Performance\": [\"\", \"* [ ] **Concatenation:** ![High][high_img] CSS files are concatenated in a single file *(Not for HTTP/2)*.\", \"* [ ] **Minification:** ![High][high_img] All CSS files are minified.\", \"* [ ] **Non-blocking:** ![Medium][medium_img] CSS files need to be non-blocking to prevent the DOM from taking time to load.\", \"\", \"> * \\ud83d\\udcd6 [loadCSS by filament group](https://github.com/filamentgroup/loadCSS)\", \"> * \\ud83d\\udcd6 [Example of preload CSS using loadCSS](https://gist.github.com/thedaviddias/c24763b82b9991e53928e66a0bafc9bf)\", \"\", \"* [ ] **Unused CSS:** ![Low][low_img] Remove unused CSS.\", \"\", \"> * \\ud83d\\udee0 [UnCSS Online](https://uncss-online.com/)\", \"> * \\ud83d\\udee0 [PurifyCSS](https://github.com/purifycss/purifycss)\", \"> * \\ud83d\\udee0 [PurgeCSS](https://github.com/FullHuman/purgecss)\", \"> * \\ud83d\\udee0 [Chrome DevTools Coverage](https://developers.google.com/web/updates/2017/04/devtools-release-notes#coverage)\", \"\", \"\"], \"CSS testing\": [\"\", \"* [ ] **Stylelint:** ![High][high_img] All CSS or SCSS files are without any errors.\", \"\", \"> * \\ud83d\\udee0 [stylelint, a CSS linter](https://stylelint.io/)\", \"> * \\ud83d\\udcd6 [Sass guidelines](https://sass-guidelin.es/)\", \"\", \"* [ ] **Responsive web design:** ![High][high_img] All pages were tested at the following breakpoints: 320px, 768px, 1024px (can be more / different according to your analytics).\", \"**Responsive Checker -**\", \"> * \\ud83d\\udee0 [Am I Responsive?](http://ami.responsivedesign.is/)\", \"> * \\ud83d\\udee0 [Mobile Friendly Test](https://search.google.com/test/mobile-friendly)\", \"> * \\ud83d\\udee0 [Responsive Website Design Tester](https://responsivedesignchecker.com/)\", \"> * \\ud83d\\udee0 [Responsinator](https://www.responsinator.com/)\", \"> * \\ud83d\\udee0 [XRespond](https://xrespond.com/)\", \"\", \"\", \"* [ ] **CSS Validator:** ![Medium][medium_img] The CSS was tested and pertinent errors were corrected.\", \"\", \"> * \\ud83d\\udee0 [CSS Validator](https://jigsaw.w3.org/css-validator/)\", \"\", \"* [ ] **Desktop Browsers:** ![High][high_img] All pages were tested on all current desktop browsers (Safari, Firefox, Chrome, Internet Explorer, EDGE...).\", \"* [ ] **Mobile Browsers:**  ![High][high_img] All pages were tested on all current mobile browsers (Native browser, Chrome, Safari...).\", \"* [ ] **OS:**  ![High][high_img] All pages were tested on all current OS (Windows, Android, iOS, Mac...).\", \"\", \"* [ ] **Design fidelity:** ![Low][low_img] Depending on the project and the quality of the creatives, you may be asked to be close to the design. You can use some tools to compare creatives with your code implementation and ensure consistency.\", \"\", \"> [Pixel Perfect - Chrome Extension](https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi?hl=en)\", \"\", \"* [ ] **Reading direction:** ![High][high_img] All pages need to be tested for LTR and RTL languages if they need to be supported.\", \"\", \"> * \\ud83d\\udcd6 [Building RTL-Aware Web Apps & Websites: Part 1 - Mozilla Hacks](https://hacks.mozilla.org/2015/09/building-rtl-aware-web-apps-and-websites-part-1/)\", \"> * \\ud83d\\udcd6 [Building RTL-Aware Web Apps & Websites: Part 2 - Mozilla Hacks](https://hacks.mozilla.org/2015/10/building-rtl-aware-web-apps-websites-part-2/)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\", \"> **Notes:** For a complete understanding of image optimization, check the free ebook **[Essential Image Optimization](https://images.guide/)** from Addy Osmani.\", \"\"]}, \"Images\": {\"Best practices\": [\"\", \"* [ ] **Optimization:** ![High][high_img] All images are optimized to be rendered in the browser. WebP format could be used for critical pages (like Homepage).\", \"\", \"> * \\ud83d\\udee0 [Imagemin](https://github.com/imagemin/imagemin)\", \"> * \\ud83d\\udee0 Use [ImageOptim](https://imageoptim.com/) to optimise your images for free.\", \"> * \\ud83d\\udee0 Use [KeyCDN Image Processing](https://www.keycdn.com/support/image-processing) for image optimization in real time.\", \"> * \\ud83d\\udee0 Use [Kraken.io](https://kraken.io/web-interface) awesome alternative for both png and jpg optimization. Up to 1mb per files on free plan.\", \"> * \\ud83d\\udee0 [TinyPNG](https://tinypng.com/) losslessly optimises png, apng (animated png) and jpg images. Free and paid version available.\", \"> * \\ud83d\\udee0 [ZorroSVG](http://quasimondo.com/ZorroSVG/) jpg-like compression for transparent images using svg masking.\", \"> * \\ud83d\\udee0 [SVGO](https://github.com/svg/svgo) a Nodejs-based tool for optimizing SVG vector graphics files.\", \"> * \\ud83d\\udee0 [SVGOMG](https://jakearchibald.github.io/svgomg/) a web-based GUI version of SVGO for optimising your svgs online.\", \"\", \"\", \"* [ ] **Picture/Srcset:** ![Medium][medium_img] You use picture/srcset to provide the most appropriate image for the current viewport of the user.\", \"\", \"> * \\ud83d\\udcd6 [How to Build Responsive Images with srcset](https://www.sitepoint.com/how-to-build-responsive-images-with-srcset/)\", \"\", \"* [ ] **Retina:** ![Low][low_img] You provide layout images 2x or 3x, support retina display.\", \"* [ ] **Sprite:** ![Medium][medium_img] Small images are in a sprite file (in the case of icons, they can be in an SVG sprite image).\", \"* [ ] **Width and Height:** ![High][high_img] Set `width` and `height` attributes on `<img>` if the final rendered image size is known (can be omitted for CSS sizing).\", \"* [ ] **Alternative text:** ![High][high_img] All `<img>` have an alternative text which describes the image visually.\", \"\", \"> * \\ud83d\\udcd6 [Alt-texts: The Ultimate Guide](https://axesslab.com/alt-texts/)\", \"\", \"* [ ] **Lazy loading:** ![Medium][medium_img] Images are lazyloaded (A noscript fallback is always provided).\", \"> * \\ud83d\\udee0 [Native lazy loading polyfill](https://github.com/mfranzke/loading-attribute-polyfill/)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\"]}, \"JavaScript\": {\"Best practices\": [\"\", \"* [ ] **JavaScript Inline:** ![High][high_img] You don't have any JavaScript code inline (mixed with your HTML code).\", \"* [ ] **Concatenation:** ![High][high_img] JavaScript files are concatenated.\", \"* [ ] **Minification:** ![High][high_img] JavaScript files are minified (you can add the `.min` suffix).\", \"\", \"> * \\ud83d\\udcd6 [Minify Resources (HTML, CSS, and JavaScript)](https://developers.google.com/speed/docs/insights/MinifyResources)\", \"\", \"* [ ] **JavaScript security:** ![High][high_img]\", \"\", \"> * \\ud83d\\udcd6 [Guidelines for Developing Secure Applications Utilizing JavaScript](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet#Guidelines_for_Developing_Secure_Applications_Utilizing_JavaScript)\", \"\", \"* [ ] **`noscript` tag:** ![Medium][medium_img] Use `<noscript>` tag in the HTML body if a script type on the page is unsupported or if scripting is currently turned off in the browser. This will be helpful in client-side rendering heavy apps such as React.js, see [examples](https://webdesign.tutsplus.com/tutorials/quick-tip-dont-forget-the-noscript-element--cms-25498).\", \"\", \"```html\", \"<noscript>\", \"  You need to enable JavaScript to run this app.\", \"</noscript>\", \"```\", \"\", \"* [ ] **Non-blocking:** ![Medium][medium_img] JavaScript files are loaded asynchronously using `async` or deferred using `defer` attribute.\", \"\", \"> * \\ud83d\\udcd6 [Remove Render-Blocking JavaScript](https://developers.google.com/speed/docs/insights/BlockingJS)\", \"\", \"* [ ] **Optimized and updated JS libraries:** ![Medium][medium_img] All JavaScript libraries used in your project are necessary (prefer Vanilla Javascript for simple functionalities), updated to their latest version and don't overwhelm your JavaScript with unnecessary methods.\", \"\", \"> * \\ud83d\\udcd6 [You may not need jQuery](http://youmightnotneedjquery.com/)\", \"> * \\ud83d\\udcd6 [Vanilla JavaScript for building powerful web applications](https://plainjs.com/)\", \"\", \"* [ ] **Modernizr:** ![Low][low_img] If you need to target some specific features you can use a custom Modernizr to add classes in your `<html>` tag.\", \"\", \"> * \\ud83d\\udee0 [Customize your Modernizr](https://modernizr.com/download?setclasses)\", \"\"], \"JavaScript testing\": [\"\", \"* [ ] **ESLint:** ![High][high_img] No errors are flagged by ESLint (based on your configuration or standards rules).\", \"\", \"> * \\ud83d\\udcd6 [ESLint - The pluggable linting utility for JavaScript and JSX](https://eslint.org/)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\"]}, \"Security\": {\"Scan and check your web site\": [\"\", \"> * [securityheaders.io](https://securityheaders.io/)\", \"> * [Observatory by Mozilla](https://observatory.mozilla.org/)\", \"\"], \"Best practices\": [\"\", \"* [ ] **HTTPS:** ![High][high_img] HTTPS is used on every page and for all external content (plugins, images...).\", \"\", \"> * \\ud83d\\udee0 [Let's Encrypt - Free SSL/TLS Certificates](https://letsencrypt.org/)\", \"> * \\ud83d\\udee0 [Free SSL Server Test](https://www.ssllabs.com/ssltest/index.html)\", \"> * \\ud83d\\udcd6 [Strict Transport Security](http://caniuse.com/#feat=stricttransportsecurity)\", \"\", \"* [ ] **HTTP Strict Transport Security (HSTS):** ![Medium][medium_img] The HTTP header is set to 'Strict-Transport-Security'.\", \"\", \"> * \\ud83d\\udee0 [Check HSTS preload status and eligibility](https://hstspreload.org/)\", \"> * \\ud83d\\udcd6 [HTTP Strict Transport Security Cheat Sheet - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html)\", \"> * \\ud83d\\udcd6 [Transport Layer Protection Cheat Sheet - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html)\", \"\", \"* [ ] **Cross Site Request Forgery (CSRF):** ![High][high_img] You ensure that requests made to your server-side are legitimate and originate from your website / app to prevent CSRF attacks.\", \"\", \"> * \\ud83d\\udcd6 [Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet  - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html)\", \"\", \"* [ ] **Cross Site Scripting (XSS):** ![High][high_img] Your page or website is free from XSS possible issues.\", \"\", \"> * \\ud83d\\udcd6 [XSS (Cross Site Scripting) Prevention Cheat Sheet  - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\", \"> * \\ud83d\\udcd6 [DOM based XSS Prevention Cheat Sheet  - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html)\", \"\", \"* [ ] **Content Type Options:** ![Medium][medium_img] Prevents Google Chrome and Internet Explorer from trying to mime-sniff the content-type of a response away from the one being declared by the server.\", \"\", \"> * \\ud83d\\udcd6 [X-Content-Type-Options - Scott Helme](https://scotthelme.co.uk/hardening-your-http-response-headers/#x-content-type-options)\", \"\", \"* [ ] **X-Frame-Options (XFO):** ![Medium][medium_img] Protects your visitors against clickjacking attacks.\", \"\", \"> * \\ud83d\\udcd6 [X-Frame-Options - Scott Helme](https://scotthelme.co.uk/hardening-your-http-response-headers/#x-frame-options)\", \"> * \\ud83d\\udcd6 [RFC7034 - HTTP Header Field X-Frame-Options](https://tools.ietf.org/html/rfc7034)\", \"\", \"* [ ] **Content Security Policy:** ![Medium][medium_img] Defines how content is loaded on your site and from where it is permitted to be loaded. Can also be used to protect against clickjacking attacks.\", \"\", \"> * \\ud83d\\udcd6 [Content Security Policy - An Introduction - Scott Helme](https://scotthelme.co.uk/content-security-policy-an-introduction/)\", \"> * \\ud83d\\udcd6 [CSP Cheat Sheet - Scott Helme](https://scotthelme.co.uk/csp-cheat-sheet/)\", \"> * \\ud83d\\udcd6 [CSP Cheat Sheet - OWASP](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)\", \"> * \\ud83d\\udcd6 [Content Security Policy Reference](https://content-security-policy.com/)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\"]}, \"Performance\": {\"Best practices\": [\"\", \"* [ ] **Goals to achieve:** ![Medium][medium_img] Your pages should reach these goals:\", \"  * First Meaningful Paint under 1 second\", \"  * Time To Interactive under 5 seconds for the \\\"average\\\" configuration (a $200 Android on a slow 3G network with 400ms RTT and 400kbps transfer speed) and under 2 seconds for repeat visits\", \"  * Critical file size under 170Kb gzipped\", \"\", \"> * \\ud83d\\udee0 [Website Page Analysis](https://tools.pingdom.com)\", \"> * \\ud83d\\udee0 [WebPageTest](https://www.webpagetest.org/)\", \"> * \\ud83d\\udcd6 [Size Limit: Make the Web lighter](https://evilmartians.com/chronicles/size-limit-make-the-web-lighter)\", \"\", \"* [ ] **Minified HTML:** ![Medium][medium_img] Your HTML is minified.\", \"\", \"* [ ] **Lazy loading:** ![Medium][medium_img] Images, scripts and CSS need to be lazy loaded to improve the response time of the current page (See details in their respective sections).\", \"\", \"* [ ] **Cookie size:** ![Medium][medium_img] If you are using cookies be sure each cookie doesn't exceed 4096 bytes and your domain name doesn't have more than 20 cookies.\", \"\", \"> * \\ud83d\\udcd6 [Cookie specification: RFC 6265](https://tools.ietf.org/html/rfc6265)\", \"> * \\ud83d\\udcd6 [Cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)\", \"> * \\ud83d\\udee0 [Browser Cookie Limits](http://browsercookielimits.squawky.net/)\", \"\", \"* [ ] **Third party components:** ![Medium][medium_img] Third party iframes or components relying on external JS (like sharing buttons) are replaced by static components when possible, thus limiting calls to external APIs and keeping your user's activity private.\", \"\", \"> * \\ud83d\\udee0 [Simple sharing buttons generator](https://simplesharingbuttons.com/)\", \"\"], \"Preparing upcoming requests\": [\"\", \"> * \\ud83d\\udcd6 [Explanation of the following techniques](https://css-tricks.com/prefetching-preloading-prebrowsing/)\", \"\", \"* [ ] **DNS resolution:** ![Low][low_img] DNS of third-party services that may be needed are resolved in advance during idle time using `dns-prefetch`.\", \"\", \"```html\", \"<link rel=\\\"dns-prefetch\\\" href=\\\"https://example.com\\\">\", \"```\", \"\", \"* [ ] **Preconnection:** ![Low][low_img] DNS lookup, TCP handshake and TLS negotiation with services that will be needed soon is done in advance during idle time using `preconnect`.\", \"\", \"```html\", \"<link rel=\\\"preconnect\\\" href=\\\"https://example.com\\\">\", \"```\", \"\", \"* [ ] **Prefetching:** ![Low][low_img] Resources that will be needed soon (e.g. lazy loaded images) are requested in advance during idle time using `prefetch`.\", \"\", \"```html\", \"<link rel=\\\"prefetch\\\" href=\\\"image.png\\\">\", \"```\", \"\", \"* [ ] **Preloading:** ![Low][low_img] Resources needed in the current page (e.g. scripts placed at the end of `<body>`) in advance using `preload`.\", \"\", \"```html\", \"<link rel=\\\"preload\\\" href=\\\"app.js\\\">\", \"```\", \"\", \"> * \\ud83d\\udcd6 [Difference between prefetch and preload](https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf)\", \"\"], \"Performance testing\": [\"\", \"* [ ] **Google PageSpeed:** ![High][high_img] All your pages were tested (not only the homepage) and have a score of at least 90/100.\", \"\", \"> * \\ud83d\\udee0 [Google PageSpeed](https://developers.google.com/speed/pagespeed/insights/)\", \"> * \\ud83d\\udee0 [Test your mobile speed with Google](https://testmysite.withgoogle.com)\", \"> * \\ud83d\\udee0 [WebPagetest - Website Performance and Optimization Test](https://www.webpagetest.org/)\", \"> * \\ud83d\\udee0 [GTmetrix - Website speed and performance optimization](https://gtmetrix.com/)\", \"> * \\ud83d\\udee0 [Speedrank - Improve the performance of your website](https://speedrank.app/)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\", \"> **Notes:** You can watch the playlist [A11ycasts with Rob Dodson](https://www.youtube.com/playlist?list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g) \\ud83d\\udcf9\", \"\"]}, \"Accessibility\": {\"Best practices\": [\"\", \"* [ ] **Progressive enhancement:** ![Medium][medium_img] Major functionality like main navigation and search should work without JavaScript enabled.\", \"\", \"> * \\ud83d\\udcd6 [Enable / Disable JavaScript in Chrome Developer Tools](https://www.youtube.com/watch?v=kBmvq2cE0D8)\", \"\", \"* [ ] **Color contrast:** ![Medium][medium_img] Color contrast should at least pass WCAG AA (AAA for mobile).\", \"\", \"> * \\ud83d\\udee0 [Contrast ratio](https://leaverou.github.io/contrast-ratio/)\", \"\", \"#### Headings\", \"\", \"* [ ] **H1:** ![High][high_img] All pages have an H1 which is not the title of the website.\", \"* [ ] **Headings:** ![High][high_img] Headings should be used properly and in the right order (H1 to H6).\", \"\", \"> * \\ud83d\\udcf9 [Why headings and landmarks are so important -- A11ycasts #18](https://www.youtube.com/watch?v=vAAzdi1xuUY&index=9&list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g)\", \"\"], \"Semantics\": [\"\", \"* [ ] **Specific HTML5 input types are used:** ![Medium][medium_img] This is especially important for mobile devices that show customized keypads and widgets for different types.\", \"\", \"> * \\ud83d\\udcd6 [Mobile Input Types](http://mobileinputtypes.com/)\", \"\"], \"Form\": [\"\", \"* [ ] **Label:** ![High][high_img] A label is associated with each input form element. In case a label can't be displayed, use `aria-label` instead.\", \"\", \"> * \\ud83d\\udcd6 [Using the aria-label attribute - MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute)\", \"\"], \"Accessibility testing\": [\"\", \"* [ ] **Accessibility standards testing:** ![High][high_img] Use the WAVE tool to test if your page respects the accessibility standards.\", \"\", \"> * \\ud83d\\udee0 [Wave testing](http://wave.webaim.org/)\", \"\", \"* [ ] **Keyboard navigation:** ![High][high_img] Test your website using only your keyboard in a previsible order. All interactive elements are reachable and usable.\", \"* [ ] **Screen-reader:** ![Medium][medium_img] All pages were tested in a screen-reader (VoiceOver, ChromeVox, NVDA or Lynx).\", \"* [ ] **Focus style:** ![High][high_img] If the focus is disabled, it is replaced by visible state in CSS.\", \"\", \"> * \\ud83d\\udcf9 [Managing Focus - A11ycasts #22](https://www.youtube.com/watch?v=srLRSQg6Jgg&index=5&list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g)\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\", \"* [ ] **Google Analytics:** ![Low][low_img] Google Analytics is installed and correctly configured.\", \"\", \"> * \\ud83d\\udee0 [Google Analytics](https://analytics.google.com/analytics/web/)\", \"> * \\ud83d\\udee0 [GA Checker (and others)](http://www.gachecker.com/)\", \"\", \"* [ ] **Search Console:** ![Low][low_img] Search Console is installed and correctly configured. It is a free service offered by Google that helps you monitor, maintain, and troubleshoot your site's presence in Google Search results.\", \"\", \"> * \\ud83d\\udee0 [Search Console](https://search.google.com/search-console/about)\", \"\", \"* [ ] **Headings logic:** ![Medium][medium_img] Heading text helps to understand the content in the current page.\", \"\", \"> * \\ud83d\\udee0 [Tota11y, tab Headings](http://khan.github.io/tota11y/#Try-it)\", \"\", \"* [ ] **sitemap.xml:** ![High][high_img] A sitemap.xml exists and was submitted to Google Search Console (previously Google Webmaster Tools).\", \"\", \"> * \\ud83d\\udee0 [Sitemap generator](https://websiteseochecker.com/html-sitemap-generator/)\", \"\", \"* [ ] **robots.txt:** ![High][high_img] The robots.txt is not blocking webpages.\", \"\", \"> * \\ud83d\\udcd6 [The robots.txt file](https://varvy.com/robottxt.html)\", \"> * \\ud83d\\udee0 Test your robots.txt with [Google Robots Testing Tool](https://www.google.com/webmasters/tools/robots-testing-tool)\", \"\", \"* [ ] **Structured Data:** ![High][high_img] Pages using structured data are tested and are without errors. Structured data helps crawlers understand the content in the current page.\", \"\", \"> * \\ud83d\\udcd6 [Introduction to Structured Data - Search - Google Developers](https://developers.google.com/search/docs/guides/intro-structured-data)\", \"> * \\ud83d\\udcd6 [JSON-LD](https://json-ld.org/)\", \"> * \\ud83d\\udcd6 [Microdata](https://www.w3.org/TR/microdata/)\", \"> * \\ud83d\\udee0 Test your page with the [Rich Restults Test](https://search.google.com/test/rich-results)\", \"> * \\ud83d\\udee0 Complete list of vocabularies that can be used as structured data. [Schema.org Full Hierarchy](http://schema.org/docs/full.html)\", \"\", \"* [ ] **Sitemap HTML:** ![Medium][medium_img] An HTML sitemap is provided and is accessible via a link in the footer of your website.\", \"\", \"> * \\ud83d\\udcd6 [Sitemap guidelines - Google Support](https://support.google.com/webmasters/answer/183668?hl=en)\", \"\", \"* [ ] **Pagination link tags:** ![Medium][medium_img] Provide `rel=\\\"prev\\\"` and `rel=\\\"next\\\"` to indicate paginated content.\", \"\", \"> * \\ud83d\\udee0 [Pagination (rel=\\\"prev/next\\\") Testing Tool](https://technicalseo.com/seo-tools/rel-prev-next/)\", \"\", \"> * \\ud83d\\udcd6 [Pagination guidelines - Google Support](https://support.google.com/webmasters/answer/1663744?hl=en)\", \"\", \"```html\", \"<link rel=\\\"prev\\\" href=\\\"https://example.com/?page=1\\\">\", \"<link rel=\\\"next\\\" href=\\\"https://example.com/?page=3\\\">\", \"```\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\", \"\", \"The Front-End Checklist is also available in other languages. Thanks for all translators and their awesome work!\", \"\", \"* \\ud83c\\uddef\\ud83c\\uddf5 Japanese: [miya0001/Front-End-Checklist](https://github.com/miya0001/Front-End-Checklist)\", \"* \\ud83c\\uddea\\ud83c\\uddf8 Spanish: [eoasakura/Front-End-Checklist-ES](https://github.com/eoasakura/Front-End-Checklist-ES)\", \"* \\ud83c\\udde8\\ud83c\\uddf3 Chinese: [JohnsenZhou/Front-End-Checklist](https://github.com/JohnsenZhou/Front-End-Checklist)\", \"* \\ud83c\\uddf0\\ud83c\\uddf7 Korean: [kesuskim/Front-End-Checklist](https://github.com/kesuskim/Front-End-Checklist)\", \"* \\ud83c\\udde7\\ud83c\\uddf7 Portuguese: [jcezarms/Front-End-Checklist](https://github.com/jcezarms/Front-End-Checklist)\", \"* \\ud83c\\uddfb\\ud83c\\uddf3 Vietnamese: [euclid1990/Front-End-Checklist](https://github.com/euclid1990/Front-End-Checklist)\", \"* \\ud83c\\uddf9\\ud83c\\uddfc Traditional Chinese: [EngineLin/Front-End-Checklist](https://github.com/EngineLin/Front-End-Checklist)\", \"* \\ud83c\\uddeb\\ud83c\\uddf7 French: [ynizon/Front-End-Checklist](https://github.com/ynizon/Front-End-Checklist)\", \"* \\ud83c\\uddf7\\ud83c\\uddfa Russian: [ungear/Front-End-Checklist](https://github.com/ungear/Front-End-Checklist)\", \"* \\ud83c\\uddf9\\ud83c\\uddf7 Turkish: [eraycetinay/Front-End-Checklist](https://github.com/eraycetinay/Front-End-Checklist)\", \"* \\ud83c\\udde9\\ud83c\\uddea German: [xfuture603/Front-End-Checklist](https://github.com/xFuture603/Front-End-Checklist)\", \"* \\ud83c\\uddf5\\ud83c\\uddf1 Polish: [mbiesiad/Front-End-Checklist](https://github.com/mbiesiad/Front-End-Checklist)\", \"\", \"---\", \"\", \"\", \"If you want to show you are following the rules of the Front-End Checklist, put this badge on your README file!\", \"\", \"\\u2794 [![Front\\u2011End_Checklist followed](https://img.shields.io/badge/Front\\u2011End_Checklist-followed-brightgreen.svg)](https://github.com/thedaviddias/Front-End-Checklist/)\", \"\", \"```md\", \"[![Front\\u2011End_Checklist followed](https://img.shields.io/badge/Front\\u2011End_Checklist-followed-brightgreen.svg)](https://github.com/thedaviddias/Front-End-Checklist/)\", \"```\", \"\", \"**[\\u2b06 back to top](#table-of-contents)**\", \"\", \"---\", \"\"]}, \"SEO\": {}, \"Translations\": {}, \"Front-End Checklist Badge\": {}, \"Support\": {}, \"Author\": {}, \"Contributors\": {}, \"Backers\": {}, \"Sponsors\": {}, \"License\": {}}}, {\"name\": \"API Security Checklist\", \"content\": {\"API Security Checklist\": {\"Authentication\": [\"- [ ] Don't use `Basic Auth`. Use standard authentication instead (e.g. [JWT](https://jwt.io/), [OAuth](https://oauth.net/)).\", \"- [ ] Don't reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards.\", \"- [ ] Use `Max Retry` and jail features in Login.\", \"- [ ] Use encryption on all sensitive data.\", \"\", \"### JWT (JSON Web Token)\", \"- [ ] Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.\", \"- [ ] Don't extract the algorithm from the header. Force the algorithm in the backend (`HS256` or `RS256`).\", \"- [ ] Make token expiration (`TTL`, `RTTL`) as short as possible.\", \"- [ ] Don't store sensitive data in the JWT payload, it can be decoded [easily](https://jwt.io/#debugger-io).\", \"\", \"### OAuth\", \"- [ ] Always validate `redirect_uri` server-side to allow only whitelisted URLs.\", \"- [ ] Always try to exchange for code and not tokens (don't allow `response_type=token`).\", \"- [ ] Use `state` parameter with a random hash to prevent CSRF on the OAuth authentication process.\", \"- [ ] Define the default scope, and validate scope parameters for each application.\", \"\"], \"Access\": [\"- [ ] Limit requests (Throttling) to avoid DDoS / brute-force attacks.\", \"- [ ] Use HTTPS on server side to avoid MITM (Man in the Middle Attack).\", \"- [ ] Use `HSTS` header with SSL to avoid SSL Strip attack.\", \"- [ ] For private APIs, only allow access from whitelisted IPs/hosts.\", \"\"], \"Input\": [\"- [ ] Use the proper HTTP method according to the operation: `GET (read)`, `POST (create)`, `PUT/PATCH (replace/update)`, and `DELETE (to delete a record)`, and respond with `405 Method Not Allowed` if the requested method isn't appropriate for the requested resource.\", \"- [ ] Validate `content-type` on request Accept header (Content Negotiation) to allow only your supported format (e.g. `application/xml`, `application/json`, etc.) and respond with `406 Not Acceptable` response if not matched.\", \"- [ ] Validate `content-type` of posted data as you accept (e.g. `application/x-www-form-urlencoded`, `multipart/form-data`, `application/json`, etc.).\", \"- [ ] Validate user input to avoid common vulnerabilities (e.g. `XSS`, `SQL-Injection`, `Remote Code Execution`, etc.).\", \"- [ ] Don't use any sensitive data (`credentials`, `Passwords`, `security tokens`, or `API keys`) in the URL, but use standard Authorization header.\", \"- [ ] Use an API Gateway service to enable caching, Rate Limit policies (e.g. `Quota`, `Spike Arrest`, or `Concurrent Rate Limit`) and deploy APIs resources dynamically.\", \"\"], \"Processing\": [\"- [ ] Check if all the endpoints are protected behind authentication to avoid broken authentication process.\", \"- [ ] User own resource ID should be avoided. Use `/me/orders` instead of `/user/654321/orders`.\", \"- [ ] Don't auto-increment IDs. Use `UUID` instead.\", \"- [ ] If you are parsing XML files, make sure entity parsing is not enabled to avoid `XXE` (XML external entity attack).\", \"- [ ] If you are parsing XML files, make sure entity expansion is not enabled to avoid `Billion Laughs/XML bomb` via exponential entity expansion attack.\", \"- [ ] Use a CDN for file uploads.\", \"- [ ] If you are dealing with huge amount of data, use Workers and Queues to process as much as possible in background and return response fast to avoid HTTP Blocking.\", \"- [ ] Do not forget to turn the DEBUG mode OFF.\", \"\"], \"Output\": [\"- [ ] Send `X-Content-Type-Options: nosniff` header.\", \"- [ ] Send `X-Frame-Options: deny` header.\", \"- [ ] Send `Content-Security-Policy: default-src 'none'` header.\", \"- [ ] Remove fingerprinting headers - `X-Powered-By`, `Server`, `X-AspNet-Version`, etc.\", \"- [ ] Force `content-type` for your response. If you return `application/json`, then your `content-type` response is `application/json`.\", \"- [ ] Don't return sensitive data like `credentials`, `Passwords`, or `security tokens`.\", \"- [ ] Return the proper status code according to the operation completed. (e.g. `200 OK`, `400 Bad Request`, `401 Unauthorized`, `405 Method Not Allowed`, etc.).\", \"\"], \"CI & CD\": [\"- [ ] Audit your design and implementation with unit/integration tests coverage.\", \"- [ ] Use a code review process and disregard self-approval.\", \"- [ ] Ensure that all components of your services are statically scanned by AV software before pushing to production, including vendor libraries and other dependencies.\", \"- [ ] Design a rollback solution for deployments.\", \"\", \"\", \"---\", \"\"], \"See also:\": [\"- [yosriady/api-development-tools](https://github.com/yosriady/api-development-tools) - A collection of useful resources for building RESTful HTTP+JSON APIs.\", \"\", \"\", \"---\", \"\", \"Feel free to contribute by forking this repository, making some changes, and submitting pull requests. For any questions drop us an email at `team@shieldfy.io`.\", \"\"]}, \"Contribution\": {}}}, {\"name\": \"The Art of Command Line\", \"content\": {\"The Art of Command Line\": {\"Meta\": [\"\", \"Scope:\", \"\", \"- This guide is for both beginners and experienced users. The goals are *breadth* (everything important), *specificity* (give concrete examples of the most common case), and *brevity* (avoid things that aren't essential or digressions you can easily look up elsewhere). Every tip is essential in some situation or significantly saves time over alternatives.\", \"- This is written for Linux, with the exception of the \\\"[macOS only](#macos-only)\\\" and \\\"[Windows only](#windows-only)\\\" sections. Many of the other items apply or can be installed on other Unices or macOS (or even Cygwin).\", \"- The focus is on interactive Bash, though many tips apply to other shells and to general Bash scripting.\", \"- It includes both \\\"standard\\\" Unix commands as well as ones that require special package installs -- so long as they are important enough to merit inclusion.\", \"\", \"Notes:\", \"\", \"- To keep this to one page, content is implicitly included by reference. You're smart enough to look up more detail elsewhere once you know the idea or command to Google. Use `apt`, `yum`, `dnf`, `pacman`, `pip` or `brew` (as appropriate) to install new programs.\", \"- Use [Explainshell](http://explainshell.com/) to get a helpful breakdown of what commands, options, pipes etc. do.\", \"\", \"\"], \"Basics\": [\"\", \"- Learn basic Bash. Actually, type `man bash` and at least skim the whole thing; it's pretty easy to follow and not that long. Alternate shells can be nice, but Bash is powerful and always available (learning *only* zsh, fish, etc., while tempting on your own laptop, restricts you in many situations, such as using existing servers).\", \"\", \"- Learn at least one text-based editor well. The `nano` editor is one of the simplest for basic editing (opening, editing, saving, searching). However, for the power user in a text terminal, there is no substitute for Vim (`vi`), the hard-to-learn but venerable, fast, and full-featured editor. Many people also use the classic Emacs, particularly for larger editing tasks. (Of course, any modern software developer working on an extensive project is unlikely to use only a pure text-based editor and should also be familiar with modern graphical IDEs and tools.)\", \"\", \"- Finding documentation:\", \"  - Know how to read official documentation with `man` (for the inquisitive, `man man` lists the section numbers, e.g. 1 is \\\"regular\\\" commands, 5 is files/conventions, and 8 are for administration). Find man pages with `apropos`.\", \"  - Know that some commands are not executables, but Bash builtins, and that you can get help on them with `help` and `help -d`. You can find out whether a command is an executable, shell builtin or an alias by using `type command`.\", \"  - `curl cheat.sh/command` will give a brief \\\"cheat sheet\\\" with common examples of how to use a shell command.\", \"\", \"- Learn about redirection of output and input using `>` and `<` and pipes using `|`. Know `>` overwrites the output file and `>>` appends. Learn about stdout and stderr.\", \"\", \"- Learn about file glob expansion with `*` (and perhaps `?` and `[`...`]`) and quoting and the difference between double `\\\"` and single `'` quotes. (See more on variable expansion below.)\", \"\", \"- Be familiar with Bash job management: `&`, **ctrl-z**, **ctrl-c**, `jobs`, `fg`, `bg`, `kill`, etc.\", \"\", \"- Know `ssh`, and the basics of passwordless authentication, via `ssh-agent`, `ssh-add`, etc.\", \"\", \"- Basic file management: `ls` and `ls -l` (in particular, learn what every column in `ls -l` means), `less`, `head`, `tail` and `tail -f` (or even better, `less +F`), `ln` and `ln -s` (learn the differences and advantages of hard versus soft links), `chown`, `chmod`, `du` (for a quick summary of disk usage: `du -hs *`). For filesystem management, `df`, `mount`, `fdisk`, `mkfs`, `lsblk`. Learn what an inode is (`ls -i` or `df -i`).\", \"\", \"- Basic network management: `ip` or `ifconfig`, `dig`, `traceroute`, `route`.\", \"\", \"- Learn and use a version control management system, such as `git`.\", \"\", \"- Know regular expressions well, and the various flags to `grep`/`egrep`. The `-i`, `-o`, `-v`, `-A`, `-B`, and `-C` options are worth knowing.\", \"\", \"- Learn to use `apt-get`, `yum`, `dnf` or `pacman` (depending on distro) to find and install packages. And make sure you have `pip` to install Python-based command-line tools (a few below are easiest to install via `pip`).\", \"\", \"\"], \"Everyday use\": [\"\", \"- In Bash, use **Tab** to complete arguments or list all available commands and **ctrl-r** to search through command history (after pressing, type to search, press **ctrl-r** repeatedly to cycle through more matches, press **Enter** to execute the found command, or hit the right arrow to put the result in the current line to allow editing).\", \"\", \"- In Bash, use **ctrl-w** to delete the last word, and **ctrl-u** to delete the content from current cursor back to the start of the line. Use **alt-b** and **alt-f** to move by word, **ctrl-a** to move cursor to beginning of line,  **ctrl-e** to move cursor to end of line, **ctrl-k** to kill to the end of the line, **ctrl-l** to clear the screen. See `man readline` for all the default keybindings in Bash. There are a lot. For example **alt-.** cycles through previous arguments, and **alt-*** expands a glob.\", \"\", \"\", \"- Alternatively, if you love vi-style key-bindings, use `set -o vi` (and `set -o emacs` to put it back).\", \"\", \"- For editing long commands, after setting your editor (for example `export EDITOR=vim`), **ctrl-x** **ctrl-e** will open the current command in an editor for multi-line editing. Or in vi style, **escape-v**.\", \"\", \"- To see recent commands, use `history`. Follow with `!n` (where `n` is the command number) to execute again. There are also many abbreviations you can use, the most useful probably being `!$` for last argument and `!!` for last command (see \\\"HISTORY EXPANSION\\\" in the man page). However, these are often easily replaced with **ctrl-r** and **alt-.**.\", \"\", \"- Go to your home directory with `cd`. Access files relative to your home directory with the `~` prefix (e.g. `~/.bashrc`). In `sh` scripts refer to the home directory as `$HOME`.\", \"\", \"- To go back to the previous working directory: `cd -`.\", \"\", \"- If you are halfway through typing a command but change your mind, hit **alt-#** to add a `#` at the beginning and enter it as a comment (or use **ctrl-a**, **#**, **enter**). You can then return to it later via command history.\", \"\", \"- Use `xargs` (or `parallel`). It's very powerful. Note you can control how many items execute per line (`-L`) as well as parallelism (`-P`). If you're not sure if it'll do the right thing, use `xargs echo` first. Also, `-I{}` is handy. Examples:\", \"```bash\", \"      find . -name '*.py' | xargs grep some_function\", \"      cat hosts | xargs -I{} ssh root@{} hostname\", \"```\", \"\", \"- `pstree -p` is a helpful display of the process tree.\", \"\", \"- Use `pgrep` and `pkill` to find or signal processes by name (`-f` is helpful).\", \"\", \"- Know the various signals you can send processes. For example, to suspend a process, use `kill -STOP [pid]`. For the full list, see `man 7 signal`\", \"\", \"- Use `nohup` or `disown` if you want a background process to keep running forever.\", \"\", \"- Check what processes are listening via `netstat -lntp` or `ss -plat` (for TCP; add `-u` for UDP) or `lsof -iTCP -sTCP:LISTEN -P -n` (which also works on macOS).\", \"\", \"- See also `lsof` and `fuser` for open sockets and files.\", \"\", \"- See `uptime` or `w` to know how long the system has been running.\", \"\", \"- Use `alias` to create shortcuts for commonly used commands. For example, `alias ll='ls -latr'` creates a new alias `ll`.\", \"\", \"- Save aliases, shell settings, and functions you commonly use in `~/.bashrc`, and [arrange for login shells to source it](http://superuser.com/a/183980/7106). This will make your setup available in all your shell sessions.\", \"\", \"- Put the settings of environment variables as well as commands that should be executed when you login in `~/.bash_profile`. Separate configuration will be needed for shells you launch from graphical environment logins and `cron` jobs.\", \"\", \"- Synchronize your configuration files (e.g. `.bashrc` and `.bash_profile`) among various computers with Git.\", \"\", \"- Understand that care is needed when variables and filenames include whitespace. Surround your Bash variables with quotes, e.g. `\\\"$FOO\\\"`. Prefer the `-0` or `-print0` options to enable null characters to delimit filenames, e.g. `locate -0 pattern | xargs -0 ls -al` or `find / -print0 -type d | xargs -0 ls -al`. To iterate on filenames containing whitespace in a for loop, set your IFS to be a newline only using `IFS=$'\\\\n'`.\", \"\", \"- In Bash scripts, use `set -x` (or the variant `set -v`, which logs raw input, including unexpanded variables and comments) for debugging output. Use strict modes unless you have a good reason not to: Use `set -e` to abort on errors (nonzero exit code). Use `set -u` to detect unset variable usages. Consider `set -o pipefail` too, to abort on errors within pipes (though read up on it more if you do, as this topic is a bit subtle). For more involved scripts, also use `trap` on EXIT or ERR. A useful habit is to start a script like this, which will make it detect and abort on common errors and print a message:\", \"```bash\", \"      set -euo pipefail\", \"      trap \\\"echo 'error: Script failed: see failed command above'\\\" ERR\", \"```\", \"\", \"- In Bash scripts, subshells (written with parentheses) are convenient ways to group commands. A common example is to temporarily move to a different working directory, e.g.\", \"```bash\", \"      # do something in current dir\", \"      (cd /some/other/dir && other-command)\", \"      # continue in original dir\", \"```\", \"\", \"- In Bash, note there are lots of kinds of variable expansion. Checking a variable exists: `${name:?error message}`. For example, if a Bash script requires a single argument, just write `input_file=${1:?usage: $0 input_file}`. Using a default value if a variable is empty: `${name:-default}`. If you want to have an additional (optional) parameter added to the previous example, you can use something like `output_file=${2:-logfile}`. If `$2` is omitted and thus empty, `output_file` will be set to `logfile`. Arithmetic expansion: `i=$(( (i + 1) % 5 ))`. Sequences: `{1..10}`. Trimming of strings: `${var%suffix}` and `${var#prefix}`. For example if `var=foo.pdf`, then `echo ${var%.pdf}.txt` prints `foo.txt`.\", \"\", \"- Brace expansion using `{`...`}` can reduce having to re-type similar text and automate combinations of items.  This is helpful in examples like `mv foo.{txt,pdf} some-dir` (which moves both files), `cp somefile{,.bak}` (which expands to `cp somefile somefile.bak`) or `mkdir -p test-{a,b,c}/subtest-{1,2,3}` (which expands all possible combinations and creates a directory tree). Brace expansion is performed before any other expansion.\", \"\", \"- The order of expansions is: brace expansion; tilde expansion, parameter and variable expansion, arithmetic expansion, and command substitution (done in a left-to-right fashion); word splitting; and filename expansion. (For example, a range like `{1..20}` cannot be expressed with variables using `{$a..$b}`. Use `seq` or a `for` loop instead, e.g., `seq $a $b` or `for((i=a; i<=b; i++)); do ... ; done`.)\", \"\", \"- The output of a command can be treated like a file via `<(some command)` (known as process substitution). For example, compare local `/etc/hosts` with a remote one:\", \"```sh\", \"      diff /etc/hosts <(ssh somehost cat /etc/hosts)\", \"```\", \"\", \"- When writing scripts you may want to put all of your code in curly braces. If the closing brace is missing, your script will be prevented from executing due to a syntax error. This makes sense when your script is going to be downloaded from the web, since it prevents partially downloaded scripts from executing:\", \"```bash\", \"{\", \"      # Your code here\", \"}\", \"```\", \"\", \"- A \\\"here document\\\" allows [redirection of multiple lines of input](https://www.tldp.org/LDP/abs/html/here-docs.html) as if from a file:\", \"```\", \"cat <<EOF\", \"input\", \"on multiple lines\", \"EOF\", \"```\", \"\", \"- In Bash, redirect both standard output and standard error via: `some-command >logfile 2>&1` or `some-command &>logfile`. Often, to ensure a command does not leave an open file handle to standard input, tying it to the terminal you are in, it is also good practice to add `</dev/null`.\", \"\", \"- Use `man ascii` for a good ASCII table, with hex and decimal values. For general encoding info, `man unicode`, `man utf-8`, and `man latin1` are helpful.\", \"\", \"- Use `screen` or [`tmux`](https://tmux.github.io/) to multiplex the screen, especially useful on remote ssh sessions and to detach and re-attach to a session. `byobu` can enhance screen or tmux by providing more information and easier management. A more minimal alternative for session persistence only is [`dtach`](https://github.com/bogner/dtach).\", \"\", \"- In ssh, knowing how to port tunnel with `-L` or `-D` (and occasionally `-R`) is useful, e.g. to access web sites from a remote server.\", \"\", \"- It can be useful to make a few optimizations to your ssh configuration; for example, this `~/.ssh/config` contains settings to avoid dropped connections in certain network environments, uses compression (which is helpful with scp over low-bandwidth connections), and multiplex channels to the same server with a local control file:\", \"```\", \"      TCPKeepAlive=yes\", \"      ServerAliveInterval=15\", \"      ServerAliveCountMax=6\", \"      Compression=yes\", \"      ControlMaster auto\", \"      ControlPath /tmp/%r@%h:%p\", \"      ControlPersist yes\", \"```\", \"\", \"- A few other options relevant to ssh are security sensitive and should be enabled with care, e.g. per subnet or host or in trusted networks: `StrictHostKeyChecking=no`, `ForwardAgent=yes`\", \"\", \"- Consider [`mosh`](https://mosh.mit.edu/) an alternative to ssh that uses UDP, avoiding dropped connections and adding convenience on the road (requires server-side setup).\", \"\", \"- To get the permissions on a file in octal form, which is useful for system configuration but not available in `ls` and easy to bungle, use something like\", \"```sh\", \"      stat -c '%A %a %n' /etc/timezone\", \"```\", \"\", \"- For interactive selection of values from the output of another command, use [`percol`](https://github.com/mooz/percol) or [`fzf`](https://github.com/junegunn/fzf).\", \"\", \"- For interaction with files based on the output of another command (like `git`), use `fpp` ([PathPicker](https://github.com/facebook/PathPicker)).\", \"\", \"- For a simple web server for all files in the current directory (and subdirs), available to anyone on your network, use:\", \"`python -m SimpleHTTPServer 7777` (for port 7777 and Python 2) and `python -m http.server 7777` (for port 7777 and Python 3).\", \"\", \"- For running a command as another user, use `sudo`. Defaults to running as root; use `-u` to specify another user. Use `-i` to login as that user (you will be asked for _your_ password).\", \"\", \"- For switching the shell to another user, use `su username` or `su - username`. The latter with \\\"-\\\" gets an environment as if another user just logged in. Omitting the username defaults to root. You will be asked for the password _of the user you are switching to_.\", \"\", \"- Know about the [128K limit](https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong) on command lines. This \\\"Argument list too long\\\" error is common when wildcard matching large numbers of files. (When this happens alternatives like `find` and `xargs` may help.)\", \"\", \"- For a basic calculator (and of course access to Python in general), use the `python` interpreter. For example,\", \"```\", \">>> 2+3\", \"5\", \"```\", \"\", \"\"], \"Processing files and data\": [\"\", \"- To locate a file by name in the current directory, `find . -iname '*something*'` (or similar). To find a file anywhere by name, use `locate something` (but bear in mind `updatedb` may not have indexed recently created files).\", \"\", \"- For general searching through source or data files, there are several options more advanced or faster than `grep -r`, including (in rough order from older to newer) [`ack`](https://github.com/beyondgrep/ack2), [`ag`](https://github.com/ggreer/the_silver_searcher) (\\\"the silver searcher\\\"), and [`rg`](https://github.com/BurntSushi/ripgrep) (ripgrep).\", \"\", \"- To convert HTML to text: `lynx -dump -stdin`\", \"\", \"- For Markdown, HTML, and all kinds of document conversion, try [`pandoc`](http://pandoc.org/). For example, to convert a Markdown document to Word format: `pandoc README.md --from markdown --to docx -o temp.docx`\", \"\", \"- If you must handle XML, `xmlstarlet` is old but good.\", \"\", \"- For JSON, use [`jq`](http://stedolan.github.io/jq/). For interactive use, also see [`jid`](https://github.com/simeji/jid) and [`jiq`](https://github.com/fiatjaf/jiq).\", \"\", \"- For YAML, use [`shyaml`](https://github.com/0k/shyaml).\", \"\", \"- For Excel or CSV files, [csvkit](https://github.com/onyxfish/csvkit) provides `in2csv`, `csvcut`, `csvjoin`, `csvgrep`, etc.\", \"\", \"- For Amazon S3, [`s3cmd`](https://github.com/s3tools/s3cmd) is convenient and [`s4cmd`](https://github.com/bloomreach/s4cmd) is faster. Amazon's [`aws`](https://github.com/aws/aws-cli) and the improved [`saws`](https://github.com/donnemartin/saws) are essential for other AWS-related tasks.\", \"\", \"- Know about `sort` and `uniq`, including uniq's `-u` and `-d` options -- see one-liners below. See also `comm`.\", \"\", \"- Know about `cut`, `paste`, and `join` to manipulate text files. Many people use `cut` but forget about `join`.\", \"\", \"- Know about `wc` to count newlines (`-l`), characters (`-m`), words (`-w`) and bytes (`-c`).\", \"\", \"- Know about `tee` to copy from stdin to a file and also to stdout, as in `ls -al | tee file.txt`.\", \"\", \"- For more complex calculations, including grouping, reversing fields, and statistical calculations, consider [`datamash`](https://www.gnu.org/software/datamash/).\", \"\", \"- Know that locale affects a lot of command line tools in subtle ways, including sorting order (collation) and performance. Most Linux installations will set `LANG` or other locale variables to a local setting like US English. But be aware sorting will change if you change locale. And know i18n routines can make sort or other commands run *many times* slower. In some situations (such as the set operations or uniqueness operations below) you can safely ignore slow i18n routines entirely and use traditional byte-based sort order, using `export LC_ALL=C`.\", \"\", \"- You can set a specific command's environment by prefixing its invocation with the environment variable settings, as in `TZ=Pacific/Fiji date`.\", \"\", \"- Know basic `awk` and `sed` for simple data munging. See [One-liners](#one-liners) for examples.\", \"\", \"- To replace all occurrences of a string in place, in one or more files:\", \"```sh\", \"      perl -pi.bak -e 's/old-string/new-string/g' my-files-*.txt\", \"```\", \"\", \"- To rename multiple files and/or search and replace within files, try [`repren`](https://github.com/jlevy/repren). (In some cases the `rename` command also allows multiple renames, but be careful as its functionality is not the same on all Linux distributions.)\", \"```sh\", \"      # Full rename of filenames, directories, and contents foo -> bar:\", \"      repren --full --preserve-case --from foo --to bar .\", \"      # Recover backup files whatever.bak -> whatever:\", \"      repren --renames --from '(.*)\\\\.bak' --to '\\\\1' *.bak\", \"      # Same as above, using rename, if available:\", \"      rename 's/\\\\.bak$//' *.bak\", \"```\", \"\", \"- As the man page says, `rsync` really is a fast and extraordinarily versatile file copying tool. It's known for synchronizing between machines but is equally useful locally. When security restrictions allow, using `rsync` instead of `scp` allows recovery of a transfer without restarting from scratch. It also is among the [fastest ways](https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html) to delete large numbers of files:\", \"```sh\", \"mkdir empty && rsync -r --delete empty/ some-dir && rmdir some-dir\", \"```\", \"\", \"- For monitoring progress when processing files, use [`pv`](http://www.ivarch.com/programs/pv.shtml), [`pycp`](https://github.com/dmerejkowsky/pycp), [`pmonitor`](https://github.com/dspinellis/pmonitor), [`progress`](https://github.com/Xfennec/progress), `rsync --progress`, or, for block-level copying, `dd status=progress`.\", \"\", \"- Use `shuf` to shuffle or select random lines from a file.\", \"\", \"- Know `sort`'s options. For numbers, use `-n`, or `-h` for handling human-readable numbers (e.g. from `du -h`). Know how keys work (`-t` and `-k`). In particular, watch out that you need to write `-k1,1` to sort by only the first field; `-k1` means sort according to the whole line. Stable sort (`sort -s`) can be useful. For example, to sort first by field 2, then secondarily by field 1, you can use `sort -k1,1 | sort -s -k2,2`.\", \"\", \"- If you ever need to write a tab literal in a command line in Bash (e.g. for the -t argument to sort), press **ctrl-v** **[Tab]** or write `$'\\\\t'` (the latter is better as you can copy/paste it).\", \"\", \"- The standard tools for patching source code are `diff` and `patch`. See also `diffstat` for summary statistics of a diff and `sdiff` for a side-by-side diff. Note `diff -r` works for entire directories. Use `diff -r tree1 tree2 | diffstat` for a summary of changes. Use `vimdiff` to compare and edit files.\", \"\", \"- For binary files, use `hd`, `hexdump` or `xxd` for simple hex dumps and `bvi`, `hexedit` or `biew` for binary editing.\", \"\", \"- Also for binary files, `strings` (plus `grep`, etc.) lets you find bits of text.\", \"\", \"- For binary diffs (delta compression), use `xdelta3`.\", \"\", \"- To convert text encodings, try `iconv`. Or `uconv` for more advanced use; it supports some advanced Unicode things. For example:\", \"```sh\", \"      # Displays hex codes or actual names of characters (useful for debugging):\", \"      uconv -f utf-8 -t utf-8 -x '::Any-Hex;' < input.txt\", \"      uconv -f utf-8 -t utf-8 -x '::Any-Name;' < input.txt\", \"      # Lowercase and removes all accents (by expanding and dropping them):\", \"      uconv -f utf-8 -t utf-8 -x '::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] >; ::Any-NFC;' < input.txt > output.txt\", \"```\", \"\", \"- To split files into pieces, see `split` (to split by size) and `csplit` (to split by a pattern).\", \"\", \"- Date and time: To get the current date and time in the helpful [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, use `date -u +\\\"%Y-%m-%dT%H:%M:%SZ\\\"` (other options [are](https://stackoverflow.com/questions/7216358/date-command-on-os-x-doesnt-have-iso-8601-i-option) [problematic](https://unix.stackexchange.com/questions/164826/date-command-iso-8601-option)). To manipulate date and time expressions, use `dateadd`, `datediff`, `strptime` etc. from [`dateutils`](http://www.fresse.org/dateutils/).\", \"\", \"- Use `zless`, `zmore`, `zcat`, and `zgrep` to operate on compressed files.\", \"\", \"- File attributes are settable via `chattr` and offer a lower-level alternative to file permissions. For example, to protect against accidental file deletion the immutable flag:  `sudo chattr +i /critical/directory/or/file`\", \"\", \"- Use `getfacl` and `setfacl` to save and restore file permissions. For example:\", \"```sh\", \"   getfacl -R /some/path > permissions.txt\", \"   setfacl --restore=permissions.txt\", \"```\", \"\", \"- To create empty files quickly, use `truncate` (creates [sparse file](https://en.wikipedia.org/wiki/Sparse_file)), `fallocate` (ext4, xfs, btrfs and ocfs2 filesystems), `xfs_mkfile` (almost any filesystems, comes in xfsprogs package), `mkfile` (for Unix-like systems like Solaris, Mac OS).\", \"\"], \"System debugging\": [\"\", \"- For web debugging, `curl` and `curl -I` are handy, or their `wget` equivalents, or the more modern [`httpie`](https://github.com/jkbrzt/httpie).\", \"\", \"- To know current cpu/disk status, the classic tools are `top` (or the better `htop`), `iostat`, and `iotop`. Use `iostat -mxz 15` for basic CPU and detailed per-partition disk stats and performance insight.\", \"\", \"- For network connection details, use `netstat` and `ss`.\", \"\", \"- For a quick overview of what's happening on a system, `dstat` is especially useful. For broadest overview with details, use [`glances`](https://github.com/nicolargo/glances).\", \"\", \"- To know memory status, run and understand the output of `free` and `vmstat`. In particular, be aware the \\\"cached\\\" value is memory held by the Linux kernel as file cache, so effectively counts toward the \\\"free\\\" value.\", \"\", \"- Java system debugging is a different kettle of fish, but a simple trick on Oracle's and some other JVMs is that you can run `kill -3 <pid>` and a full stack trace and heap summary (including generational garbage collection details, which can be highly informative) will be dumped to stderr/logs. The JDK's `jps`, `jstat`, `jstack`, `jmap` are useful. [SJK tools](https://github.com/aragozin/jvm-tools) are more advanced.\", \"\", \"- Use [`mtr`](http://www.bitwizard.nl/mtr/) as a better traceroute, to identify network issues.\", \"\", \"- For looking at why a disk is full, [`ncdu`](https://dev.yorhel.nl/ncdu) saves time over the usual commands like `du -sh *`.\", \"\", \"- To find which socket or process is using bandwidth, try [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) or [`nethogs`](https://github.com/raboof/nethogs).\", \"\", \"- The `ab` tool (comes with Apache) is helpful for quick-and-dirty checking of web server performance. For more complex load testing, try `siege`.\", \"\", \"- For more serious network debugging, [`wireshark`](https://wireshark.org/), [`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html), or [`ngrep`](http://ngrep.sourceforge.net/).\", \"\", \"- Know about `strace` and `ltrace`. These can be helpful if a program is failing, hanging, or crashing, and you don't know why, or if you want to get a general idea of performance. Note the profiling option (`-c`), and the ability to attach to a running process (`-p`). Use trace child option (`-f`) to avoid missing important calls.\", \"\", \"- Know about `ldd` to check shared libraries etc \\u2014 but [never run it on untrusted files](http://www.catonmat.net/blog/ldd-arbitrary-code-execution/).\", \"\", \"- Know how to connect to a running process with `gdb` and get its stack traces.\", \"\", \"- Use `/proc`. It's amazingly helpful sometimes when debugging live problems. Examples: `/proc/cpuinfo`, `/proc/meminfo`, `/proc/cmdline`, `/proc/xxx/cwd`, `/proc/xxx/exe`, `/proc/xxx/fd/`, `/proc/xxx/smaps` (where `xxx` is the process id or pid).\", \"\", \"- When debugging why something went wrong in the past, [`sar`](http://sebastien.godard.pagesperso-orange.fr/) can be very helpful. It shows historic statistics on CPU, memory, network, etc.\", \"\", \"- For deeper systems and performance analyses, look at `stap` ([SystemTap](https://sourceware.org/systemtap/wiki)), [`perf`](https://en.wikipedia.org/wiki/Perf_%28Linux%29), and [`sysdig`](https://github.com/draios/sysdig).\", \"\", \"- Check what OS you're on with `uname` or `uname -a` (general Unix/kernel info) or `lsb_release -a` (Linux distro info).\", \"\", \"- Use `dmesg` whenever something's acting really funny (it could be hardware or driver issues).\", \"\", \"- If you delete a file and it doesn't free up expected disk space as reported by `du`, check whether the file is in use by a process:\", \"`lsof | grep deleted | grep \\\"filename-of-my-big-file\\\"`\", \"\", \"\"], \"One-liners\": [\"\", \"A few examples of piecing together commands:\", \"\", \"- It is remarkably helpful sometimes that you can do set intersection, union, and difference of text files via `sort`/`uniq`. Suppose `a` and `b` are text files that are already uniqued. This is fast, and works on files of arbitrary size, up to many gigabytes. (Sort is not limited by memory, though you may need to use the `-T` option if `/tmp` is on a small root partition.) See also the note about `LC_ALL` above and `sort`'s `-u` option (left out for clarity below).\", \"```sh\", \"      sort a b | uniq > c   # c is a union b\", \"      sort a b | uniq -d > c   # c is a intersect b\", \"      sort a b b | uniq -u > c   # c is set difference a - b\", \"```\", \"\", \"- Pretty-print two JSON files, normalizing their syntax, then coloring and paginating the result:\", \"```\", \"      diff <(jq --sort-keys . < file1.json) <(jq --sort-keys . < file2.json) | colordiff | less -R\", \"```\", \"\", \"- Use `grep . *` to quickly examine the contents of all files in a directory (so each line is paired with the filename), or `head -100 *` (so each file has a heading). This can be useful for directories filled with config settings like those in `/sys`, `/proc`, `/etc`.\", \"\", \"\", \"- Summing all numbers in the third column of a text file (this is probably 3X faster and 3X less code than equivalent Python):\", \"```sh\", \"      awk '{ x += $3 } END { print x }' myfile\", \"```\", \"\", \"- To see sizes/dates on a tree of files, this is like a recursive `ls -l` but is easier to read than `ls -lR`:\", \"```sh\", \"      find . -type f -ls\", \"```\", \"\", \"- Say you have a text file, like a web server log, and a certain value that appears on some lines, such as an `acct_id` parameter that is present in the URL. If you want a tally of how many requests for each `acct_id`:\", \"```sh\", \"      egrep -o 'acct_id=[0-9]+' access.log | cut -d= -f2 | sort | uniq -c | sort -rn\", \"```\", \"\", \"- To continuously monitor changes, use `watch`, e.g. check changes to files in a directory with `watch -d -n 2 'ls -rtlh | tail'` or to network settings while troubleshooting your wifi settings with `watch -d -n 2 ifconfig`.\", \"\", \"- Run this function to get a random tip from this document (parses Markdown and extracts an item):\", \"```sh\", \"      function taocl() {\", \"        curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README.md |\", \"          sed '/cowsay[.]png/d' |\", \"          pandoc -f markdown -t html |\", \"          xmlstarlet fo --html --dropdtd |\", \"          xmlstarlet sel -t -v \\\"(html/body/ul/li[count(p)>0])[$RANDOM mod last()+1]\\\" |\", \"          xmlstarlet unesc | fmt -80 | iconv -t US\", \"      }\", \"```\", \"\", \"\"], \"Obscure but useful\": [\"\", \"- `expr`: perform arithmetic or boolean operations or evaluate regular expressions\", \"\", \"- `m4`: simple macro processor\", \"\", \"- `yes`: print a string a lot\", \"\", \"- `cal`: nice calendar\", \"\", \"- `env`: run a command (useful in scripts)\", \"\", \"- `printenv`: print out environment variables (useful in debugging and scripts)\", \"\", \"- `look`: find English words (or lines in a file) beginning with a string\", \"\", \"- `cut`, `paste` and `join`: data manipulation\", \"\", \"- `fmt`: format text paragraphs\", \"\", \"- `pr`: format text into pages/columns\", \"\", \"- `fold`: wrap lines of text\", \"\", \"- `column`: format text fields into aligned, fixed-width columns or tables\", \"\", \"- `expand` and `unexpand`: convert between tabs and spaces\", \"\", \"- `nl`: add line numbers\", \"\", \"- `seq`: print numbers\", \"\", \"- `bc`: calculator\", \"\", \"- `factor`: factor integers\", \"\", \"- [`gpg`](https://gnupg.org/): encrypt and sign files\", \"\", \"- `toe`: table of terminfo entries\", \"\", \"- `nc`: network debugging and data transfer\", \"\", \"- `socat`: socket relay and tcp port forwarder (similar to `netcat`)\", \"\", \"- [`slurm`](https://github.com/mattthias/slurm): network traffic visualization\", \"\", \"- `dd`: moving data between files or devices\", \"\", \"- `file`: identify type of a file\", \"\", \"- `tree`: display directories and subdirectories as a nesting tree; like `ls` but recursive\", \"\", \"- `stat`: file info\", \"\", \"- `time`: execute and time a command\", \"\", \"- `timeout`: execute a command for specified amount of time and stop the process when the specified amount of time completes.\", \"\", \"- `lockfile`: create semaphore file that can only be removed by `rm -f`\", \"\", \"- `logrotate`: rotate, compress and mail logs.\", \"\", \"- `watch`: run a command repeatedly, showing results and/or highlighting changes\", \"\", \"- [`when-changed`](https://github.com/joh/when-changed): runs any command you specify whenever it sees file changed. See `inotifywait` and `entr` as well.\", \"\", \"- `tac`: print files in reverse\", \"\", \"- `comm`: compare sorted files line by line\", \"\", \"- `strings`: extract text from binary files\", \"\", \"- `tr`: character translation or manipulation\", \"\", \"- `iconv` or `uconv`: conversion for text encodings\", \"\", \"- `split` and `csplit`: splitting files\", \"\", \"- `sponge`: read all input before writing it, useful for reading from then writing to the same file, e.g., `grep -v something some-file | sponge some-file`\", \"\", \"- `units`: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also `/usr/share/units/definitions.units`)\", \"\", \"- `apg`: generates random passwords\", \"\", \"- `xz`: high-ratio file compression\", \"\", \"- `ldd`: dynamic library info\", \"\", \"- `nm`: symbols from object files\", \"\", \"- `ab` or [`wrk`](https://github.com/wg/wrk): benchmarking web servers\", \"\", \"- `strace`: system call debugging\", \"\", \"- [`mtr`](http://www.bitwizard.nl/mtr/): better traceroute for network debugging\", \"\", \"- `cssh`: visual concurrent shell\", \"\", \"- `rsync`: sync files and folders over SSH or in local file system\", \"\", \"- [`wireshark`](https://wireshark.org/) and [`tshark`](https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html): packet capture and network debugging\", \"\", \"- [`ngrep`](http://ngrep.sourceforge.net/): grep for the network layer\", \"\", \"- `host` and `dig`: DNS lookups\", \"\", \"- `lsof`: process file descriptor and socket info\", \"\", \"- `dstat`: useful system stats\", \"\", \"- [`glances`](https://github.com/nicolargo/glances): high level, multi-subsystem overview\", \"\", \"- `iostat`: Disk usage stats\", \"\", \"- `mpstat`: CPU usage stats\", \"\", \"- `vmstat`: Memory usage stats\", \"\", \"- `htop`: improved version of top\", \"\", \"- `last`: login history\", \"\", \"- `w`: who's logged on\", \"\", \"- `id`: user/group identity info\", \"\", \"- [`sar`](http://sebastien.godard.pagesperso-orange.fr/): historic system stats\", \"\", \"- [`iftop`](http://www.ex-parrot.com/~pdw/iftop/) or [`nethogs`](https://github.com/raboof/nethogs): network utilization by socket or process\", \"\", \"- `ss`: socket statistics\", \"\", \"- `dmesg`: boot and system error messages\", \"\", \"- `sysctl`: view and configure Linux kernel parameters at run time\", \"\", \"- `hdparm`: SATA/ATA disk manipulation/performance\", \"\", \"- `lsblk`: list block devices: a tree view of your disks and disk partitions\", \"\", \"- `lshw`, `lscpu`, `lspci`, `lsusb`, `dmidecode`: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.\", \"\", \"- `lsmod` and `modinfo`: List and show details of kernel modules.\", \"\", \"- `fortune`, `ddate`, and `sl`: um, well, it depends on whether you consider steam locomotives and Zippy quotations \\\"useful\\\"\", \"\", \"\"], \"macOS only\": [\"\", \"These are items relevant *only* on macOS.\", \"\", \"- Package management with `brew` (Homebrew) and/or `port` (MacPorts). These can be used to install on macOS many of the above commands.\", \"\", \"- Copy output of any command to a desktop app with `pbcopy` and paste input from one with `pbpaste`.\", \"\", \"- To enable the Option key in macOS Terminal as an alt key (such as used in the commands above like **alt-b**, **alt-f**, etc.), open Preferences -> Profiles -> Keyboard and select \\\"Use Option as Meta key\\\".\", \"\", \"- To open a file with a desktop app, use `open` or `open -a /Applications/Whatever.app`.\", \"\", \"- Spotlight: Search files with `mdfind` and list metadata (such as photo EXIF info) with `mdls`.\", \"\", \"- Be aware macOS is based on BSD Unix, and many commands (for example `ps`, `ls`, `tail`, `awk`, `sed`) have many subtle variations from Linux, which is largely influenced by System V-style Unix and GNU tools. You can often tell the difference by noting a man page has the heading \\\"BSD General Commands Manual.\\\" In some cases GNU versions can be installed, too (such as `gawk` and `gsed` for GNU awk and sed). If writing cross-platform Bash scripts, avoid such commands (for example, consider Python or `perl`) or test carefully.\", \"\", \"- To get macOS release information, use `sw_vers`.\", \"\"], \"Windows only\": [\"\", \"These items are relevant *only* on Windows.\", \"\", \"### Ways to obtain Unix tools under Windows\", \"\", \"- Access the power of the Unix shell under Microsoft Windows by installing [Cygwin](https://cygwin.com/). Most of the things described in this document will work out of the box.\", \"\", \"- On Windows 10, you can use [Windows Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about), which provides a familiar Bash environment with Unix command line utilities.\", \"\", \"- If you mainly want to use GNU developer tools (such as GCC) on Windows, consider [MinGW](http://www.mingw.org/) and its [MSYS](http://www.mingw.org/wiki/msys) package, which provides utilities such as bash, gawk, make and grep. MSYS doesn't have all the features compared to Cygwin. MinGW is particularly useful for creating native Windows ports of Unix tools.\", \"\", \"- Another option to get Unix look and feel under Windows is [Cash](https://github.com/dthree/cash). Note that only very few Unix commands and command-line options are available in this environment.\", \"\", \"### Useful Windows command-line tools\", \"\", \"- You can perform and script most Windows system administration tasks from the command line by learning and using `wmic`.\", \"\", \"- Native command-line Windows networking tools you may find useful include `ping`, `ipconfig`, `tracert`, and `netstat`.\", \"\", \"- You can perform [many useful Windows tasks](http://www.thewindowsclub.com/rundll32-shortcut-commands-windows) by invoking the `Rundll32` command.\", \"\", \"### Cygwin tips and tricks\", \"\", \"- Install additional Unix programs with the Cygwin's package manager.\", \"\", \"- Use `mintty` as your command-line window.\", \"\", \"- Access the Windows clipboard through `/dev/clipboard`.\", \"\", \"- Run `cygstart` to open an arbitrary file through its registered application.\", \"\", \"- Access the Windows registry with `regtool`.\", \"\", \"- Note that a `C:\\\\` Windows drive path becomes `/cygdrive/c` under Cygwin, and that Cygwin's `/` appears under `C:\\\\cygwin` on Windows. Convert between Cygwin and Windows-style file paths with `cygpath`. This is most useful in scripts that invoke Windows programs.\", \"\"], \"More resources\": [\"\", \"- [awesome-shell](https://github.com/alebcay/awesome-shell): A curated list of shell tools and resources.\", \"- [awesome-osx-command-line](https://github.com/herrbischoff/awesome-osx-command-line): A more in-depth guide for the macOS command line.\", \"- [Strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) for writing better shell scripts.\", \"- [shellcheck](https://github.com/koalaman/shellcheck): A shell script static analysis tool. Essentially, lint for bash/sh/zsh.\", \"- [Filenames and Pathnames in Shell](http://www.dwheeler.com/essays/filenames-in-shell.html): The sadly complex minutiae on how to handle filenames correctly in shell scripts.\", \"- [Data Science at the Command Line](http://datascienceatthecommandline.com/#tools): More commands and tools helpful for doing data science, from the book of the same name\", \"\"], \"Disclaimer\": [\"\", \"With the exception of very small tasks, code is written so others can read it. With power comes responsibility. The fact you *can* do something in Bash doesn't necessarily mean you should! ;)\", \"\", \"\"], \"License\": [\"\", \"[![Creative Commons License](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)](http://creativecommons.org/licenses/by-sa/4.0/)\", \"\", \"This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\", \"\"]}}}, {\"name\": \"Neovim lua guide\", \"content\": {\"Getting started using Lua in Neovim\": {\"Translations\": [\"\", \"- [\\ud83c\\udde8\\ud83c\\uddf3 Chinese version](https://github.com/glepnir/nvim-lua-guide-zh)\", \"- [\\ud83c\\udde7\\ud83c\\uddf7 Portuguese version](https://github.com/npxbr/nvim-lua-guide/blob/master/README.pt-br.md)\", \"- [\\ud83c\\uddef\\ud83c\\uddf5 Japanese version](https://github.com/willelz/nvim-lua-guide-ja/blob/master/README.ja.md)\", \"- [\\ud83c\\uddf7\\ud83c\\uddfa Russian version](https://github.com/kuator/nvim-lua-guide-ru)\", \"\"], \"Introduction\": [\"\", \"The [integration of Lua](https://www.youtube.com/watch?v=IP3J56sKtn0) as a [first-class language inside Neovim](https://github.com/neovim/neovim/wiki/FAQ#why-embed-lua-instead-of-x) is shaping up to be one of its killer features.\", \"However, the amount of teaching material for learning how to write plugins in Lua is not as large as what you would find for writing them in Vimscript. This is an attempt at providing some basic information to get people started.\", \"\", \"This guide assumes you are using the latest [nightly build](https://github.com/neovim/neovim/releases/tag/nightly) of Neovim. Since version 0.5 of Neovim is a development version, keep in mind that some APIs that are being actively worked on are not quite stable and might change before release.\", \"\", \"### Learning Lua\", \"\", \"If you are not already familiar with the language, there are plenty of resources to get started:\", \"\", \"- The [Learn X in Y minutes page about Lua](https://learnxinyminutes.com/docs/lua/) should give you a quick overview of the basics\", \"- [This guide](https://github.com/medwatt/Notes/blob/main/Lua/Lua_Quick_Guide.ipynb) is also a good resource for getting started quickly\", \"- If videos are more to your liking, Derek Banas has a [1-hour tutorial on the language](https://www.youtube.com/watch?v=iMacxZQMPXs)\", \"- The [lua-users wiki](http://lua-users.org/wiki/LuaDirectory) is full of useful information on all kinds of Lua-related topics\", \"- The [official reference manual for Lua](https://www.lua.org/manual/5.1/) should give you the most comprehensive tour of the language (exists as a Vimdoc plugin if you want to read it from the comfort of your editor: [wsdjeg/luarefvim](https://github.com/wsdjeg/luarefvim))\", \"\", \"It should also be noted that Lua is a very clean and simple language. It is easy to learn, especially if you have experience with similar scripting languages like JavaScript. You may already know more Lua than you realise!\", \"\", \"Note: the version of Lua that Neovim embeds is [LuaJIT](https://staff.fnwi.uva.nl/h.vandermeer/docs/lua/luajit/luajit_intro.html) 2.1.0, which maintains compatibility with Lua 5.1 (with a few 5.2 extensions).\", \"\", \"### Existing tutorials for writing Lua in Neovim\", \"\", \"A few tutorials have already been written to help people write plugins in Lua. Some of them helped quite a bit when writing this guide. Many thanks to their authors.\", \"\", \"- [teukka.tech - From init.vim to init.lua](https://teukka.tech/luanvim.html)\", \"- [dev.to - How to write neovim plugins in Lua](https://dev.to/2nit/how-to-write-neovim-plugins-in-lua-5cca)\", \"- [dev.to - How to make UI for neovim plugins in Lua](https://dev.to/2nit/how-to-make-ui-for-neovim-plugins-in-lua-3b6e)\", \"- [ms-jpq - Neovim Async Tutorial](https://github.com/ms-jpq/neovim-async-tutorial)\", \"- [oroques.dev - Neovim 0.5 features and the switch to init.lua](https://oroques.dev/notes/neovim-init/)\", \"\", \"### Companion plugins\", \"\", \"- [Vimpeccable](https://github.com/svermeulen/vimpeccable) - Plugin to help write your .vimrc in Lua\", \"- [plenary.nvim](https://github.com/nvim-lua/plenary.nvim) - All the lua functions I don't want to write twice\", \"- [popup.nvim](https://github.com/nvim-lua/popup.nvim) - An implementation of the Popup API from vim in Neovim\", \"- [nvim_utils](https://github.com/norcalli/nvim_utils)\", \"- [nvim-luadev](https://github.com/bfredl/nvim-luadev) - REPL/debug console for nvim lua plugins\", \"- [nvim-luapad](https://github.com/rafcamlet/nvim-luapad) - Interactive real time neovim scratchpad for embedded lua engine\", \"- [nlua.nvim](https://github.com/tjdevries/nlua.nvim) - Lua Development for Neovim\", \"- [BetterLua.vim](https://github.com/euclidianAce/BetterLua.vim) - Better Lua syntax highlighting in Vim/NeoVim\", \"\"], \"Where to put Lua files\": [\"\", \"### init.lua\", \"\", \"Neovim supports loading an `init.lua` file for configuration instead of the usual `init.vim`.\", \"\", \"See also:\", \"- `:help config`\", \"\", \"### Other Lua files\", \"\", \"Lua files are typically found inside a `lua/` folder in your `runtimepath` (for most users, this will mean `~/.config/nvim/lua` on *nix systems and `~/AppData/Local/nvim/lua` on Windows). You can `require()` these files as Lua modules.\", \"\", \"Let's take the following folder structure as an example:\", \"\", \"```text\", \"\\ud83d\\udcc2 ~/.config/nvim\", \"\\u251c\\u2500\\u2500 \\ud83d\\udcc1 after\", \"\\u251c\\u2500\\u2500 \\ud83d\\udcc1 ftplugin\", \"\\u251c\\u2500\\u2500 \\ud83d\\udcc2 lua\", \"\\u2502  \\u251c\\u2500\\u2500 \\ud83c\\udf11 myluamodule.lua\", \"\\u2502  \\u2514\\u2500\\u2500 \\ud83d\\udcc2 other_modules\", \"\\u2502     \\u251c\\u2500\\u2500 \\ud83c\\udf11 anothermodule.lua\", \"\\u2502     \\u2514\\u2500\\u2500 \\ud83c\\udf11 init.lua\", \"\\u251c\\u2500\\u2500 \\ud83d\\udcc1 pack\", \"\\u251c\\u2500\\u2500 \\ud83d\\udcc1 plugin\", \"\\u251c\\u2500\\u2500 \\ud83d\\udcc1 syntax\", \"\\u2514\\u2500\\u2500 \\ud83c\\uddfb init.vim\", \"```\", \"\", \"The following Lua code will load `myluamodule.lua`:\", \"\", \"```lua\", \"require('myluamodule')\", \"```\", \"\", \"Notice the absence of a `.lua` extension.\", \"\", \"Similarly, loading `other_modules/anothermodule.lua` is done like so:\", \"\", \"```lua\", \"require('other_modules.anothermodule')\", \"-- or\", \"require('other_modules/anothermodule')\", \"```\", \"\", \"Path separators are denoted by either a dot `.` or a slash `/`.\", \"\", \"A folder containing an `init.lua` file can be required directly, without having to specify the name of the file.\", \"\", \"```lua\", \"require('other_modules') -- loads other_modules/init.lua\", \"```\", \"\", \"For more information: `:help lua-require`\", \"\", \"#### Caveats\", \"\", \"Unlike .vim files, .lua files are not automatically sourced from special directories in your `runtimepath`. For example, Neovim can load `plugin/foo.vim` automatically but not `plugin/foo.lua`.\", \"\", \"See also:\", \"- [Issue #12670](https://github.com/neovim/neovim/issues/12670)\", \"\", \"#### Tips\", \"\", \"Several Lua plugins might have identical filenames in their `lua/` folder. This could lead to namespace clashes.\", \"\", \"If two different plugins have a `lua/main.lua` file, then doing `require('main')` is ambiguous: which file do we want to source?\", \"\", \"It might be a good idea to namespace your config or your plugin with a top-level folder, like so: `lua/plugin_name/main.lua`\", \"\"], \"Using Lua from Vimscript\": [\"\", \"### :lua\", \"\", \"This command executes a chunk of Lua code.\", \"\", \"```vim\", \":lua require('myluamodule')\", \"```\", \"\", \"Multi-line scripts are possible using heredoc syntax:\", \"\", \"```vim\", \"echo \\\"Here's a bigger chunk of Lua code\\\"\", \"\", \"lua << EOF\", \"local mod = require('mymodule')\", \"local tbl = {1, 2, 3}\", \"\", \"for k, v in ipairs(tbl) do\", \"    mod.method(v)\", \"end\", \"\", \"print(tbl)\", \"EOF\", \"```\", \"\", \"Note: each `:lua` command has its own scope and variables declared with the `local` keyword are not accessible outside of the command. This won't work:\", \"\", \"```vim\", \":lua local foo = 1\", \":lua print(foo)\", \"\\\" prints 'nil' instead of '1'\", \"```\", \"\", \"Note 2: the `print()` function in Lua behaves similarly to the `:echomsg` command. Its output is saved in the message-history and can be suppressed by the `:silent` command.\", \"\", \"See also:\", \"\", \"- `:help :lua`\", \"- `:help :lua-heredoc`\", \"\", \"### :luado\", \"\", \"This command executes a chunk of Lua code that acts on a range of lines in the current buffer. If no range is specified, the whole buffer is used instead. Whatever string is `return`ed from the chunk is used to determine what each line should be replaced with.\", \"\", \"The following command would replace every line in the current buffer with the text `hello world`:\", \"\", \"```vim\", \":luado return 'hello world'\", \"```\", \"\", \"Two implicit `line` and `linenr` variables are also provided. `line` is the text of the line being iterated upon whereas `linenr` is its number. The following command would make every line whose number is divisible by 2 uppercase:\", \"\", \"```vim\", \":luado if linenr % 2 == 0 then return line:upper() end\", \"```\", \"\", \"See also:\", \"\", \"- `:help :luado`\", \"\", \"### :luafile\", \"\", \"This command sources a Lua file.\", \"\", \"```vim\", \":luafile ~/foo/bar/baz/myluafile.lua\", \"```\", \"\", \"It is analogous to the `:source` command for .vim files or the built-in `dofile()` function in Lua.\", \"\", \"See also:\", \"\", \"- `:help :luafile`\", \"\", \"#### luafile vs require():\", \"\", \"You might be wondering what the difference between `lua require()` and `luafile` is and whether you should use one over the other. They have different use cases:\", \"\", \"- `require()`:\", \"    - is a built-in Lua function. It allows you to take advantage of Lua's module system\", \"    - searches for modules in `lua` folders in your `runtimepath`\", \"    - keeps track of what modules have been loaded and prevents a script from being parsed and executed a second time. If you change the file containing the code for a module and try to `require()` it a second time while Neovim is running, the module will not actually update\", \"- `:luafile`:\", \"    - is an Ex command. It does not support modules\", \"    - takes a path that is either absolute or relative to the working directory of the current window\", \"    - executes the contents of a script regardless of whether it has been executed before\", \"\", \"`:luafile` can also be useful if you want run a Lua file you are working on:\", \"\", \"```vim\", \":luafile %\", \"```\", \"\", \"### luaeval()\", \"\", \"This built-in Vimscript function evaluates a Lua expression string and returns its value. Lua data types are automatically converted to Vimscript types (and vice versa).\", \"\", \"```vim\", \"\\\" You can store the result in a variable\", \"let variable = luaeval('1 + 1')\", \"echo variable\", \"\\\" 2\", \"let concat = luaeval('\\\"Lua\\\"..\\\" is \\\"..\\\"awesome\\\"')\", \"echo concat\", \"\\\" 'Lua is awesome'\", \"\", \"\\\" List-like tables are converted to Vim lists\", \"let list = luaeval('{1, 2, 3, 4}')\", \"echo list[0]\", \"\\\" 1\", \"echo list[1]\", \"\\\" 2\", \"\\\" Note that unlike Lua tables, Vim lists are 0-indexed\", \"\", \"\\\" Dict-like tables are converted to Vim dictionaries\", \"let dict = luaeval('{foo = \\\"bar\\\", baz = \\\"qux\\\"}')\", \"echo dict.foo\", \"\\\" 'bar'\", \"\", \"\\\" Same thing for booleans and nil\", \"echo luaeval('true')\", \"\\\" v:true\", \"echo luaeval('nil')\", \"\\\" v:null\", \"\", \"\\\" You can create Vimscript aliases for Lua functions\", \"let LuaMathPow = luaeval('math.pow')\", \"echo LuaMathPow(2, 2)\", \"\\\" 4\", \"let LuaModuleFunction = luaeval('require(\\\"mymodule\\\").myfunction')\", \"call LuaModuleFunction()\", \"\", \"\\\" It is also possible to pass Lua functions as values to Vim functions\", \"lua X = function(k, v) return string.format(\\\"%s:%s\\\", k, v) end\", \"echo map([1, 2, 3], luaeval(\\\"X\\\"))\", \"```\", \"\", \"`luaeval()` takes an optional second argument that allows you to pass data to the expression. You can then access that data from Lua using the magic global `_A`:\", \"\", \"```vim\", \"echo luaeval('_A[1] + _A[2]', [1, 1])\", \"\\\" 2\", \"\", \"echo luaeval('string.format(\\\"Lua is %s\\\", _A)', 'awesome')\", \"\\\" 'Lua is awesome'\", \"```\", \"\", \"See also:\", \"- `:help luaeval()`\", \"\", \"### v:lua\", \"\", \"This global Vim variable allows you to call Lua functions in the global namespace ([`_G`](https://www.lua.org/manual/5.1/manual.html#pdf-_G)) directly from Vimscript. Again, Vim data types are converted to Lua types and vice versa.\", \"\", \"```vim\", \"call v:lua.print('Hello from Lua!')\", \"\\\" 'Hello from Lua!'\", \"\", \"let scream = v:lua.string.rep('A', 10)\", \"echo scream\", \"\\\" 'AAAAAAAAAA'\", \"\", \"\\\" How about a nice statusline?\", \"lua << EOF\", \"function _G.statusline()\", \"    local filepath = '%f'\", \"    local align_section = '%='\", \"    local percentage_through_file = '%p%%'\", \"    return string.format(\", \"        '%s%s%s',\", \"        filepath,\", \"        align_section,\", \"        percentage_through_file\", \"    )\", \"end\", \"EOF\", \"\", \"set statusline=%!v:lua.statusline()\", \"\", \"\\\" Also works in expression mappings\", \"lua << EOF\", \"function _G.check_back_space()\", \"    local col = vim.api.nvim_win_get_cursor(0)[2]\", \"    return (col == 0 or vim.api.nvim_get_current_line():sub(col, col):match('%s')) and true\", \"end\", \"EOF\", \"\", \"inoremap <silent> <expr> <Tab>\", \"    \\\\ pumvisible() ? \\\"\\\\<C-n>\\\" :\", \"    \\\\ v:lua.check_back_space() ? \\\"\\\\<Tab>\\\" :\", \"    \\\\ completion#trigger_completion()\", \"```\", \"\", \"See also:\", \"- `:help v:lua`\", \"- `:help v:lua-call`\", \"\", \"#### Caveats\", \"\", \"This variable can only be used to call functions. The following will always throw an error:\", \"\", \"```vim\", \"\\\" Aliasing functions doesn't work\", \"let LuaPrint = v:lua.print\", \"\", \"\\\" Accessing dictionaries doesn't work\", \"echo v:lua.some_global_dict['key']\", \"\", \"\\\" Using a function as a value doesn't work\", \"echo map([1, 2, 3], v:lua.global_callback)\", \"```\", \"\", \"### Tips\", \"\", \"You can get Lua syntax highlighting inside .vim files by putting `let g:vimsyn_embed = 'l'` in your configuration file. See `:help g:vimsyn_embed` for more on this option.\", \"\"], \"The vim namespace\": [\"\", \"Neovim exposes a global `vim` variable which serves as an entry point to interact with its APIs from Lua. It provides users with an extended \\\"standard library\\\" of functions as well as various sub-modules.\", \"\", \"Some notable functions and modules include:\", \"\", \"- `vim.inspect`: pretty-print Lua objects (useful for inspecting tables)\", \"- `vim.regex`: use Vim regexes from Lua\", \"- `vim.api`: module that exposes API functions (the same API used by remote plugins)\", \"- `vim.loop`: module that exposes the functionality of Neovim's event-loop (using LibUV)\", \"- `vim.lsp`: module that controls the built-in LSP client\", \"- `vim.treesitter`: module that exposes the functionality of the tree-sitter library\", \"\", \"This list is by no means comprehensive. If you wish to know more about what's made available by the `vim` variable, `:help lua-stdlib` and `:help lua-vim` are the way to go. Alternatively, you can do `:lua print(vim.inspect(vim))` to get a list of every module.\", \"\", \"#### Tips\", \"\", \"Writing `print(vim.inspect(x))` every time you want to inspect the contents of an object can get pretty tedious. It might be worthwhile to have a global wrapper function somewhere in your configuration:\", \"\", \"```lua\", \"function _G.dump(...)\", \"    local objects = vim.tbl_map(vim.inspect, {...})\", \"    print(unpack(objects))\", \"end\", \"```\", \"\", \"You can then inspect the contents of an object very quickly in your code or from the command-line:\", \"\", \"```lua\", \"dump({1, 2, 3})\", \"```\", \"\", \"```vim\", \":lua dump(vim.loop)\", \"```\", \"\", \"\", \"Additionally, you may find that built-in Lua functions are sometimes lacking compared to what you would find in other languages (for example `os.clock()` only returns a value in seconds, not milliseconds). Be sure to look at the Neovim stdlib (and `vim.fn`, more on that later), it probably has what you're looking for.\", \"\"], \"Using Vimscript from Lua\": [\"\", \"### vim.api.nvim_eval()\", \"\", \"This function evaluates a Vimscript expression string and returns its value. Vimscript data types are automatically converted to Lua types (and vice versa).\", \"\", \"It is the Lua equivalent of the `luaeval()` function in Vimscript\", \"\", \"```lua\", \"-- Data types are converted correctly\", \"print(vim.api.nvim_eval('1 + 1')) -- 2\", \"print(vim.inspect(vim.api.nvim_eval('[1, 2, 3]'))) -- { 1, 2, 3 }\", \"print(vim.inspect(vim.api.nvim_eval('{\\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"qux\\\"}'))) -- { baz = \\\"qux\\\", foo = \\\"bar\\\" }\", \"print(vim.api.nvim_eval('v:true')) -- true\", \"print(vim.api.nvim_eval('v:null')) -- nil\", \"```\", \"\", \"**TODO**: is it possible for `vim.api.nvim_eval()` to return a `funcref`?\", \"\", \"#### Caveats\", \"\", \"Unlike `luaeval()`, `vim.api.nvim_eval()` does not provide an implicit `_A` variable to pass data to the expression.\", \"\", \"### vim.api.nvim_exec()\", \"\", \"This function evaluates a chunk of Vimscript code. It takes in a string containing the source code to execute and a boolean to determine whether the output of the code should be returned by the function (you can then store the output in a variable, for example).\", \"\", \"```lua\", \"local result = vim.api.nvim_exec(\", \"[[\", \"let mytext = 'hello world'\", \"\", \"function! MyFunction(text)\", \"    echo a:text\", \"endfunction\", \"\", \"call MyFunction(mytext)\", \"]],\", \"true)\", \"\", \"print(result) -- 'hello world'\", \"```\", \"\", \"**TODO**: The docs say that script-scope (`s:`) is supported, but running this snippet with a script-scoped variable throws an error. Why?\", \"\", \"### vim.api.nvim_command()\", \"\", \"This function executes an ex command. It takes in a string containing the command to execute.\", \"\", \"```lua\", \"vim.api.nvim_command('new')\", \"vim.api.nvim_command('wincmd H')\", \"vim.api.nvim_command('set nonumber')\", \"vim.api.nvim_command('%s/foo/bar/g')\", \"```\", \"\", \"### vim.cmd()\", \"\", \"Alias for `vim.api.nvim_exec()`. Only the command argument is needed, `output` is always set to `false`.\", \"\", \"```lua\", \"vim.cmd('buffers')\", \"vim.cmd([[\", \"let g:multiline =<< EOF\", \"foo\", \"bar\", \"baz\", \"EOF\", \"]])\", \"```\", \"\", \"#### Tips\", \"\", \"Since you have to pass strings to these functions, you often end up having to escape backslashes:\", \"\", \"```lua\", \"vim.cmd('%s/\\\\\\\\Vfoo/bar/g')\", \"```\", \"\", \"Literal strings are easier to use as they do not require escaping characters:\", \"\", \"```lua\", \"vim.cmd([[%s/\\\\Vfoo/bar/g]])\", \"```\", \"\", \"### vim.api.nvim_replace_termcodes()\", \"\", \"This API function allows you to escape terminal codes and Vim keycodes.\", \"\", \"You may have come across mappings like this one:\", \"\", \"```vim\", \"inoremap <expr> <Tab> pumvisible() ? \\\"\\\\<C-n>\\\" : \\\"\\\\<Tab>\\\"\", \"```\", \"\", \"Trying to do the same in Lua can prove to be a challenge. You might be tempted to do it like this:\", \"\", \"```lua\", \"function _G.smart_tab()\", \"    return vim.fn.pumvisible() == 1 and [[\\\\<C-n>]] or [[\\\\<Tab>]]\", \"end\", \"\", \"vim.api.nvim_set_keymap('i', '<Tab>', 'v:lua.smart_tab()', {expr = true, noremap = true})\", \"```\", \"\", \"only to find out that the mapping inserts `\\\\<Tab>` and `\\\\<C-n>` literally...\", \"\", \"Being able to escape keycodes is actually a Vimscript feature. Aside from the usual escape sequences like `\\\\r`, `\\\\42` or `\\\\x10` that are common to many programming languages, Vimscript `expr-quotes` (strings surrounded with double quotes) allow you to escape the human-readable representation of Vim keycodes.\", \"\", \"Lua doesn't have such a feature built-in. Fortunately, Neovim has an API function for escaping terminal codes and keycodes: `nvim_replace_termcodes()`\", \"\", \"```lua\", \"print(vim.api.nvim_replace_termcodes('<Tab>', true, true, true))\", \"```\", \"\", \"This is a little verbose. Making a reusable wrapper can help:\", \"\", \"```lua\", \"-- The function is called `t` for `termcodes`.\", \"-- You don't have to call it that, but I find the terseness convenient\", \"local function t(str)\", \"    -- Adjust boolean arguments as needed\", \"    return vim.api.nvim_replace_termcodes(str, true, true, true)\", \"end\", \"\", \"print(t'<Tab>')\", \"```\", \"\", \"Coming back to our earlier example, this should now work as expected:\", \"\", \"```lua\", \"local function t(str)\", \"    return vim.api.nvim_replace_termcodes(str, true, true, true)\", \"end\", \"\", \"function _G.smart_tab()\", \"    return vim.fn.pumvisible() == 1 and t'<C-n>' or t'<Tab>'\", \"end\", \"\", \"vim.api.nvim_set_keymap('i', '<Tab>', 'v:lua.smart_tab()', {expr = true, noremap = true})\", \"```\", \"\", \"See also:\", \"\", \"- `:help keycodes`\", \"- `:help expr-quote`\", \"- `:help nvim_replace_termcodes()`\", \"\"], \"Managing vim options\": [\"\", \"### Using api functions\", \"\", \"Neovim provides a set of API functions to either set an option or get its current value:\", \"\", \"- Global options:\", \"    - `vim.api.nvim_set_option()`\", \"    - `vim.api.nvim_get_option()`\", \"- Buffer-local options:\", \"    - `vim.api.nvim_buf_set_option()`\", \"    - `vim.api.nvim_buf_get_option()`\", \"- Window-local options:\", \"    - `vim.api.nvim_win_set_option()`\", \"    - `vim.api.nvim_win_get_option()`\", \"\", \"They take a string containing the name of the option to set/get as well as the value you want to set it to.\", \"\", \"Boolean options (like `(no)number`) have to be set to either `true` or `false`:\", \"\", \"```lua\", \"vim.api.nvim_set_option('smarttab', false)\", \"print(vim.api.nvim_get_option('smarttab')) -- false\", \"```\", \"\", \"Unsurprisingly, string options have to be set to a string:\", \"\", \"```lua\", \"vim.api.nvim_set_option('selection', 'exclusive')\", \"print(vim.api.nvim_get_option('selection')) -- 'exclusive'\", \"```\", \"\", \"Number options accept a number:\", \"\", \"```lua\", \"vim.api.nvim_set_option('updatetime', 3000)\", \"print(vim.api.nvim_get_option('updatetime')) -- 3000\", \"```\", \"\", \"Buffer-local and window-local options also need a buffer number or a window number (using `0` will set/get the option for the current buffer/window):\", \"\", \"```lua\", \"vim.api.nvim_win_set_option(0, 'number', true)\", \"vim.api.nvim_buf_set_option(10, 'shiftwidth', 4)\", \"print(vim.api.nvim_win_get_option(0, 'number')) -- true\", \"print(vim.api.nvim_buf_get_option(10, 'shiftwidth')) -- 4\", \"```\", \"\", \"### Using meta-accessors\", \"\", \"A few meta-accessors are available if you want to set options in a more \\\"idiomatic\\\" way. They essentially wrap the above API functions and allow you to manipulate options as if they were variables:\", \"\", \"- `vim.o.{option}`: global options\", \"- `vim.bo.{option}`: buffer-local options\", \"- `vim.wo.{option}`: window-local options\", \"\", \"```lua\", \"vim.o.smarttab = false\", \"print(vim.o.smarttab) -- false\", \"vim.o.isfname = vim.o.isfname .. ',@-@' -- on Linux: set isfname+=@-@\", \"print(vim.o.listchars) -- '@,48-57,/,.,-,_,+,,,#,$,%,~,=,@-@'\", \"\", \"vim.bo.shiftwidth = 4\", \"print(vim.bo.shiftwidth) -- 4\", \"```\", \"\", \"You can specify a number for buffer-local and window-local options. If no number is given, the current buffer/window is used:\", \"\", \"```lua\", \"vim.bo[4].expandtab = true -- same as vim.api.nvim_buf_set_option(4, 'expandtab', true)\", \"vim.wo.number = true -- same as vim.api.nvim_win_set_option(0, 'number', true)\", \"```\", \"\", \"See also:\", \"- `:help lua-vim-options`\", \"\", \"#### Caveats\", \"\", \"There is no equivalent to the `:set` command in Lua, you either set an option globally or locally. If you're setting options from your `init.lua`, some of them will require you to set both `vim.o.{option}` and `vim.{wo/bo}.{option}` to work properly.\", \"\", \"See also:\", \"- `:help :setglobal`\", \"- `:help global-local`\", \"- [Pull request #13479](https://github.com/neovim/neovim/pull/13479)\", \"\"], \"Managing vim internal variables\": [\"\", \"### Using api functions\", \"\", \"Much like options, internal variables have their own set of API functions:\", \"\", \"- Global variables (`g:`):\", \"    - `vim.api.nvim_set_var()`\", \"    - `vim.api.nvim_get_var()`\", \"    - `vim.api.nvim_del_var()`\", \"- Buffer variables (`b:`):\", \"    - `vim.api.nvim_buf_set_var()`\", \"    - `vim.api.nvim_buf_get_var()`\", \"    - `vim.api.nvim_buf_del_var()`\", \"- Window variables (`w:`):\", \"    - `vim.api.nvim_win_set_var()`\", \"    - `vim.api.nvim_win_get_var()`\", \"    - `vim.api.nvim_win_del_var()`\", \"- Tabpage variables (`t:`):\", \"    - `vim.api.nvim_tabpage_set_var()`\", \"    - `vim.api.nvim_tabpage_get_var()`\", \"    - `vim.api.nvim_tabpage_del_var()`\", \"- Predefined Vim variables (`v:`):\", \"    - `vim.api.nvim_set_vvar()`\", \"    - `vim.api.nvim_get_vvar()`\", \"\", \"With the exception of predefined Vim variables, they can also be deleted (the `:unlet` command is the equivalent in Vimscript). Local variables (`l:`), script variables (`s:`) and function arguments (`a:`) cannot be manipulated as they only make sense in the context of a Vim script, Lua has its own scoping rules.\", \"\", \"If you are unfamiliar with what these variables do, `:help internal-variables` describes them in detail.\", \"\", \"These functions take a string containing the name of the variable to set/get/delete as well as the value you want to set it to.\", \"\", \"```lua\", \"vim.api.nvim_set_var('some_global_variable', { key1 = 'value', key2 = 300 })\", \"print(vim.inspect(vim.api.nvim_get_var('some_global_variable'))) -- { key1 = \\\"value\\\", key2 = 300 }\", \"vim.api.nvim_del_var('some_global_variable')\", \"```\", \"\", \"Variables that are scoped to a buffer, a window or a tabpage also receive a number (using `0` will set/get/delete the variable for the current buffer/window/tabpage):\", \"\", \"```lua\", \"vim.api.nvim_win_set_var(0, 'some_window_variable', 2500)\", \"vim.api.nvim_tab_set_var(3, 'some_tabpage_variable', 'hello world')\", \"print(vim.api.nvim_win_get_var(0, 'some_window_variable')) -- 2500\", \"print(vim.api.nvim_buf_get_var(3, 'some_tabpage_variable')) -- 'hello world'\", \"vim.api.nvim_win_del_var(0, 'some_window_variable')\", \"vim.api.nvim_buf_del_var(3, 'some_tabpage_variable')\", \"```\", \"\", \"### Using meta-accessors\", \"\", \"Internal variables can be manipulated more intuitively using these meta-accessors:\", \"\", \"- `vim.g.{name}`: global variables\", \"- `vim.b.{name}`: buffer variables\", \"- `vim.w.{name}`: window variables\", \"- `vim.t.{name}`: tabpage variables\", \"- `vim.v.{name}`: predefined Vim variables\", \"- `vim.env.{name}`: environment variables\", \"\", \"```lua\", \"vim.g.some_global_variable = {\", \"    key1 = 'value',\", \"    key2 = 300\", \"}\", \"\", \"print(vim.inspect(vim.g.some_global_variable)) -- { key1 = \\\"value\\\", key2 = 300 }\", \"```\", \"\", \"To delete one of these variables, simply assign `nil` to it:\", \"\", \"```lua\", \"vim.g.some_global_variable = nil\", \"```\", \"\", \"See also:\", \"- `:help lua-vim-variables`\", \"\", \"#### Caveats\", \"\", \"Unlike options meta-accessors, you cannot specify a number for buffer/window/tabpage-scoped variables.\", \"\", \"Additionally, you cannot add/update/delete keys from a dictionary stored in one of these variables. For example, this snippet of Vimscript code does not work as expected:\", \"\", \"```vim\", \"let g:variable = {}\", \"lua vim.g.variable.key = 'a'\", \"echo g:variable\", \"\\\" {}\", \"```\", \"\", \"This is a known issue:\", \"\", \"- [Issue #12544](https://github.com/neovim/neovim/issues/12544)\", \"\"], \"Calling Vimscript functions\": [\"\", \"### vim.fn.{function}()\", \"\", \"`vim.fn` can be used to call a Vimscript function. Data types are converted back and forth from Lua to Vimscript.\", \"\", \"```lua\", \"print(vim.fn.printf('Hello from %s', 'Lua'))\", \"\", \"local reversed_list = vim.fn.reverse({ 'a', 'b', 'c' })\", \"print(vim.inspect(reversed_list)) -- { \\\"c\\\", \\\"b\\\", \\\"a\\\" }\", \"\", \"local function print_stdout(chan_id, data, name)\", \"    print(data[1])\", \"end\", \"\", \"vim.fn.jobstart('ls', { on_stdout = print_stdout })\", \"```\", \"\", \"Strings with invalid Lua names can be used with `vim.fn[variable]`.\", \"For example, hashes (`#`) are not valid characters for indentifiers in Lua, so autoload functions have to be called with this syntax:\", \"\", \"```lua\", \"vim.fn['my#autoload#function']()\", \"```\", \"\", \"The functionality of `vim.fn` is identical to `vim.call`, but allows a more Lua-like syntax.\", \"\", \"It is distinct from `vim.api.nvim_call_function` in that converting Vim/Lua objects is automatic: `vim.api.nvim_call_function` returns a table for floating point numbers and does not accept Lua closures while `vim.fn` handles these types transparently.\", \"\", \"See also:\", \"- `:help vim.fn`\", \"\", \"#### Tips\", \"\", \"Neovim has an extensive library of powerful built-in functions that are very useful for plugins. See `:help vim-function` for an alphabetical list and `:help function-list` for a list of functions grouped by topic.\", \"\", \"Neovim API functions can be used directly through `vim.api.{..}`. See `:help api` for information.\", \"\", \"#### Caveats\", \"\", \"Some Vim functions that should return a boolean return `1` or `0` instead. This isn't a problem in Vimscript as `1` is truthy and `0` falsy, enabling constructs like these:\", \"\", \"```vim\", \"if has('nvim')\", \"    \\\" do something...\", \"endif\", \"```\", \"\", \"In Lua however, only `false` and `nil` are considered falsy, numbers always evaluate to `true` no matter their value. You have to explicitly check for `1` or `0`:\", \"\", \"```lua\", \"if vim.fn.has('nvim') == 1 then\", \"    -- do something...\", \"end\", \"```\", \"\"], \"Defining mappings\": [\"\", \"Neovim provides a list of API functions to set, get and delete mappings:\", \"\", \"- Global mappings:\", \"    - `vim.api.nvim_set_keymap()`\", \"    - `vim.api.nvim_get_keymap()`\", \"    - `vim.api.nvim_del_keymap()`\", \"- Buffer-local mappings:\", \"    - `vim.api.nvim_buf_set_keymap()`\", \"    - `vim.api.nvim_buf_get_keymap()`\", \"    - `vim.api.nvim_buf_del_keymap()`\", \"\", \"Let's start with `vim.api.nvim_set_keymap()` and `vim.api.nvim_buf_set_keymap()`\", \"\", \"The first argument passed to the function is a string containing the name of the mode for which the mapping will take effect:\", \"\", \"| String value           | Help page     | Affected modes                           | Vimscript equivalent |\", \"| ---------------------- | ------------- | ---------------------------------------- | -------------------- |\", \"| `''` (an empty string) | `mapmode-nvo` | Normal, Visual, Select, Operator-pending | `:map`               |\", \"| `'n'`                  | `mapmode-n`   | Normal                                   | `:nmap`              |\", \"| `'v'`                  | `mapmode-v`   | Visual and Select                        | `:vmap`              |\", \"| `'s'`                  | `mapmode-s`   | Select                                   | `:smap`              |\", \"| `'x'`                  | `mapmode-x`   | Visual                                   | `:xmap`              |\", \"| `'o'`                  | `mapmode-o`   | Operator-pending                         | `:omap`              |\", \"| `'!'`                  | `mapmode-ic`  | Insert and Command-line                  | `:map!`              |\", \"| `'i'`                  | `mapmode-i`   | Insert                                   | `:imap`              |\", \"| `'l'`                  | `mapmode-l`   | Insert, Command-line, Lang-Arg           | `:lmap`              |\", \"| `'c'`                  | `mapmode-c`   | Command-line                             | `:cmap`              |\", \"| `'t'`                  | `mapmode-t`   | Terminal                                 | `:tmap`              |\", \"\", \"The second argument is a string containing the left-hand side of the mapping (the key or set of keys that trigger the command defined in the mapping). An empty string is equivalent to `<Nop>`, which disables a key.\", \"\", \"The third argument is a string containing the right-hand side of the mapping (the command to execute).\", \"\", \"The final argument is a table containing boolean options for the mapping as defined in `:help :map-arguments` (including `noremap` and excluding `buffer`).\", \"\", \"Buffer-local mappings also take a buffer number as their first argument (`0` sets the mapping for the current buffer).\", \"\", \"```lua\", \"vim.api.nvim_set_keymap('n', '<Leader><Space>', ':set hlsearch!<CR>', { noremap = true, silent = true })\", \"-- :nnoremap <silent> <Leader><Space> :set hlsearch<CR>\", \"vim.api.nvim_set_keymap('n', '<Leader>tegf',  [[<Cmd>lua require('telescope.builtin').git_files()<CR>]], { noremap = true, silent = true })\", \"-- :nnoremap <silent> <Leader>tegf <Cmd>lua require('telescope.builtin').git_files()<CR>\", \"\", \"vim.api.nvim_buf_set_keymap(0, '', 'cc', 'line(\\\".\\\") == 1 ? \\\"cc\\\" : \\\"ggcc\\\"', { noremap = true, expr = true })\", \"-- :noremap <buffer> <expr> cc line('.') == 1 ? 'cc' : 'ggcc'\", \"```\", \"\", \"`vim.api.nvim_get_keymap()` takes a string containing the shortname of the mode for which you want the list of mappings (see table above). The return value is a table containing all global mappings for the mode.\", \"\", \"```lua\", \"print(vim.inspect(vim.api.nvim_get_keymap('n')))\", \"-- :verbose nmap\", \"```\", \"\", \"`vim.api.nvim_buf_get_keymap()` takes an additional buffer number as its first argument (`0` will get mapppings for the current bufffer)\", \"\", \"```lua\", \"print(vim.inspect(vim.api.nvim_buf_get_keymap(0, 'i')))\", \"-- :verbose imap <buffer>\", \"```\", \"\", \"`vim.api.nvim_del_keymap()` takes a mode and the left-hand side of a mapping.\", \"\", \"```lua\", \"vim.api.nvim_del_keymap('n', '<Leader><Space>')\", \"-- :nunmap <Leader><Space>\", \"```\", \"\", \"Again, `vim.api.nvim_buf_del_keymap()`, takes a buffer number as its first argument, with `0` representing the current buffer.\", \"\", \"```lua\", \"vim.api.nvim_buf_del_keymap(0, 'i', '<Tab>')\", \"-- :iunmap <buffer> <Tab>\", \"```\", \"\"], \"Defining user commands\": [\"\", \"There is currently no interface to create user commands in Lua. It is planned, though:\", \"\", \"- [Pull request #11613](https://github.com/neovim/neovim/pull/11613)\", \"\", \"For the time being, you're probably better off creating commands in Vimscript.\", \"\"], \"Defining autocommands\": [\"\", \"Augroups and autocommands do not have an interface yet but it is being worked on:\", \"\", \"- [Pull request #12378](https://github.com/neovim/neovim/pull/12378)\", \"\", \"In the meantime, you can either create autocommands in Vimscript or use [this wrapper from norcalli/nvim_utils](https://github.com/norcalli/nvim_utils/blob/master/lua/nvim_utils.lua#L554-L567)\", \"\"], \"Defining syntax/highlights\": [\"\", \"The syntax API is still a work in progress. Here are a couple of pointers:\", \"\", \"- [Issue #9876](https://github.com/neovim/neovim/issues/9876)\", \"- [tjdevries/colorbuddy.vim, a library for creating colorschemes in Lua](https://github.com/tjdevries/colorbuddy.vim)\", \"- `:help lua-treesitter`\", \"\"], \"General tips and recommendations\": [\"\", \"### Reloading cached modules\", \"\", \"In Lua, the `require()` function caches modules. This is a good thing for performance, but it can make working on plugins a bit cumbersome because modules are not updated on subsequent `require()` calls.\", \"\", \"If you'd like to refresh the cache for a particular module, you have to modify the `packer.loaded` global table:\", \"\", \"```lua\", \"package.loaded['modname'] = nil\", \"require('modname') -- loads an updated version of module 'modname'\", \"```\", \"\", \"The [nvim-lua/plenary.nvim](https://github.com/nvim-lua/plenary.nvim) plugin has a [custom function](https://github.com/nvim-lua/plenary.nvim/blob/master/lua/plenary/reload.lua) that does this for you.\", \"\", \"### Notes about Vimscript <-> Lua type conversion\", \"\", \"#### Converting a variable creates a copy:\", \"You can't directly interact with the reference to a Vim object from Lua or a Lua object from Vimscript.  \", \"For example, the `map()` function in Vimscript modifies a variable in place:\", \"\", \"```vim\", \"let s:list = [1, 2, 3]\", \"let s:newlist = map(s:list, {_, v -> v * 2})\", \"\", \"echo s:list\", \"\\\" [2, 4, 6]\", \"echo s:newlist\", \"\\\" [2, 4, 6]\", \"```\", \"\", \"Using this function from Lua creates a copy instead:\", \"\", \"```lua\", \"local tbl = {1, 2, 3}\", \"local newtbl = vim.fn.map(tbl, function(_, v) return v * 2 end)\", \"\", \"print(vim.inspect(tbl)) -- { 1, 2, 3 }\", \"print(vim.inspect(newtbl)) -- { 2, 4, 6 }\", \"```\", \"\", \"#### Conversion is not always possible\", \"This mostly affects functions and tables:\", \"\", \"Lua tables that are a mix between a List and a Dictionary can't be converted:\", \"\", \"```lua\", \"print(vim.fn.count({1, 1, number = 1}, 1))\", \"-- E5100: Cannot convert given lua table: table should either have a sequence of positive integer keys or contain only string keys\", \"```\", \"\", \"While you can call Vim functions in Lua with `vim.fn`, you can't hold references to them. This can cause surprising behaviors:\", \"\", \"```lua\", \"local FugitiveHead = vim.fn.funcref('FugitiveHead')\", \"print(FugitiveHead) -- vim.NIL\", \"\", \"vim.cmd(\\\"let g:test_dict = {'test_lambda': {-> 1}}\\\")\", \"print(vim.g.test_dict.test_lambda) -- nil\", \"print(vim.inspect(vim.g.test_dict)) -- {}\", \"```\", \"\", \"Passing Lua functions to Vim functions is OK, storing them in Vim variables is not:\", \"\", \"```lua\", \"-- This works:\", \"vim.fn.jobstart({'ls'}, {\", \"    on_stdout = function(chan_id, data, name)\", \"        print(vim.inspect(data))\", \"    end\", \"})\", \"\", \"-- This doesn't:\", \"vim.g.test_dict = {test_lambda = function() return 1 end} -- Error: Cannot convert given lua type\", \"```\", \"\", \"Note however that doing the same from Vimscript with `luaeval()` **does** work:\", \"\", \"```vim\", \"let g:test_dict = {'test_lambda': luaeval('function() return 1 end')}\", \"echo g:test_dict\", \"\\\" {'test_lambda': function('<lambda>4714')}\", \"```\", \"\", \"#### Vim booleans\", \"A common pattern in Vim scripts is to use `1` or `0` instead of proper booleans. Indeed, Vim did not have a separate boolean type until version 7.4.1154.\", \"\", \"Lua booleans are converted to actual booleans in Vimscript, not numbers:\", \"\", \"```vim\", \"lua vim.g.lua_true = true\", \"echo g:lua_true\", \"\\\" v:true\", \"lua vim.g.lua_false = false\", \"echo g:lua_false\", \"\\\" v:false\", \"```\", \"\", \"### Setting up linters/language servers\", \"\", \"If you're using linters and/or language servers to get diagnostics and autocompletion for Lua projects, you may have to configure Neovim-specific settings for them. Here are a few recommended settings for popular tools:\", \"\", \"#### luacheck\", \"\", \"You can get [luacheck](https://github.com/mpeterv/luacheck/) to recognize the `vim` global by putting this configuration in `~/.luacheckrc` (or `$XDG_CONFIG_HOME/luacheck/.luacheckrc`):\", \"\", \"```lua\", \"globals = {\", \"    \\\"vim\\\",\", \"}\", \"```\", \"\", \"The [Alloyed/lua-lsp](https://github.com/Alloyed/lua-lsp/) language server uses `luacheck` to provide linting and reads the same file.\", \"\", \"For more information on how to configure `luacheck`, please refer to its [documentation](https://luacheck.readthedocs.io/en/stable/config.html)\", \"\", \"#### sumneko/lua-language-server\", \"\", \"The [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig/) repository contains [instructions to configure sumneko/lua-language-server](https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#sumneko_lua) (the example uses the built-in LSP client but the configuration should be identical for other LSP client implementations).\", \"\", \"For more information on how to configure [sumneko/lua-language-server](https://github.com/sumneko/lua-language-server/) see [\\\"Setting without VSCode\\\"](https://github.com/sumneko/lua-language-server/wiki/Setting-without-VSCode)\", \"\", \"#### coc.nvim\", \"\", \"The [rafcamlet/coc-nvim-lua](https://github.com/rafcamlet/coc-nvim-lua/) completion source for [coc.nvim](https://github.com/neoclide/coc.nvim/) provides completion items for the Neovim stdlib.\", \"\", \"### Debugging Lua code\", \"\", \"You can debug Lua code running in a separate Neovim instance with [jbyuki/one-small-step-for-vimkind](https://github.com/jbyuki/one-small-step-for-vimkind)\", \"\", \"The plugin uses the [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/). Connecting to a debug adapter requires a DAP client like [mfussenegger/nvim-dap](https://github.com/mfussenegger/nvim-dap/) or [puremourning/vimspector](https://github.com/puremourning/vimspector/).\", \"\", \"### Testing Lua code\", \"\", \"- [plenary.nvim: test harness](https://github.com/nvim-lua/plenary.nvim/#plenarytest_harness)\", \"- [notomo/vusted](https://github.com/notomo/vusted)\", \"\", \"### Using Luarocks packages\", \"\", \"[wbthomason/packer.nvim](https://github.com/wbthomason/packer.nvim) supports Luarocks packages. Instructions for how to set this up are available in the [README](https://github.com/wbthomason/packer.nvim/#luarocks-support)\", \"\"], \"Miscellaneous\": [\"\", \"### vim.loop\", \"\", \"`vim.loop` is the module that exposes the LibUV API. Some resources:\", \"\", \"- [Official documentation for LibUV](https://docs.libuv.org/en/v1.x/)\", \"- [Luv documentation](https://github.com/luvit/luv/blob/master/docs.md)\", \"- [teukka.tech - Using LibUV in Neovim](https://teukka.tech/posts/2020-01-07-vimloop/)\", \"\", \"See also:\", \"- `:help vim.loop`\", \"\", \"### vim.lsp\", \"\", \"`vim.lsp` is the module that controls the built-in LSP client. The [neovim/nvim-lspconfig](https://github.com/neovim/nvim-lspconfig/) repository contains default configurations for popular language servers.\", \"\", \"The behavior of the client can be configured using \\\"lsp-handlers\\\". For more information:\", \"- `:help lsp-handler`\", \"- [neovim/neovim#12655](https://github.com/neovim/neovim/pull/12655)\", \"- [How to migrate from diagnostic-nvim](https://github.com/nvim-lua/diagnostic-nvim/issues/73#issue-737897078)\", \"\", \"You may also want to take a look at plugins built around the LSP client:\", \"- [nvim-lua/completion-nvim](https://github.com/nvim-lua/completion-nvim)\", \"- [RishabhRD/nvim-lsputils](https://github.com/RishabhRD/nvim-lsputils)\", \"\", \"See also:\", \"- `:help lsp`\", \"\", \"### vim.treesitter\", \"\", \"`vim.treesitter` is the module that controls the integration of the [Tree-sitter](https://tree-sitter.github.io/tree-sitter/) library in Neovim. If you want to know more about Tree-sitter, you may be interested in this [presentation (38:37)](https://www.youtube.com/watch?v=Jes3bD6P0To).\", \"\", \"The [nvim-treesitter](https://github.com/nvim-treesitter/) organisation hosts various plugins taking advantage of the library.\", \"\", \"See also:\", \"- `:help lua-treesitter`\", \"\", \"### Transpilers\", \"\", \"One advantage of using Lua is that you don't actually have to write Lua code! There is a multitude of transpilers available for the language.\", \"\", \"- [Moonscript](https://moonscript.org/)\", \"\", \"Probably one of the most well-known transpilers for Lua. Adds a lots of convenient features like classes, list comprehensions or function literals. The [svermeulen/nvim-moonmaker](https://github.com/svermeulen/nvim-moonmaker) plugin allows you to write Neovim plugins and configuration directly in Moonscript.\", \"\", \"- [Fennel](https://fennel-lang.org/)\", \"\", \"A lisp that compiles to Lua. You can write configuration and plugins for Neovim in Fennel with the [Olical/aniseed](https://github.com/Olical/aniseed) plugin. Additionally, the [Olical/conjure](https://github.com/Olical/conjure) plugin provides an interactive development environment that supports Fennel (among other languages).\", \"\", \"Other interesting projects:\", \"- [TypeScriptToLua/TypeScriptToLua](https://github.com/TypeScriptToLua/TypeScriptToLua)\", \"- [teal-language/tl](https://github.com/teal-language/tl)\", \"- [Haxe](https://haxe.org/)\", \"- [SwadicalRag/wasm2lua](https://github.com/SwadicalRag/wasm2lua)\", \"- [hengestone/lua-languages](https://github.com/hengestone/lua-languages)\", \"\"]}}}]\nexport default data","import './App.css'\n\nimport ColorHash from 'color-hash'\nimport React, { useState } from 'react'\n\nimport Cards from './components/Cards/Cards'\nimport Footer from './components/Footer/Footer'\nimport Header from './components/Header/Header'\nimport data from './pbb.js'\n\nexport type ProjectOption = { value: number, label: string }\n\nconst getTagColor = (tag: string): string => {\n  const colorHash = new ColorHash({ lightness: 0.5 })\n  let color = colorHash.rgb(tag)\n  const rgbaString = `rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.9)`\n  return rgbaString\n}\n\nconst formatData = data => {\n  let formatted = []\n  for (let heading in data) {\n    let set = []\n    let accent = getTagColor(heading)\n    for (let subheading in data[heading]) {\n      set.push({\n        header: heading,\n        title: subheading,\n        content: data[heading][subheading].join('\\n'),\n        accent,\n      })\n    }\n    formatted.push(set)\n  }\n  return formatted\n}\n\nconst filterCards = (cards, search) => {\n  let newCards = cards\n    .map(ca =>\n      ca.filter(\n        c =>\n          c.title.toLowerCase().includes(search.toLowerCase()) ||\n          c.header.toLowerCase().includes(search.toLowerCase())\n      )\n    )\n    .filter(cd => cd.length > 0)\n  return newCards\n}\n\nconst App = () => {\n  const projects = data.map((d, i) => {\n    return { label: d.name, value: i }\n  })\n\n  const [project, setProject] = useState(0)\n  const { name, content } = data[project]\n\n  const fData = formatData(content)\n  const [cards, setCards] = useState(fData)\n\n  const projectChange = (project: number, value: string = \"\") => {\n    setProject(project)\n    setCards(filterCards(formatData(data[project].content), value))\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n        name={name}\n        projects={projects}\n        currentProject={project}\n        onSearch={val => projectChange(project, val)}\n        onProjectChange={projectChange}\n      />\n      <Cards cards={cards} />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}